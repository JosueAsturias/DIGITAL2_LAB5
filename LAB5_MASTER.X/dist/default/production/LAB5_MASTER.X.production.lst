

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Feb 23 14:40:12 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0088                     	;# 
   265  0089                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  008F                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  0105                     	;# 
   289  0107                     	;# 
   290  0108                     	;# 
   291  0109                     	;# 
   292  010C                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  010F                     	;# 
   297  0185                     	;# 
   298  0187                     	;# 
   299  0188                     	;# 
   300  0189                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0088                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  000E                     	;# 
   397  000F                     	;# 
   398  0010                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0013                     	;# 
   402  0014                     	;# 
   403  0015                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  001D                     	;# 
   414  001E                     	;# 
   415  001F                     	;# 
   416  0081                     	;# 
   417  0085                     	;# 
   418  0086                     	;# 
   419  0087                     	;# 
   420  0088                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459                           
   460                           	psect	idataBANK0
   461  0250                     __pidataBANK0:	
   462                           
   463                           ;initializer for _jahr
   464  0250  3414               	retlw	20
   465  0251  3400               	retlw	0
   466                           
   467                           ;initializer for _mes
   468  0252  3402               	retlw	2
   469  0253  3400               	retlw	0
   470                           
   471                           ;initializer for _datum
   472  0254  3417               	retlw	23
   473  0255  3400               	retlw	0
   474                           
   475                           ;initializer for _dia
   476  0256  3401               	retlw	1
   477  0257  3400               	retlw	0
   478  0013                     _SSPBUF	set	19
   479  0014                     _SSPCON	set	20
   480  0008                     _PORTD	set	8
   481  0007                     _PORTCbits	set	7
   482  0063                     _SSPIF	set	99
   483  005E                     _PEIE	set	94
   484  005F                     _GIE	set	95
   485  0091                     _SSPCON2bits	set	145
   486  0087                     _TRISCbits	set	135
   487  0094                     _SSPSTAT	set	148
   488  0093                     _SSPADD	set	147
   489  0091                     _SSPCON2	set	145
   490  0088                     _TRISD	set	136
   491  0463                     _SSPIE	set	1123
   492  043C                     _TRISC4	set	1084
   493  043B                     _TRISC3	set	1083
   494  0439                     _TRISC1	set	1081
   495  0438                     _TRISC0	set	1080
   496                           
   497                           	psect	strings
   498  0003                     __pstrings:	
   499  0003                     stringtab:	
   500  0003                     __stringtab:	
   501  0003                     stringcode:	
   502                           ;	String table - string pointers are 1 byte each
   503                           
   504  0003                     stringdir:	
   505  0003  3000               	movlw	high stringdir
   506  0004  008A               	movwf	10
   507  0005  0804               	movf	4,w
   508  0006  0A84               	incf	4,f
   509  0007  0782               	addwf	2,f
   510  0008                     __stringbase:	
   511  0008  3400               	retlw	0
   512  0009                     __end_of__stringtab:	
   513  0009                     STR_1:	
   514  0009  3453               	retlw	83	;'S'
   515  000A  3431               	retlw	49	;'1'
   516  000B  343A               	retlw	58	;':'
   517  000C  3420               	retlw	32	;' '
   518  000D  3420               	retlw	32	;' '
   519  000E  3453               	retlw	83	;'S'
   520  000F  3432               	retlw	50	;'2'
   521  0010  343A               	retlw	58	;':'
   522  0011  3420               	retlw	32	;' '
   523  0012  3420               	retlw	32	;' '
   524  0013  3420               	retlw	32	;' '
   525  0014  3453               	retlw	83	;'S'
   526  0015  3433               	retlw	51	;'3'
   527  0016  343A               	retlw	58	;':'
   528  0017  3400               	retlw	0
   529  0018                     STR_2:	
   530  0018  3430               	retlw	48	;'0'
   531  0019  3478               	retlw	120	;'x'
   532  001A  3400               	retlw	0
   533                           
   534                           ; #config settings
   535  0000                     
   536                           	psect	cinit
   537  07E8                     start_initialization:	
   538  07E8                     __initialization:	
   539                           
   540                           ; Initialize objects allocated to BANK0
   541  07E8  1383               	bcf	3,7	;select IRP bank0
   542  07E9  3056               	movlw	low (__pdataBANK0+8)
   543  07EA  00FD               	movwf	btemp+-1
   544  07EB  3002               	movlw	high __pidataBANK0
   545  07EC  00FE               	movwf	btemp
   546  07ED  3050               	movlw	low __pidataBANK0
   547  07EE  00FF               	movwf	btemp+1
   548  07EF  304E               	movlw	low __pdataBANK0
   549  07F0  0084               	movwf	4
   550  07F1  120A  118A  2274  120A  118A  	fcall	init_ram0
   551                           
   552                           ; Clear objects allocated to BANK0
   553  07F6  3038               	movlw	low __pbssBANK0
   554  07F7  0084               	movwf	4
   555  07F8  304E               	movlw	low (__pbssBANK0+22)
   556  07F9  120A  118A  2248   	fcall	clear_ram0
   557  07FC                     end_of_initialization:	
   558                           ;End of C runtime variable initialization code
   559                           
   560  07FC                     __end_of__initialization:	
   561  07FC  0183               	clrf	3
   562  07FD  120A  118A  2E80   	ljmp	_main	;jump to C main() function
   563                           
   564                           	psect	bssBANK0
   565  0038                     __pbssBANK0:	
   566  0038                     mapear@F1358:	
   567  0038                     	ds	6
   568  003E                     uint_to_array@F1341:	
   569  003E                     	ds	6
   570  0044                     _hora:	
   571  0044                     	ds	2
   572  0046                     _min:	
   573  0046                     	ds	2
   574  0048                     _seg:	
   575  0048                     	ds	2
   576  004A                     _temp_array:	
   577  004A                     	ds	1
   578  004B                     _voltaje_map:	
   579  004B                     	ds	1
   580  004C                     _contador:	
   581  004C                     	ds	1
   582  004D                     _valorADC:	
   583  004D                     	ds	1
   584                           
   585                           	psect	dataBANK0
   586  004E                     __pdataBANK0:	
   587  004E                     _jahr:	
   588  004E                     	ds	2
   589  0050                     _mes:	
   590  0050                     	ds	2
   591  0052                     _datum:	
   592  0052                     	ds	2
   593  0054                     _dia:	
   594  0054                     	ds	2
   595                           
   596                           	psect	inittext
   597  0270                     init_fetch0:	
   598                           ;	Called with low address in FSR and high address in W
   599                           
   600  0270  087E               	movf	126,w
   601  0271  008A               	movwf	10
   602  0272  087F               	movf	127,w
   603  0273  0082               	movwf	2
   604  0274                     init_ram0:	
   605                           ;Called with:
   606                           ;	high address of idata address in btemp 
   607                           ;	low address of idata address in btemp+1 
   608                           ;	low address of data in FSR
   609                           ;	high address + 1 of data in btemp-1
   610                           
   611  0274  2270  120A  118A   	fcall	init_fetch0
   612  0277  0080               	movwf	0
   613  0278  0A84               	incf	4,f
   614  0279  0804               	movf	4,w
   615  027A  067D               	xorwf	125,w
   616  027B  1903               	btfsc	3,2
   617  027C  3400               	retlw	0
   618  027D  0AFF               	incf	127,f
   619  027E  1903               	btfsc	3,2
   620  027F  0AFE               	incf	126,f
   621  0280  2A74               	goto	init_ram0
   622                           
   623                           	psect	clrtext
   624  0248                     clear_ram0:	
   625                           ;	Called with FSR containing the base address, and
   626                           ;	W with the last address+1
   627                           
   628  0248  0064               	clrwdt	;clear the watchdog before getting into this loop
   629  0249                     clrloop0:	
   630  0249  0180               	clrf	0	;clear RAM location pointed to by FSR
   631  024A  0A84               	incf	4,f	;increment pointer
   632  024B  0604               	xorwf	4,w	;XOR with final address
   633  024C  1903               	btfsc	3,2	;have we reached the end yet?
   634  024D  3400               	retlw	0	;all done for this memory range, return
   635  024E  0604               	xorwf	4,w	;XOR again to restore value
   636  024F  2A49               	goto	clrloop0	;do the next byte
   637                           
   638                           	psect	cstackCOMMON
   639  0070                     __pcstackCOMMON:	
   640  0070                     ?_uint_to_array:	
   641  0070                     ?_I2C_Master_Start:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ??_I2C_Master_Start:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_I2C_Master_Write:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_I2C_Master_Stop:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ??_I2C_Master_Stop:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_get_Temp:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_LCD_Cmd:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ??_LCD_Cmd:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_LCD_clear:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_LCD_init:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_LCD_Write_Character:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ??_LCD_Write_Character:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_LCD_Write_String:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_uint_to_char:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ??_uint_to_char:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_main:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_I2C_Master_Wait:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ??_I2C_Master_Wait:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_I2C_Master_Read:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?___wmul:	
   699                           ; 2 bytes @ 0x0
   700                           
   701  0070                     ?___lldiv:	
   702                           ; 2 bytes @ 0x0
   703                           
   704  0070                     I2C_Master_Write@d:	
   705                           ; 4 bytes @ 0x0
   706                           
   707  0070                     I2C_Master_Read@a:	
   708                           ; 2 bytes @ 0x0
   709                           
   710  0070                     ___wmul@multiplier:	
   711                           ; 2 bytes @ 0x0
   712                           
   713  0070                     ___lldiv@divisor:	
   714                           ; 2 bytes @ 0x0
   715                           
   716                           
   717                           ; 4 bytes @ 0x0
   718  0070                     	ds	1
   719  0071                     LCD_Write_Character@caracter:	
   720                           
   721                           ; 1 bytes @ 0x1
   722  0071                     	ds	1
   723  0072                     ??_I2C_Master_Write:	
   724  0072                     ??_I2C_Master_Read:	
   725                           ; 1 bytes @ 0x2
   726                           
   727  0072                     ??_LCD_Write_String:	
   728                           ; 1 bytes @ 0x2
   729                           
   730  0072                     LCD_Cmd@comando:	
   731                           ; 1 bytes @ 0x2
   732                           
   733  0072                     uint_to_char@numero:	
   734                           ; 1 bytes @ 0x2
   735                           
   736  0072                     LCD_Write_String@n:	
   737                           ; 1 bytes @ 0x2
   738                           
   739  0072                     ___wmul@multiplicand:	
   740                           ; 2 bytes @ 0x2
   741                           
   742                           
   743                           ; 2 bytes @ 0x2
   744  0072                     	ds	1
   745  0073                     ??_LCD_clear:	
   746  0073                     ??_LCD_init:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  0073                     ?_LCD_Set_Cursor:	
   750                           ; 1 bytes @ 0x3
   751                           
   752  0073                     LCD_Set_Cursor@columna:	
   753                           ; 1 bytes @ 0x3
   754                           
   755  0073                     uint_to_char@numChr:	
   756                           ; 1 bytes @ 0x3
   757                           
   758                           
   759                           ; 1 bytes @ 0x3
   760  0073                     	ds	1
   761  0074                     ??_LCD_Set_Cursor:	
   762  0074                     ??___wmul:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0074                     LCD_Write_String@a:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  0074                     I2C_Master_Read@temp:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0074                     ___wmul@product:	
   772                           ; 2 bytes @ 0x4
   773                           
   774  0074                     ___lldiv@dividend:	
   775                           ; 2 bytes @ 0x4
   776                           
   777                           
   778                           ; 4 bytes @ 0x4
   779  0074                     	ds	2
   780  0076                     ??_get_Temp:	
   781  0076                     ?_mapear:	
   782                           ; 1 bytes @ 0x6
   783                           
   784  0076                     ?___awdiv:	
   785                           ; 1 bytes @ 0x6
   786                           
   787  0076                     LCD_Set_Cursor@linea:	
   788                           ; 2 bytes @ 0x6
   789                           
   790  0076                     mapear@limReal:	
   791                           ; 1 bytes @ 0x6
   792                           
   793  0076                     ___awdiv@divisor:	
   794                           ; 1 bytes @ 0x6
   795                           
   796                           
   797                           ; 2 bytes @ 0x6
   798  0076                     	ds	1
   799  0077                     LCD_Set_Cursor@corrimiento:	
   800  0077                     mapear@limSup:	
   801                           ; 1 bytes @ 0x7
   802                           
   803                           
   804                           ; 1 bytes @ 0x7
   805  0077                     	ds	1
   806  0078                     ??_mapear:	
   807  0078                     ??___lldiv:	
   808                           ; 1 bytes @ 0x8
   809                           
   810  0078                     get_Temp@TempMSB:	
   811                           ; 1 bytes @ 0x8
   812                           
   813  0078                     ___awdiv@dividend:	
   814                           ; 1 bytes @ 0x8
   815                           
   816                           
   817                           ; 2 bytes @ 0x8
   818  0078                     	ds	1
   819  0079                     ___lldiv@quotient:	
   820                           
   821                           ; 4 bytes @ 0x9
   822  0079                     	ds	1
   823  007A                     ??___awdiv:	
   824                           
   825                           ; 1 bytes @ 0xA
   826  007A                     	ds	3
   827  007D                     ___lldiv@counter:	
   828                           
   829                           ; 1 bytes @ 0xD
   830  007D                     	ds	1
   831                           
   832                           	psect	cstackBANK0
   833  0020                     __pcstackBANK0:	
   834  0020                     ?_I2C_Master_Init:	
   835  0020                     mapear@valor:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0020                     ___awdiv@counter:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0020                     I2C_Master_Init@c:	
   842                           ; 1 bytes @ 0x0
   843                           
   844                           
   845                           ; 4 bytes @ 0x0
   846  0020                     	ds	1
   847  0021                     ___awdiv@sign:	
   848  0021                     mapear@resultado:	
   849                           ; 1 bytes @ 0x1
   850                           
   851                           
   852                           ; 6 bytes @ 0x1
   853  0021                     	ds	1
   854  0022                     ___awdiv@quotient:	
   855                           
   856                           ; 2 bytes @ 0x2
   857  0022                     	ds	2
   858  0024                     ??_uint_to_array:	
   859  0024                     ??_I2C_Master_Init:	
   860                           ; 1 bytes @ 0x4
   861                           
   862                           
   863                           ; 1 bytes @ 0x4
   864  0024                     	ds	3
   865  0027                     mapear@dividendo:	
   866                           
   867                           ; 2 bytes @ 0x7
   868  0027                     	ds	3
   869  002A                     uint_to_array@decenas:	
   870                           
   871                           ; 1 bytes @ 0xA
   872  002A                     	ds	1
   873  002B                     uint_to_array@resultado:	
   874                           
   875                           ; 6 bytes @ 0xB
   876  002B                     	ds	6
   877  0031                     uint_to_array@centenas:	
   878                           
   879                           ; 1 bytes @ 0x11
   880  0031                     	ds	1
   881  0032                     uint_to_array@numero:	
   882                           
   883                           ; 1 bytes @ 0x12
   884  0032                     	ds	1
   885  0033                     ??_main:	
   886                           
   887                           ; 1 bytes @ 0x13
   888  0033                     	ds	3
   889  0036                     main@signo:	
   890                           
   891                           ; 1 bytes @ 0x16
   892  0036                     	ds	1
   893  0037                     main@temperatura:	
   894                           
   895                           ; 1 bytes @ 0x17
   896  0037                     	ds	1
   897                           
   898                           	psect	maintext
   899  0680                     __pmaintext:	
   900 ;;
   901 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   902 ;;
   903 ;; *************** function _main *****************
   904 ;; Defined at:
   905 ;;		line 49 in file "Master_main.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;		None
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  temperatura     1   23[BANK0 ] unsigned char 
   910 ;;  signo           1   22[BANK0 ] unsigned char 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : B00/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   920 ;;      Params:         0       0       0       0       0
   921 ;;      Locals:         0       2       0       0       0
   922 ;;      Temps:          0       3       0       0       0
   923 ;;      Totals:         0       5       0       0       0
   924 ;;Total ram usage:        5 bytes
   925 ;; Hardware stack levels required when called:    3
   926 ;; This function calls:
   927 ;;		_I2C_Master_Init
   928 ;;		_I2C_Master_Read
   929 ;;		_I2C_Master_Start
   930 ;;		_I2C_Master_Stop
   931 ;;		_I2C_Master_Write
   932 ;;		_LCD_Set_Cursor
   933 ;;		_LCD_Write_Character
   934 ;;		_LCD_Write_String
   935 ;;		_LCD_clear
   936 ;;		_LCD_init
   937 ;;		_get_Temp
   938 ;;		_mapear
   939 ;;		_uint_to_array
   940 ;;		_uint_to_char
   941 ;; This function is called by:
   942 ;;		Startup code after reset
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           
   947                           ;psect for function _main
   948  0680                     _main:	
   949                           
   950                           ;Master_main.c: 50:     TRISD = 0;
   951                           
   952                           ;incstack = 0
   953                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   954  0680  1683               	bsf	3,5	;RP0=1, select bank1
   955  0681  1303               	bcf	3,6	;RP1=0, select bank1
   956  0682  0188               	clrf	8	;volatile
   957                           
   958                           ;Master_main.c: 51:     TRISC0 = 0;
   959  0683  1007               	bcf	7,0	;volatile
   960                           
   961                           ;Master_main.c: 52:     TRISC1 = 0;
   962  0684  1087               	bcf	7,1	;volatile
   963                           
   964                           ;Master_main.c: 53:     LCD_init();
   965  0685  120A  118A  24F6  120A  118A  	fcall	_LCD_init
   966                           
   967                           ;Master_main.c: 54:     LCD_clear();
   968  068A  120A  118A  2281  120A  118A  	fcall	_LCD_clear
   969                           
   970                           ;Master_main.c: 55:     LCD_Set_Cursor(1,1);
   971  068F  01F3               	clrf	LCD_Set_Cursor@columna
   972  0690  0AF3               	incf	LCD_Set_Cursor@columna,f
   973  0691  3001               	movlw	1
   974  0692  120A  118A  22DA  120A  118A  	fcall	_LCD_Set_Cursor
   975                           
   976                           ;Master_main.c: 56:     LCD_Write_String("S1:  S2:   S3:");
   977  0697  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   978  0698  120A  118A  22B8  120A  118A  	fcall	_LCD_Write_String
   979                           
   980                           ;Master_main.c: 57:     LCD_Set_Cursor(2,6);
   981  069D  3006               	movlw	6
   982  069E  1283               	bcf	3,5	;RP0=0, select bank0
   983  069F  1303               	bcf	3,6	;RP1=0, select bank0
   984  06A0  00B3               	movwf	??_main
   985  06A1  0833               	movf	??_main,w
   986  06A2  00F3               	movwf	LCD_Set_Cursor@columna
   987  06A3  3002               	movlw	2
   988  06A4  120A  118A  22DA  120A  118A  	fcall	_LCD_Set_Cursor
   989                           
   990                           ;Master_main.c: 58:     LCD_Write_String("0x");
   991  06A9  3010               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   992  06AA  120A  118A  22B8  120A  118A  	fcall	_LCD_Write_String
   993                           
   994                           ;Master_main.c: 59:     I2C_Master_Init(100000);
   995  06AF  3000               	movlw	0
   996  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   997  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   998  06B2  00A3               	movwf	I2C_Master_Init@c+3
   999  06B3  3001               	movlw	1
  1000  06B4  00A2               	movwf	I2C_Master_Init@c+2
  1001  06B5  3086               	movlw	134
  1002  06B6  00A1               	movwf	I2C_Master_Init@c+1
  1003  06B7  30A0               	movlw	160
  1004  06B8  00A0               	movwf	I2C_Master_Init@c
  1005  06B9  120A  118A  2361  120A  118A  	fcall	_I2C_Master_Init
  1006  06BE                     l1689:	
  1007                           
  1008                           ;Master_main.c: 66:         I2C_Master_Start();
  1009  06BE  120A  118A  2232  120A  118A  	fcall	_I2C_Master_Start
  1010                           
  1011                           ;Master_main.c: 67:         I2C_Master_Write(0x61);
  1012  06C3  3061               	movlw	97
  1013  06C4  00F0               	movwf	I2C_Master_Write@d
  1014  06C5  3000               	movlw	0
  1015  06C6  00F1               	movwf	I2C_Master_Write@d+1
  1016  06C7  120A  118A  2240  120A  118A  	fcall	_I2C_Master_Write
  1017                           
  1018                           ;Master_main.c: 68:         valorADC = I2C_Master_Read(0);
  1019  06CC  3000               	movlw	0
  1020  06CD  00F0               	movwf	I2C_Master_Read@a
  1021  06CE  00F1               	movwf	I2C_Master_Read@a+1
  1022  06CF  120A  118A  2306  120A  118A  	fcall	_I2C_Master_Read
  1023  06D4  0870               	movf	?_I2C_Master_Read,w
  1024  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1025  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1026  06D7  00B3               	movwf	??_main
  1027  06D8  0833               	movf	??_main,w
  1028  06D9  00CD               	movwf	_valorADC
  1029                           
  1030                           ;Master_main.c: 69:         I2C_Master_Stop();
  1031  06DA  120A  118A  2239  120A  118A  	fcall	_I2C_Master_Stop
  1032                           
  1033                           ;Master_main.c: 70:         _delay((unsigned long)((10)*(4000000/4000.0)));
  1034  06DF  300D               	movlw	13
  1035  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1036  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1037  06E2  00B4               	movwf	??_main+1
  1038  06E3  30FB               	movlw	251
  1039  06E4  00B3               	movwf	??_main
  1040  06E5                     u787:	
  1041  06E5  0BB3               	decfsz	??_main,f
  1042  06E6  2EE5               	goto	u787
  1043  06E7  0BB4               	decfsz	??_main+1,f
  1044  06E8  2EE5               	goto	u787
  1045                           
  1046                           ;Master_main.c: 72:         I2C_Master_Start();
  1047  06E9  120A  118A  2232  120A  118A  	fcall	_I2C_Master_Start
  1048                           
  1049                           ;Master_main.c: 73:         I2C_Master_Write(0x71);
  1050  06EE  3071               	movlw	113
  1051  06EF  00F0               	movwf	I2C_Master_Write@d
  1052  06F0  3000               	movlw	0
  1053  06F1  00F1               	movwf	I2C_Master_Write@d+1
  1054  06F2  120A  118A  2240  120A  118A  	fcall	_I2C_Master_Write
  1055                           
  1056                           ;Master_main.c: 74:         contador = I2C_Master_Read(0);
  1057  06F7  3000               	movlw	0
  1058  06F8  00F0               	movwf	I2C_Master_Read@a
  1059  06F9  00F1               	movwf	I2C_Master_Read@a+1
  1060  06FA  120A  118A  2306  120A  118A  	fcall	_I2C_Master_Read
  1061  06FF  0870               	movf	?_I2C_Master_Read,w
  1062  0700  1283               	bcf	3,5	;RP0=0, select bank0
  1063  0701  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0702  00B3               	movwf	??_main
  1065  0703  0833               	movf	??_main,w
  1066  0704  00CC               	movwf	_contador
  1067                           
  1068                           ;Master_main.c: 75:         I2C_Master_Stop();
  1069  0705  120A  118A  2239  120A  118A  	fcall	_I2C_Master_Stop
  1070                           
  1071                           ;Master_main.c: 76:         _delay((unsigned long)((10)*(4000000/4000.0)));
  1072  070A  300D               	movlw	13
  1073  070B  1283               	bcf	3,5	;RP0=0, select bank0
  1074  070C  1303               	bcf	3,6	;RP1=0, select bank0
  1075  070D  00B4               	movwf	??_main+1
  1076  070E  30FB               	movlw	251
  1077  070F  00B3               	movwf	??_main
  1078  0710                     u797:	
  1079  0710  0BB3               	decfsz	??_main,f
  1080  0711  2F10               	goto	u797
  1081  0712  0BB4               	decfsz	??_main+1,f
  1082  0713  2F10               	goto	u797
  1083                           
  1084                           ;Master_main.c: 78:         uint8_t temperatura = get_Temp();
  1085  0714  120A  118A  2397  120A  118A  	fcall	_get_Temp
  1086  0719  1283               	bcf	3,5	;RP0=0, select bank0
  1087  071A  1303               	bcf	3,6	;RP1=0, select bank0
  1088  071B  00B3               	movwf	??_main
  1089  071C  0833               	movf	??_main,w
  1090  071D  00B7               	movwf	main@temperatura
  1091                           
  1092                           ;Master_main.c: 79:         uint8_t signo = temperatura & 0b10000000;
  1093  071E  0837               	movf	main@temperatura,w
  1094  071F  3980               	andlw	128
  1095  0720  00B3               	movwf	??_main
  1096  0721  0833               	movf	??_main,w
  1097  0722  00B6               	movwf	main@signo
  1098                           
  1099                           ;Master_main.c: 80:         LCD_Set_Cursor(2,11);
  1100  0723  300B               	movlw	11
  1101  0724  00B3               	movwf	??_main
  1102  0725  0833               	movf	??_main,w
  1103  0726  00F3               	movwf	LCD_Set_Cursor@columna
  1104  0727  3002               	movlw	2
  1105  0728  120A  118A  22DA  120A  118A  	fcall	_LCD_Set_Cursor
  1106                           
  1107                           ;Master_main.c: 81:         if (signo){ LCD_Write_Character('-'); }
  1108  072D  1283               	bcf	3,5	;RP0=0, select bank0
  1109  072E  1303               	bcf	3,6	;RP1=0, select bank0
  1110  072F  0836               	movf	main@signo,w
  1111  0730  1903               	btfsc	3,2
  1112  0731  2F34               	goto	l1719
  1113  0732  302D               	movlw	45
  1114  0733  2F35               	goto	L1
  1115  0734                     l1719:	
  1116  0734  3020               	movlw	32
  1117  0735                     L1:	
  1118  0735  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1119                           
  1120                           ;Master_main.c: 84:         temp_array = uint_to_array(temperatura & 0b01111111);
  1121  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1122  073B  1303               	bcf	3,6	;RP1=0, select bank0
  1123  073C  0837               	movf	main@temperatura,w
  1124  073D  397F               	andlw	127
  1125  073E  120A  118A  255D  120A  118A  	fcall	_uint_to_array
  1126  0743  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0744  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0745  00B3               	movwf	??_main
  1129  0746  0833               	movf	??_main,w
  1130  0747  00CA               	movwf	_temp_array
  1131                           
  1132                           ;Master_main.c: 85:         LCD_Write_Character(uint_to_char(temp_array[1]));
  1133  0748  084A               	movf	_temp_array,w
  1134  0749  3E02               	addlw	2
  1135  074A  0084               	movwf	4
  1136  074B  1383               	bcf	3,7	;select IRP bank0
  1137  074C  0800               	movf	0,w
  1138  074D  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1139  0752  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1140                           
  1141                           ;Master_main.c: 86:         LCD_Write_Character(uint_to_char(temp_array[2]));
  1142  0757  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0758  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0759  084A               	movf	_temp_array,w
  1145  075A  3E04               	addlw	4
  1146  075B  0084               	movwf	4
  1147  075C  1383               	bcf	3,7	;select IRP bank0
  1148  075D  0800               	movf	0,w
  1149  075E  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1150  0763  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1151                           
  1152                           ;Master_main.c: 87:         LCD_Write_Character(223);
  1153  0768  30DF               	movlw	223
  1154  0769  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1155                           
  1156                           ;Master_main.c: 88:         LCD_Write_Character('C');
  1157  076E  3043               	movlw	67
  1158  076F  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1159                           
  1160                           ;Master_main.c: 93:         voltaje_map = mapear(valorADC, 255, 5);
  1161  0774  30FF               	movlw	255
  1162  0775  1283               	bcf	3,5	;RP0=0, select bank0
  1163  0776  1303               	bcf	3,6	;RP1=0, select bank0
  1164  0777  00B3               	movwf	??_main
  1165  0778  0833               	movf	??_main,w
  1166  0779  00F6               	movwf	mapear@limReal
  1167  077A  3005               	movlw	5
  1168  077B  00B4               	movwf	??_main+1
  1169  077C  0834               	movf	??_main+1,w
  1170  077D  00F7               	movwf	mapear@limSup
  1171  077E  084D               	movf	_valorADC,w
  1172  077F  120A  118A  25E2  120A  118A  	fcall	_mapear
  1173  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0786  00B5               	movwf	??_main+2
  1176  0787  0835               	movf	??_main+2,w
  1177  0788  00CB               	movwf	_voltaje_map
  1178                           
  1179                           ;Master_main.c: 94:         LCD_Set_Cursor(2,0);
  1180  0789  01F3               	clrf	LCD_Set_Cursor@columna
  1181  078A  3002               	movlw	2
  1182  078B  120A  118A  22DA  120A  118A  	fcall	_LCD_Set_Cursor
  1183                           
  1184                           ;Master_main.c: 95:         LCD_Write_Character(uint_to_char(voltaje_map[0]));
  1185  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0792  084B               	movf	_voltaje_map,w
  1188  0793  0084               	movwf	4
  1189  0794  1383               	bcf	3,7	;select IRP bank0
  1190  0795  0800               	movf	0,w
  1191  0796  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1192  079B  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1193                           
  1194                           ;Master_main.c: 96:         LCD_Write_Character('.');
  1195  07A0  302E               	movlw	46
  1196  07A1  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1197                           
  1198                           ;Master_main.c: 97:         LCD_Write_Character(uint_to_char(voltaje_map[1]));
  1199  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  1200  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  1201  07A8  084B               	movf	_voltaje_map,w
  1202  07A9  3E02               	addlw	2
  1203  07AA  0084               	movwf	4
  1204  07AB  1383               	bcf	3,7	;select IRP bank0
  1205  07AC  0800               	movf	0,w
  1206  07AD  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1207  07B2  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1208                           
  1209                           ;Master_main.c: 98:         LCD_Write_Character(uint_to_char(voltaje_map[2]));
  1210  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  1211  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  1212  07B9  084B               	movf	_voltaje_map,w
  1213  07BA  3E04               	addlw	4
  1214  07BB  0084               	movwf	4
  1215  07BC  1383               	bcf	3,7	;select IRP bank0
  1216  07BD  0800               	movf	0,w
  1217  07BE  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1218  07C3  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1219                           
  1220                           ;Master_main.c: 99:         LCD_Write_Character('V');
  1221  07C8  3056               	movlw	86
  1222  07C9  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1223                           
  1224                           ;Master_main.c: 101:         LCD_Set_Cursor(2,8);
  1225  07CE  3008               	movlw	8
  1226  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1227  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1228  07D1  00B3               	movwf	??_main
  1229  07D2  0833               	movf	??_main,w
  1230  07D3  00F3               	movwf	LCD_Set_Cursor@columna
  1231  07D4  3002               	movlw	2
  1232  07D5  120A  118A  22DA  120A  118A  	fcall	_LCD_Set_Cursor
  1233                           
  1234                           ;Master_main.c: 102:         LCD_Write_Character(uint_to_char(contador));
  1235  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  1236  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  1237  07DC  084C               	movf	_contador,w
  1238  07DD  120A  118A  2493  120A  118A  	fcall	_uint_to_char
  1239  07E2  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  1240  07E7  2EBE               	goto	l1689
  1241  07E8                     __end_of_main:	
  1242                           
  1243                           	psect	text1
  1244  0493                     __ptext1:	
  1245 ;; *************** function _uint_to_char *****************
  1246 ;; Defined at:
  1247 ;;		line 116 in file "LCD_8bits.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  numero          1    wreg     unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  numero          1    2[COMMON] unsigned char 
  1252 ;;  numChr          1    3[COMMON] unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      unsigned char 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1262 ;;      Params:         0       0       0       0       0
  1263 ;;      Locals:         2       0       0       0       0
  1264 ;;      Temps:          2       0       0       0       0
  1265 ;;      Totals:         4       0       0       0       0
  1266 ;;Total ram usage:        4 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _uint_to_char
  1277  0493                     _uint_to_char:	
  1278                           
  1279                           ;incstack = 0
  1280                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1281                           ;uint_to_char@numero stored from wreg
  1282  0493  00F2               	movwf	uint_to_char@numero
  1283                           
  1284                           ;LCD_8bits.c: 118:     switch (numero){
  1285  0494  2CBA               	goto	l1569
  1286  0495                     l1535:	
  1287                           
  1288                           ;LCD_8bits.c: 120:             numChr = 48;
  1289  0495  3030               	movlw	48
  1290  0496  2CB6               	goto	L17
  1291  0497                     l1537:	
  1292                           ;LCD_8bits.c: 121:             break;
  1293                           
  1294                           
  1295                           ;LCD_8bits.c: 123:             numChr = 49;
  1296  0497  3031               	movlw	49
  1297  0498  2CB6               	goto	L17
  1298  0499                     l1539:	
  1299                           ;LCD_8bits.c: 124:             break;
  1300                           
  1301                           
  1302                           ;LCD_8bits.c: 126:             numChr = 50;
  1303  0499  3032               	movlw	50
  1304  049A  2CB6               	goto	L17
  1305  049B                     l1541:	
  1306                           ;LCD_8bits.c: 127:             break;
  1307                           
  1308                           
  1309                           ;LCD_8bits.c: 129:             numChr = 51;
  1310  049B  3033               	movlw	51
  1311  049C  2CB6               	goto	L17
  1312  049D                     l1543:	
  1313                           ;LCD_8bits.c: 130:             break;
  1314                           
  1315                           
  1316                           ;LCD_8bits.c: 132:             numChr = 52;
  1317  049D  3034               	movlw	52
  1318  049E  2CB6               	goto	L17
  1319  049F                     l1545:	
  1320                           ;LCD_8bits.c: 133:             break;
  1321                           
  1322                           
  1323                           ;LCD_8bits.c: 135:             numChr = 53;
  1324  049F  3035               	movlw	53
  1325  04A0  2CB6               	goto	L17
  1326  04A1                     l1547:	
  1327                           ;LCD_8bits.c: 136:             break;
  1328                           
  1329                           
  1330                           ;LCD_8bits.c: 138:             numChr = 54;
  1331  04A1  3036               	movlw	54
  1332  04A2  2CB6               	goto	L17
  1333  04A3                     l1549:	
  1334                           ;LCD_8bits.c: 139:             break;
  1335                           
  1336                           
  1337                           ;LCD_8bits.c: 141:             numChr = 55;
  1338  04A3  3037               	movlw	55
  1339  04A4  2CB6               	goto	L17
  1340  04A5                     l1551:	
  1341                           ;LCD_8bits.c: 142:             break;
  1342                           
  1343                           
  1344                           ;LCD_8bits.c: 144:             numChr = 56;
  1345  04A5  3038               	movlw	56
  1346  04A6  2CB6               	goto	L17
  1347  04A7                     l1553:	
  1348                           ;LCD_8bits.c: 145:             break;
  1349                           
  1350                           
  1351                           ;LCD_8bits.c: 147:             numChr = 57;
  1352  04A7  3039               	movlw	57
  1353  04A8  2CB6               	goto	L17
  1354  04A9                     l1555:	
  1355                           ;LCD_8bits.c: 148:             break;
  1356                           
  1357                           
  1358                           ;LCD_8bits.c: 150:             numChr = 65;
  1359  04A9  3041               	movlw	65
  1360  04AA  2CB6               	goto	L17
  1361  04AB                     l1557:	
  1362                           ;LCD_8bits.c: 151:             break;
  1363                           
  1364                           
  1365                           ;LCD_8bits.c: 153:             numChr = 66;
  1366  04AB  3042               	movlw	66
  1367  04AC  2CB6               	goto	L17
  1368  04AD                     l1559:	
  1369                           ;LCD_8bits.c: 154:             break;
  1370                           
  1371                           
  1372                           ;LCD_8bits.c: 156:             numChr = 67;
  1373  04AD  3043               	movlw	67
  1374  04AE  2CB6               	goto	L17
  1375  04AF                     l1561:	
  1376                           ;LCD_8bits.c: 157:             break;
  1377                           
  1378                           
  1379                           ;LCD_8bits.c: 159:             numChr = 68;
  1380  04AF  3044               	movlw	68
  1381  04B0  2CB6               	goto	L17
  1382  04B1                     l1563:	
  1383                           ;LCD_8bits.c: 160:             break;
  1384                           
  1385                           
  1386                           ;LCD_8bits.c: 162:             numChr = 69;
  1387  04B1  3045               	movlw	69
  1388  04B2  2CB6               	goto	L17
  1389  04B3                     l1565:	
  1390                           ;LCD_8bits.c: 163:             break;
  1391                           
  1392                           
  1393                           ;LCD_8bits.c: 165:             numChr = 70;
  1394  04B3  3046               	movlw	70
  1395  04B4  2CB6               	goto	L17
  1396  04B5                     l1567:	
  1397                           ;LCD_8bits.c: 166:             break;
  1398                           
  1399                           
  1400                           ;LCD_8bits.c: 168:             numChr = 214;
  1401  04B5  30D6               	movlw	214
  1402  04B6                     L17:	
  1403  04B6  00F0               	movwf	??_uint_to_char
  1404  04B7  0870               	movf	??_uint_to_char,w
  1405  04B8  00F3               	movwf	uint_to_char@numChr
  1406                           
  1407                           ;LCD_8bits.c: 169:     }
  1408  04B9  2CF4               	goto	l1571
  1409  04BA                     l1569:	
  1410  04BA  0872               	movf	uint_to_char@numero,w
  1411  04BB  00F0               	movwf	??_uint_to_char
  1412  04BC  01F1               	clrf	??_uint_to_char+1
  1413                           
  1414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1415                           ; Switch size 1, requested type "simple"
  1416                           ; Number of cases is 1, Range of values is 0 to 0
  1417                           ; switch strategies available:
  1418                           ; Name         Instructions Cycles
  1419                           ; simple_byte            4     3 (average)
  1420                           ; direct_byte           11     8 (fixed)
  1421                           ; jumptable            260     6 (fixed)
  1422                           ;	Chosen strategy is simple_byte
  1423  04BD  0871               	movf	??_uint_to_char+1,w
  1424  04BE  3A00               	xorlw	0	; case 0
  1425  04BF  1903               	skipnz
  1426  04C0  2CC2               	goto	l1873
  1427  04C1  2CB5               	goto	l1567
  1428  04C2                     l1873:	
  1429                           
  1430                           ; Switch size 1, requested type "simple"
  1431                           ; Number of cases is 16, Range of values is 0 to 15
  1432                           ; switch strategies available:
  1433                           ; Name         Instructions Cycles
  1434                           ; simple_byte           49    25 (average)
  1435                           ; direct_byte           56     8 (fixed)
  1436                           ; jumptable            260     6 (fixed)
  1437                           ;	Chosen strategy is simple_byte
  1438  04C2  0870               	movf	??_uint_to_char,w
  1439  04C3  3A00               	xorlw	0	; case 0
  1440  04C4  1903               	skipnz
  1441  04C5  2C95               	goto	l1535
  1442  04C6  3A01               	xorlw	1	; case 1
  1443  04C7  1903               	skipnz
  1444  04C8  2C97               	goto	l1537
  1445  04C9  3A03               	xorlw	3	; case 2
  1446  04CA  1903               	skipnz
  1447  04CB  2C99               	goto	l1539
  1448  04CC  3A01               	xorlw	1	; case 3
  1449  04CD  1903               	skipnz
  1450  04CE  2C9B               	goto	l1541
  1451  04CF  3A07               	xorlw	7	; case 4
  1452  04D0  1903               	skipnz
  1453  04D1  2C9D               	goto	l1543
  1454  04D2  3A01               	xorlw	1	; case 5
  1455  04D3  1903               	skipnz
  1456  04D4  2C9F               	goto	l1545
  1457  04D5  3A03               	xorlw	3	; case 6
  1458  04D6  1903               	skipnz
  1459  04D7  2CA1               	goto	l1547
  1460  04D8  3A01               	xorlw	1	; case 7
  1461  04D9  1903               	skipnz
  1462  04DA  2CA3               	goto	l1549
  1463  04DB  3A0F               	xorlw	15	; case 8
  1464  04DC  1903               	skipnz
  1465  04DD  2CA5               	goto	l1551
  1466  04DE  3A01               	xorlw	1	; case 9
  1467  04DF  1903               	skipnz
  1468  04E0  2CA7               	goto	l1553
  1469  04E1  3A03               	xorlw	3	; case 10
  1470  04E2  1903               	skipnz
  1471  04E3  2CA9               	goto	l1555
  1472  04E4  3A01               	xorlw	1	; case 11
  1473  04E5  1903               	skipnz
  1474  04E6  2CAB               	goto	l1557
  1475  04E7  3A07               	xorlw	7	; case 12
  1476  04E8  1903               	skipnz
  1477  04E9  2CAD               	goto	l1559
  1478  04EA  3A01               	xorlw	1	; case 13
  1479  04EB  1903               	skipnz
  1480  04EC  2CAF               	goto	l1561
  1481  04ED  3A03               	xorlw	3	; case 14
  1482  04EE  1903               	skipnz
  1483  04EF  2CB1               	goto	l1563
  1484  04F0  3A01               	xorlw	1	; case 15
  1485  04F1  1903               	skipnz
  1486  04F2  2CB3               	goto	l1565
  1487  04F3  2CB5               	goto	l1567
  1488  04F4                     l1571:	
  1489                           
  1490                           ;LCD_8bits.c: 170:     return(numChr);
  1491  04F4  0873               	movf	uint_to_char@numChr,w
  1492  04F5  0008               	return
  1493  04F6                     __end_of_uint_to_char:	
  1494                           
  1495                           	psect	text2
  1496  055D                     __ptext2:	
  1497 ;; *************** function _uint_to_array *****************
  1498 ;; Defined at:
  1499 ;;		line 173 in file "LCD_8bits.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  numero          1    wreg     unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  numero          1   18[BANK0 ] unsigned char 
  1504 ;;  resultado       6   11[BANK0 ] unsigned int [3]
  1505 ;;  centenas        1   17[BANK0 ] unsigned char 
  1506 ;;  decenas         1   10[BANK0 ] unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      PTR unsigned int 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1516 ;;      Params:         0       0       0       0       0
  1517 ;;      Locals:         0       9       0       0       0
  1518 ;;      Temps:          0       6       0       0       0
  1519 ;;      Totals:         0      15       0       0       0
  1520 ;;Total ram usage:       15 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    1
  1523 ;; This function calls:
  1524 ;;		___awdiv
  1525 ;;		___wmul
  1526 ;; This function is called by:
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _uint_to_array
  1533  055D                     _uint_to_array:	
  1534                           
  1535                           ;incstack = 0
  1536                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1537                           ;uint_to_array@numero stored from wreg
  1538  055D  1283               	bcf	3,5	;RP0=0, select bank0
  1539  055E  1303               	bcf	3,6	;RP1=0, select bank0
  1540  055F  00B2               	movwf	uint_to_array@numero
  1541                           
  1542                           ;LCD_8bits.c: 174:     uint16_t resultado[3] = {0,0,0};
  1543  0560  302B               	movlw	uint_to_array@resultado& (0+255)
  1544  0561  0084               	movwf	4
  1545  0562  3006               	movlw	6
  1546  0563  00FF               	movwf	127
  1547  0564                     u600:	
  1548  0564  1383               	bcf	3,7	;select IRP bank0
  1549  0565  0180               	clrf	0
  1550  0566  0A84               	incf	4,f
  1551  0567  0BFF               	decfsz	127,f
  1552  0568  2D64               	goto	u600
  1553                           
  1554                           ;LCD_8bits.c: 175:     resultado[0] = numero/100;
  1555  0569  3064               	movlw	100
  1556  056A  00F6               	movwf	___awdiv@divisor
  1557  056B  3000               	movlw	0
  1558  056C  00F7               	movwf	___awdiv@divisor+1
  1559  056D  0832               	movf	uint_to_array@numero,w
  1560  056E  00A4               	movwf	??_uint_to_array
  1561  056F  01A5               	clrf	??_uint_to_array+1
  1562  0570  0824               	movf	??_uint_to_array,w
  1563  0571  00F8               	movwf	___awdiv@dividend
  1564  0572  0825               	movf	??_uint_to_array+1,w
  1565  0573  00F9               	movwf	___awdiv@dividend+1
  1566  0574  120A  118A  23DA  120A  118A  	fcall	___awdiv
  1567  0579  0877               	movf	?___awdiv+1,w
  1568  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1569  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1570  057C  00AC               	movwf	uint_to_array@resultado+1
  1571  057D  0876               	movf	?___awdiv,w
  1572  057E  00AB               	movwf	uint_to_array@resultado
  1573                           
  1574                           ;LCD_8bits.c: 176:     uint8_t centenas = resultado[0];
  1575  057F  082B               	movf	uint_to_array@resultado,w
  1576  0580  00A4               	movwf	??_uint_to_array
  1577  0581  0824               	movf	??_uint_to_array,w
  1578  0582  00B1               	movwf	uint_to_array@centenas
  1579                           
  1580                           ;LCD_8bits.c: 177:     resultado[1] = (numero - (centenas *100))/10;
  1581  0583  300A               	movlw	10
  1582  0584  00F6               	movwf	___awdiv@divisor
  1583  0585  3000               	movlw	0
  1584  0586  00F7               	movwf	___awdiv@divisor+1
  1585  0587  0831               	movf	uint_to_array@centenas,w
  1586  0588  00A4               	movwf	??_uint_to_array
  1587  0589  01A5               	clrf	??_uint_to_array+1
  1588  058A  0824               	movf	??_uint_to_array,w
  1589  058B  00F0               	movwf	___wmul@multiplier
  1590  058C  0825               	movf	??_uint_to_array+1,w
  1591  058D  00F1               	movwf	___wmul@multiplier+1
  1592  058E  309C               	movlw	156
  1593  058F  00F2               	movwf	___wmul@multiplicand
  1594  0590  30FF               	movlw	255
  1595  0591  00F3               	movwf	___wmul@multiplicand+1
  1596  0592  120A  118A  2297  120A  118A  	fcall	___wmul
  1597  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1598  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1599  0599  0832               	movf	uint_to_array@numero,w
  1600  059A  0770               	addwf	?___wmul,w
  1601  059B  00F8               	movwf	___awdiv@dividend
  1602  059C  0871               	movf	?___wmul+1,w
  1603  059D  1803               	skipnc
  1604  059E  0A71               	incf	?___wmul+1,w
  1605  059F  00F9               	movwf	___awdiv@dividend+1
  1606  05A0  120A  118A  23DA  120A  118A  	fcall	___awdiv
  1607  05A5  0877               	movf	?___awdiv+1,w
  1608  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1609  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1610  05A8  00AE               	movwf	uint_to_array@resultado+3
  1611  05A9  0876               	movf	?___awdiv,w
  1612  05AA  00AD               	movwf	uint_to_array@resultado+2
  1613                           
  1614                           ;LCD_8bits.c: 178:     uint8_t decenas = resultado[1];
  1615  05AB  082D               	movf	uint_to_array@resultado+2,w
  1616  05AC  00A4               	movwf	??_uint_to_array
  1617  05AD  0824               	movf	??_uint_to_array,w
  1618  05AE  00AA               	movwf	uint_to_array@decenas
  1619                           
  1620                           ;LCD_8bits.c: 179:     resultado[2] = numero -(centenas*100+decenas*10);
  1621  05AF  0831               	movf	uint_to_array@centenas,w
  1622  05B0  00A4               	movwf	??_uint_to_array
  1623  05B1  01A5               	clrf	??_uint_to_array+1
  1624  05B2  0824               	movf	??_uint_to_array,w
  1625  05B3  00F0               	movwf	___wmul@multiplier
  1626  05B4  0825               	movf	??_uint_to_array+1,w
  1627  05B5  00F1               	movwf	___wmul@multiplier+1
  1628  05B6  309C               	movlw	156
  1629  05B7  00F2               	movwf	___wmul@multiplicand
  1630  05B8  30FF               	movlw	255
  1631  05B9  00F3               	movwf	___wmul@multiplicand+1
  1632  05BA  120A  118A  2297  120A  118A  	fcall	___wmul
  1633  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1634  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1635  05C1  0832               	movf	uint_to_array@numero,w
  1636  05C2  0770               	addwf	?___wmul,w
  1637  05C3  00A6               	movwf	??_uint_to_array+2
  1638  05C4  0871               	movf	?___wmul+1,w
  1639  05C5  1803               	skipnc
  1640  05C6  0A71               	incf	?___wmul+1,w
  1641  05C7  00A7               	movwf	??_uint_to_array+3
  1642  05C8  082A               	movf	uint_to_array@decenas,w
  1643  05C9  00A8               	movwf	??_uint_to_array+4
  1644  05CA  01A9               	clrf	??_uint_to_array+5
  1645  05CB  0828               	movf	??_uint_to_array+4,w
  1646  05CC  00F0               	movwf	___wmul@multiplier
  1647  05CD  0829               	movf	??_uint_to_array+5,w
  1648  05CE  00F1               	movwf	___wmul@multiplier+1
  1649  05CF  30F6               	movlw	246
  1650  05D0  00F2               	movwf	___wmul@multiplicand
  1651  05D1  30FF               	movlw	255
  1652  05D2  00F3               	movwf	___wmul@multiplicand+1
  1653  05D3  120A  118A  2297   	fcall	___wmul
  1654  05D6  0870               	movf	?___wmul,w
  1655  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1656  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1657  05D9  0726               	addwf	??_uint_to_array+2,w
  1658  05DA  00AF               	movwf	uint_to_array@resultado+4
  1659  05DB  0871               	movf	?___wmul+1,w
  1660  05DC  1803               	skipnc
  1661  05DD  0A71               	incf	?___wmul+1,w
  1662  05DE  0727               	addwf	??_uint_to_array+3,w
  1663  05DF  00B0               	movwf	uint_to_array@resultado+5
  1664                           
  1665                           ;LCD_8bits.c: 180:     return(resultado);
  1666  05E0  302B               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  1667  05E1  0008               	return
  1668  05E2                     __end_of_uint_to_array:	
  1669                           
  1670                           	psect	text3
  1671  03DA                     __ptext3:	
  1672 ;; *************** function ___awdiv *****************
  1673 ;; Defined at:
  1674 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  divisor         2    6[COMMON] int 
  1677 ;;  dividend        2    8[COMMON] int 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  quotient        2    2[BANK0 ] int 
  1680 ;;  sign            1    1[BANK0 ] unsigned char 
  1681 ;;  counter         1    0[BANK0 ] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  2    6[COMMON] int 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         4       0       0       0       0
  1692 ;;      Locals:         0       4       0       0       0
  1693 ;;      Temps:          1       0       0       0       0
  1694 ;;      Totals:         5       4       0       0       0
  1695 ;;Total ram usage:        9 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_uint_to_array
  1701 ;;		_display_Uhrzeit
  1702 ;;		_DEC_a_BCD
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           
  1707                           ;psect for function ___awdiv
  1708  03DA                     ___awdiv:	
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1712  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1713  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1714  03DC  01A1               	clrf	___awdiv@sign
  1715  03DD  1FF7               	btfss	___awdiv@divisor+1,7
  1716  03DE  2BE6               	goto	l1443
  1717  03DF  09F6               	comf	___awdiv@divisor,f
  1718  03E0  09F7               	comf	___awdiv@divisor+1,f
  1719  03E1  0AF6               	incf	___awdiv@divisor,f
  1720  03E2  1903               	skipnz
  1721  03E3  0AF7               	incf	___awdiv@divisor+1,f
  1722  03E4  01A1               	clrf	___awdiv@sign
  1723  03E5  0AA1               	incf	___awdiv@sign,f
  1724  03E6                     l1443:	
  1725  03E6  1FF9               	btfss	___awdiv@dividend+1,7
  1726  03E7  2BF1               	goto	l1449
  1727  03E8  09F8               	comf	___awdiv@dividend,f
  1728  03E9  09F9               	comf	___awdiv@dividend+1,f
  1729  03EA  0AF8               	incf	___awdiv@dividend,f
  1730  03EB  1903               	skipnz
  1731  03EC  0AF9               	incf	___awdiv@dividend+1,f
  1732  03ED  3001               	movlw	1
  1733  03EE  00FA               	movwf	??___awdiv
  1734  03EF  087A               	movf	??___awdiv,w
  1735  03F0  06A1               	xorwf	___awdiv@sign,f
  1736  03F1                     l1449:	
  1737  03F1  01A2               	clrf	___awdiv@quotient
  1738  03F2  01A3               	clrf	___awdiv@quotient+1
  1739  03F3  0876               	movf	___awdiv@divisor,w
  1740  03F4  0477               	iorwf	___awdiv@divisor+1,w
  1741  03F5  1903               	btfsc	3,2
  1742  03F6  2C28               	goto	l1471
  1743  03F7  01A0               	clrf	___awdiv@counter
  1744  03F8  0AA0               	incf	___awdiv@counter,f
  1745  03F9                     l1459:	
  1746  03F9  1BF7               	btfsc	___awdiv@divisor+1,7
  1747  03FA  2C07               	goto	l1461
  1748  03FB  3001               	movlw	1
  1749  03FC                     u525:	
  1750  03FC  1003               	clrc
  1751  03FD  0DF6               	rlf	___awdiv@divisor,f
  1752  03FE  0DF7               	rlf	___awdiv@divisor+1,f
  1753  03FF  3EFF               	addlw	-1
  1754  0400  1D03               	skipz
  1755  0401  2BFC               	goto	u525
  1756  0402  3001               	movlw	1
  1757  0403  00FA               	movwf	??___awdiv
  1758  0404  087A               	movf	??___awdiv,w
  1759  0405  07A0               	addwf	___awdiv@counter,f
  1760  0406  2BF9               	goto	l1459
  1761  0407                     l1461:	
  1762  0407  3001               	movlw	1
  1763  0408                     u545:	
  1764  0408  1003               	clrc
  1765  0409  0DA2               	rlf	___awdiv@quotient,f
  1766  040A  0DA3               	rlf	___awdiv@quotient+1,f
  1767  040B  3EFF               	addlw	-1
  1768  040C  1D03               	skipz
  1769  040D  2C08               	goto	u545
  1770  040E  0877               	movf	___awdiv@divisor+1,w
  1771  040F  0279               	subwf	___awdiv@dividend+1,w
  1772  0410  1D03               	skipz
  1773  0411  2C14               	goto	u555
  1774  0412  0876               	movf	___awdiv@divisor,w
  1775  0413  0278               	subwf	___awdiv@dividend,w
  1776  0414                     u555:	
  1777  0414  1C03               	skipc
  1778  0415  2C1D               	goto	l1467
  1779  0416  0876               	movf	___awdiv@divisor,w
  1780  0417  02F8               	subwf	___awdiv@dividend,f
  1781  0418  0877               	movf	___awdiv@divisor+1,w
  1782  0419  1C03               	skipc
  1783  041A  03F9               	decf	___awdiv@dividend+1,f
  1784  041B  02F9               	subwf	___awdiv@dividend+1,f
  1785  041C  1422               	bsf	___awdiv@quotient,0
  1786  041D                     l1467:	
  1787  041D  3001               	movlw	1
  1788  041E                     u565:	
  1789  041E  1003               	clrc
  1790  041F  0CF7               	rrf	___awdiv@divisor+1,f
  1791  0420  0CF6               	rrf	___awdiv@divisor,f
  1792  0421  3EFF               	addlw	-1
  1793  0422  1D03               	skipz
  1794  0423  2C1E               	goto	u565
  1795  0424  3001               	movlw	1
  1796  0425  02A0               	subwf	___awdiv@counter,f
  1797  0426  1D03               	btfss	3,2
  1798  0427  2C07               	goto	l1461
  1799  0428                     l1471:	
  1800  0428  0821               	movf	___awdiv@sign,w
  1801  0429  1903               	btfsc	3,2
  1802  042A  2C30               	goto	l1475
  1803  042B  09A2               	comf	___awdiv@quotient,f
  1804  042C  09A3               	comf	___awdiv@quotient+1,f
  1805  042D  0AA2               	incf	___awdiv@quotient,f
  1806  042E  1903               	skipnz
  1807  042F  0AA3               	incf	___awdiv@quotient+1,f
  1808  0430                     l1475:	
  1809  0430  0823               	movf	___awdiv@quotient+1,w
  1810  0431  00F7               	movwf	?___awdiv+1
  1811  0432  0822               	movf	___awdiv@quotient,w
  1812  0433  00F6               	movwf	?___awdiv
  1813  0434  0008               	return
  1814  0435                     __end_of___awdiv:	
  1815                           
  1816                           	psect	text4
  1817  05E2                     __ptext4:	
  1818 ;; *************** function _mapear *****************
  1819 ;; Defined at:
  1820 ;;		line 112 in file "Master_main.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  valor           1    wreg     unsigned char 
  1823 ;;  limReal         1    6[COMMON] unsigned char 
  1824 ;;  limSup          1    7[COMMON] unsigned char 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  valor           1    0[BANK0 ] unsigned char 
  1827 ;;  resultado       6    1[BANK0 ] unsigned int [3]
  1828 ;;  dividendo       2    7[BANK0 ] unsigned int 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      PTR unsigned int 
  1831 ;; Registers used:
  1832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1838 ;;      Params:         2       0       0       0       0
  1839 ;;      Locals:         0       9       0       0       0
  1840 ;;      Temps:          4       0       0       0       0
  1841 ;;      Totals:         6       9       0       0       0
  1842 ;;Total ram usage:       15 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    1
  1845 ;; This function calls:
  1846 ;;		___wmul
  1847 ;; This function is called by:
  1848 ;;		_main
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           
  1853                           ;psect for function _mapear
  1854  05E2                     _mapear:	
  1855                           
  1856                           ;incstack = 0
  1857                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1858                           ;mapear@valor stored from wreg
  1859  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1860  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  1861  05E4  00A0               	movwf	mapear@valor
  1862                           
  1863                           ;Master_main.c: 113:     uint16_t resultado[3] = {0,0,0};
  1864  05E5  3021               	movlw	mapear@resultado& (0+255)
  1865  05E6  0084               	movwf	4
  1866  05E7  3006               	movlw	6
  1867  05E8  00FF               	movwf	127
  1868  05E9                     u620:	
  1869  05E9  1383               	bcf	3,7	;select IRP bank0
  1870  05EA  0180               	clrf	0
  1871  05EB  0A84               	incf	4,f
  1872  05EC  0BFF               	decfsz	127,f
  1873  05ED  2DE9               	goto	u620
  1874                           
  1875                           ;Master_main.c: 114:     uint16_t dividendo = valor*limSup;
  1876  05EE  0820               	movf	mapear@valor,w
  1877  05EF  00F8               	movwf	??_mapear
  1878  05F0  01F9               	clrf	??_mapear+1
  1879  05F1  0878               	movf	??_mapear,w
  1880  05F2  00F0               	movwf	___wmul@multiplier
  1881  05F3  0879               	movf	??_mapear+1,w
  1882  05F4  00F1               	movwf	___wmul@multiplier+1
  1883  05F5  0877               	movf	mapear@limSup,w
  1884  05F6  00FA               	movwf	??_mapear+2
  1885  05F7  01FB               	clrf	??_mapear+3
  1886  05F8  087A               	movf	??_mapear+2,w
  1887  05F9  00F2               	movwf	___wmul@multiplicand
  1888  05FA  087B               	movf	??_mapear+3,w
  1889  05FB  00F3               	movwf	___wmul@multiplicand+1
  1890  05FC  120A  118A  2297  120A  118A  	fcall	___wmul
  1891  0601  0871               	movf	?___wmul+1,w
  1892  0602  1283               	bcf	3,5	;RP0=0, select bank0
  1893  0603  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0604  00A8               	movwf	mapear@dividendo+1
  1895  0605  0870               	movf	?___wmul,w
  1896  0606  00A7               	movwf	mapear@dividendo
  1897  0607                     l1619:	
  1898                           ;Master_main.c: 115:     while (limReal <= dividendo){
  1899                           
  1900                           
  1901                           ;Master_main.c: 115:     while (limReal <= dividendo){
  1902  0607  0876               	movf	mapear@limReal,w
  1903  0608  00F8               	movwf	??_mapear
  1904  0609  01F9               	clrf	??_mapear+1
  1905  060A  0879               	movf	??_mapear+1,w
  1906  060B  0228               	subwf	mapear@dividendo+1,w
  1907  060C  1D03               	skipz
  1908  060D  2E10               	goto	u635
  1909  060E  0878               	movf	??_mapear,w
  1910  060F  0227               	subwf	mapear@dividendo,w
  1911  0610                     u635:	
  1912  0610  1C03               	btfss	3,0
  1913  0611  2E22               	goto	l1621
  1914                           
  1915                           ;Master_main.c: 116:         resultado[0] = resultado[0] + 1;
  1916  0612  0821               	movf	mapear@resultado,w
  1917  0613  3E01               	addlw	1
  1918  0614  00A1               	movwf	mapear@resultado
  1919  0615  0822               	movf	mapear@resultado+1,w
  1920  0616  1803               	skipnc
  1921  0617  3E01               	addlw	1
  1922  0618  3E00               	addlw	0
  1923  0619  00A2               	movwf	mapear@resultado+1
  1924                           
  1925                           ;Master_main.c: 117:         dividendo = dividendo - limReal;
  1926  061A  0876               	movf	mapear@limReal,w
  1927  061B  0227               	subwf	mapear@dividendo,w
  1928  061C  00A7               	movwf	mapear@dividendo
  1929  061D  0828               	movf	mapear@dividendo+1,w
  1930  061E  1C03               	skipc
  1931  061F  0328               	decf	mapear@dividendo+1,w
  1932  0620  00A8               	movwf	mapear@dividendo+1
  1933  0621  2E07               	goto	l1619
  1934  0622                     l1621:	
  1935                           
  1936                           ;Master_main.c: 119:     dividendo = dividendo *10;
  1937  0622  0828               	movf	mapear@dividendo+1,w
  1938  0623  00F1               	movwf	___wmul@multiplier+1
  1939  0624  0827               	movf	mapear@dividendo,w
  1940  0625  00F0               	movwf	___wmul@multiplier
  1941  0626  300A               	movlw	10
  1942  0627  00F2               	movwf	___wmul@multiplicand
  1943  0628  3000               	movlw	0
  1944  0629  00F3               	movwf	___wmul@multiplicand+1
  1945  062A  120A  118A  2297  120A  118A  	fcall	___wmul
  1946  062F  0871               	movf	?___wmul+1,w
  1947  0630  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0631  1303               	bcf	3,6	;RP1=0, select bank0
  1949  0632  00A8               	movwf	mapear@dividendo+1
  1950  0633  0870               	movf	?___wmul,w
  1951  0634  00A7               	movwf	mapear@dividendo
  1952  0635                     l1625:	
  1953                           ;Master_main.c: 120:     while (limReal <= dividendo){
  1954                           
  1955                           
  1956                           ;Master_main.c: 120:     while (limReal <= dividendo){
  1957  0635  0876               	movf	mapear@limReal,w
  1958  0636  00F8               	movwf	??_mapear
  1959  0637  01F9               	clrf	??_mapear+1
  1960  0638  0879               	movf	??_mapear+1,w
  1961  0639  0228               	subwf	mapear@dividendo+1,w
  1962  063A  1D03               	skipz
  1963  063B  2E3E               	goto	u645
  1964  063C  0878               	movf	??_mapear,w
  1965  063D  0227               	subwf	mapear@dividendo,w
  1966  063E                     u645:	
  1967  063E  1C03               	btfss	3,0
  1968  063F  2E50               	goto	l1627
  1969                           
  1970                           ;Master_main.c: 121:         resultado[1] = resultado[1] +1;
  1971  0640  0823               	movf	mapear@resultado+2,w
  1972  0641  3E01               	addlw	1
  1973  0642  00A3               	movwf	mapear@resultado+2
  1974  0643  0824               	movf	mapear@resultado+3,w
  1975  0644  1803               	skipnc
  1976  0645  3E01               	addlw	1
  1977  0646  3E00               	addlw	0
  1978  0647  00A4               	movwf	mapear@resultado+3
  1979                           
  1980                           ;Master_main.c: 122:         dividendo = dividendo - limReal;
  1981  0648  0876               	movf	mapear@limReal,w
  1982  0649  0227               	subwf	mapear@dividendo,w
  1983  064A  00A7               	movwf	mapear@dividendo
  1984  064B  0828               	movf	mapear@dividendo+1,w
  1985  064C  1C03               	skipc
  1986  064D  0328               	decf	mapear@dividendo+1,w
  1987  064E  00A8               	movwf	mapear@dividendo+1
  1988  064F  2E35               	goto	l1625
  1989  0650                     l1627:	
  1990                           
  1991                           ;Master_main.c: 124:     dividendo = dividendo *10;
  1992  0650  0828               	movf	mapear@dividendo+1,w
  1993  0651  00F1               	movwf	___wmul@multiplier+1
  1994  0652  0827               	movf	mapear@dividendo,w
  1995  0653  00F0               	movwf	___wmul@multiplier
  1996  0654  300A               	movlw	10
  1997  0655  00F2               	movwf	___wmul@multiplicand
  1998  0656  3000               	movlw	0
  1999  0657  00F3               	movwf	___wmul@multiplicand+1
  2000  0658  120A  118A  2297  120A  118A  	fcall	___wmul
  2001  065D  0871               	movf	?___wmul+1,w
  2002  065E  1283               	bcf	3,5	;RP0=0, select bank0
  2003  065F  1303               	bcf	3,6	;RP1=0, select bank0
  2004  0660  00A8               	movwf	mapear@dividendo+1
  2005  0661  0870               	movf	?___wmul,w
  2006  0662  00A7               	movwf	mapear@dividendo
  2007  0663                     l1631:	
  2008                           ;Master_main.c: 125:     while (limReal <= dividendo){
  2009                           
  2010                           
  2011                           ;Master_main.c: 125:     while (limReal <= dividendo){
  2012  0663  0876               	movf	mapear@limReal,w
  2013  0664  00F8               	movwf	??_mapear
  2014  0665  01F9               	clrf	??_mapear+1
  2015  0666  0879               	movf	??_mapear+1,w
  2016  0667  0228               	subwf	mapear@dividendo+1,w
  2017  0668  1D03               	skipz
  2018  0669  2E6C               	goto	u655
  2019  066A  0878               	movf	??_mapear,w
  2020  066B  0227               	subwf	mapear@dividendo,w
  2021  066C                     u655:	
  2022  066C  1C03               	btfss	3,0
  2023  066D  2E7E               	goto	l1633
  2024                           
  2025                           ;Master_main.c: 126:         resultado[2] = resultado[2] +1;
  2026  066E  0825               	movf	mapear@resultado+4,w
  2027  066F  3E01               	addlw	1
  2028  0670  00A5               	movwf	mapear@resultado+4
  2029  0671  0826               	movf	mapear@resultado+5,w
  2030  0672  1803               	skipnc
  2031  0673  3E01               	addlw	1
  2032  0674  3E00               	addlw	0
  2033  0675  00A6               	movwf	mapear@resultado+5
  2034                           
  2035                           ;Master_main.c: 127:         dividendo = dividendo - limReal;
  2036  0676  0876               	movf	mapear@limReal,w
  2037  0677  0227               	subwf	mapear@dividendo,w
  2038  0678  00A7               	movwf	mapear@dividendo
  2039  0679  0828               	movf	mapear@dividendo+1,w
  2040  067A  1C03               	skipc
  2041  067B  0328               	decf	mapear@dividendo+1,w
  2042  067C  00A8               	movwf	mapear@dividendo+1
  2043  067D  2E63               	goto	l1631
  2044  067E                     l1633:	
  2045                           
  2046                           ;Master_main.c: 130:     return(resultado);
  2047  067E  3021               	movlw	(low (mapear@resultado| 0))& (0+255)
  2048  067F  0008               	return
  2049  0680                     __end_of_mapear:	
  2050                           
  2051                           	psect	text5
  2052  0297                     __ptext5:	
  2053 ;; *************** function ___wmul *****************
  2054 ;; Defined at:
  2055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  multiplier      2    0[COMMON] unsigned int 
  2058 ;;  multiplicand    2    2[COMMON] unsigned int 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  product         2    4[COMMON] unsigned int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  2    0[COMMON] unsigned int 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2070 ;;      Params:         4       0       0       0       0
  2071 ;;      Locals:         2       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0
  2073 ;;      Totals:         6       0       0       0       0
  2074 ;;Total ram usage:        6 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_uint_to_array
  2080 ;;		_mapear
  2081 ;;		_BCD_a_DEC
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           
  2086                           ;psect for function ___wmul
  2087  0297                     ___wmul:	
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2091  0297  01F4               	clrf	___wmul@product
  2092  0298  01F5               	clrf	___wmul@product+1
  2093  0299                     l1399:	
  2094  0299  1C70               	btfss	___wmul@multiplier,0
  2095  029A  2AA1               	goto	l343
  2096  029B  0872               	movf	___wmul@multiplicand,w
  2097  029C  07F4               	addwf	___wmul@product,f
  2098  029D  1803               	skipnc
  2099  029E  0AF5               	incf	___wmul@product+1,f
  2100  029F  0873               	movf	___wmul@multiplicand+1,w
  2101  02A0  07F5               	addwf	___wmul@product+1,f
  2102  02A1                     l343:	
  2103  02A1  3001               	movlw	1
  2104  02A2                     u395:	
  2105  02A2  1003               	clrc
  2106  02A3  0DF2               	rlf	___wmul@multiplicand,f
  2107  02A4  0DF3               	rlf	___wmul@multiplicand+1,f
  2108  02A5  3EFF               	addlw	-1
  2109  02A6  1D03               	skipz
  2110  02A7  2AA2               	goto	u395
  2111  02A8  3001               	movlw	1
  2112  02A9                     u405:	
  2113  02A9  1003               	clrc
  2114  02AA  0CF1               	rrf	___wmul@multiplier+1,f
  2115  02AB  0CF0               	rrf	___wmul@multiplier,f
  2116  02AC  3EFF               	addlw	-1
  2117  02AD  1D03               	skipz
  2118  02AE  2AA9               	goto	u405
  2119  02AF  0870               	movf	___wmul@multiplier,w
  2120  02B0  0471               	iorwf	___wmul@multiplier+1,w
  2121  02B1  1D03               	btfss	3,2
  2122  02B2  2A99               	goto	l1399
  2123  02B3  0875               	movf	___wmul@product+1,w
  2124  02B4  00F1               	movwf	?___wmul+1
  2125  02B5  0874               	movf	___wmul@product,w
  2126  02B6  00F0               	movwf	?___wmul
  2127  02B7  0008               	return
  2128  02B8                     __end_of___wmul:	
  2129                           
  2130                           	psect	text6
  2131  0397                     __ptext6:	
  2132 ;; *************** function _get_Temp *****************
  2133 ;; Defined at:
  2134 ;;		line 73 in file "RTC.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  TempMSB         1    8[COMMON] unsigned char 
  2139 ;;  Temp_LSB        1    0        unsigned char 
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      unsigned char 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, pclath, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2149 ;;      Params:         0       0       0       0       0
  2150 ;;      Locals:         2       0       0       0       0
  2151 ;;      Temps:          1       0       0       0       0
  2152 ;;      Totals:         3       0       0       0       0
  2153 ;;Total ram usage:        3 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    2
  2156 ;; This function calls:
  2157 ;;		_I2C_Master_Read
  2158 ;;		_I2C_Master_Start
  2159 ;;		_I2C_Master_Stop
  2160 ;;		_I2C_Master_Write
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _get_Temp
  2168  0397                     _get_Temp:	
  2169                           
  2170                           ;RTC.c: 74:     I2C_Master_Start();
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _get_Temp: [wreg+status,2+status,0+pclath+cstack]
  2174  0397  120A  118A  2232  120A  118A  	fcall	_I2C_Master_Start
  2175                           
  2176                           ;RTC.c: 75:     I2C_Master_Write(0xD0);
  2177  039C  30D0               	movlw	208
  2178  039D  00F0               	movwf	I2C_Master_Write@d
  2179  039E  3000               	movlw	0
  2180  039F  00F1               	movwf	I2C_Master_Write@d+1
  2181  03A0  120A  118A  2240  120A  118A  	fcall	_I2C_Master_Write
  2182                           
  2183                           ;RTC.c: 76:     I2C_Master_Write(0x11);
  2184  03A5  3011               	movlw	17
  2185  03A6  00F0               	movwf	I2C_Master_Write@d
  2186  03A7  3000               	movlw	0
  2187  03A8  00F1               	movwf	I2C_Master_Write@d+1
  2188  03A9  120A  118A  2240  120A  118A  	fcall	_I2C_Master_Write
  2189                           
  2190                           ;RTC.c: 77:     I2C_Master_Stop();
  2191  03AE  120A  118A  2239  120A  118A  	fcall	_I2C_Master_Stop
  2192                           
  2193                           ;RTC.c: 79:     I2C_Master_Start();
  2194  03B3  120A  118A  2232  120A  118A  	fcall	_I2C_Master_Start
  2195                           
  2196                           ;RTC.c: 80:     I2C_Master_Write(0xD1);
  2197  03B8  30D1               	movlw	209
  2198  03B9  00F0               	movwf	I2C_Master_Write@d
  2199  03BA  3000               	movlw	0
  2200  03BB  00F1               	movwf	I2C_Master_Write@d+1
  2201  03BC  120A  118A  2240  120A  118A  	fcall	_I2C_Master_Write
  2202                           
  2203                           ;RTC.c: 81:     uint8_t TempMSB = I2C_Master_Read(0);
  2204  03C1  3000               	movlw	0
  2205  03C2  00F0               	movwf	I2C_Master_Read@a
  2206  03C3  00F1               	movwf	I2C_Master_Read@a+1
  2207  03C4  120A  118A  2306  120A  118A  	fcall	_I2C_Master_Read
  2208  03C9  0870               	movf	?_I2C_Master_Read,w
  2209  03CA  00F6               	movwf	??_get_Temp
  2210  03CB  0876               	movf	??_get_Temp,w
  2211  03CC  00F8               	movwf	get_Temp@TempMSB
  2212  03CD  3000               	movlw	0
  2213  03CE  00F0               	movwf	I2C_Master_Read@a
  2214  03CF  00F1               	movwf	I2C_Master_Read@a+1
  2215  03D0  120A  118A  2306  120A  118A  	fcall	_I2C_Master_Read
  2216                           
  2217                           ;RTC.c: 83:     I2C_Master_Stop();
  2218  03D5  120A  118A  2239   	fcall	_I2C_Master_Stop
  2219                           
  2220                           ;RTC.c: 85:     return TempMSB;
  2221  03D8  0878               	movf	get_Temp@TempMSB,w
  2222  03D9  0008               	return
  2223  03DA                     __end_of_get_Temp:	
  2224                           
  2225                           	psect	text7
  2226  0240                     __ptext7:	
  2227 ;; *************** function _I2C_Master_Write *****************
  2228 ;; Defined at:
  2229 ;;		line 65 in file "I2C.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  d               2    0[COMMON] unsigned int 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0, pclath, cstack
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         2       0       0       0       0
  2244 ;;      Locals:         0       0       0       0       0
  2245 ;;      Temps:          0       0       0       0       0
  2246 ;;      Totals:         2       0       0       0       0
  2247 ;;Total ram usage:        2 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    1
  2250 ;; This function calls:
  2251 ;;		_I2C_Master_Wait
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;;		_get_Temp
  2255 ;;		_Zeit_Datum_Set
  2256 ;;		_get_Time
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _I2C_Master_Write
  2262  0240                     _I2C_Master_Write:	
  2263                           
  2264                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  2265                           
  2266                           ;incstack = 0
  2267                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  2268  0240  120A  118A  2258   	fcall	_I2C_Master_Wait
  2269                           
  2270                           ;I2C.c: 68:     SSPBUF = d;
  2271  0243  0870               	movf	I2C_Master_Write@d,w
  2272  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2273  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2274  0246  0093               	movwf	19	;volatile
  2275  0247  0008               	return
  2276  0248                     __end_of_I2C_Master_Write:	
  2277                           
  2278                           	psect	text8
  2279  0239                     __ptext8:	
  2280 ;; *************** function _I2C_Master_Stop *****************
  2281 ;; Defined at:
  2282 ;;		line 55 in file "I2C.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, pclath, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0
  2299 ;;      Totals:         0       0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    1
  2303 ;; This function calls:
  2304 ;;		_I2C_Master_Wait
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;;		_get_Temp
  2308 ;;		_Zeit_Datum_Set
  2309 ;;		_get_Time
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           
  2314                           ;psect for function _I2C_Master_Stop
  2315  0239                     _I2C_Master_Stop:	
  2316                           
  2317                           ;I2C.c: 57:     I2C_Master_Wait();
  2318                           
  2319                           ;incstack = 0
  2320                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  2321  0239  120A  118A  2258   	fcall	_I2C_Master_Wait
  2322                           
  2323                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  2324  023C  1683               	bsf	3,5	;RP0=1, select bank1
  2325  023D  1303               	bcf	3,6	;RP1=0, select bank1
  2326  023E  1511               	bsf	17,2	;volatile
  2327  023F  0008               	return
  2328  0240                     __end_of_I2C_Master_Stop:	
  2329                           
  2330                           	psect	text9
  2331  0232                     __ptext9:	
  2332 ;; *************** function _I2C_Master_Start *****************
  2333 ;; Defined at:
  2334 ;;		line 39 in file "I2C.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, pclath, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2348 ;;      Params:         0       0       0       0       0
  2349 ;;      Locals:         0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0
  2351 ;;      Totals:         0       0       0       0       0
  2352 ;;Total ram usage:        0 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    1
  2355 ;; This function calls:
  2356 ;;		_I2C_Master_Wait
  2357 ;; This function is called by:
  2358 ;;		_main
  2359 ;;		_get_Temp
  2360 ;;		_Zeit_Datum_Set
  2361 ;;		_get_Time
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           
  2366                           ;psect for function _I2C_Master_Start
  2367  0232                     _I2C_Master_Start:	
  2368                           
  2369                           ;I2C.c: 41:     I2C_Master_Wait();
  2370                           
  2371                           ;incstack = 0
  2372                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  2373  0232  120A  118A  2258   	fcall	_I2C_Master_Wait
  2374                           
  2375                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  2376  0235  1683               	bsf	3,5	;RP0=1, select bank1
  2377  0236  1303               	bcf	3,6	;RP1=0, select bank1
  2378  0237  1411               	bsf	17,0	;volatile
  2379  0238  0008               	return
  2380  0239                     __end_of_I2C_Master_Start:	
  2381                           
  2382                           	psect	text10
  2383  0306                     __ptext10:	
  2384 ;; *************** function _I2C_Master_Read *****************
  2385 ;; Defined at:
  2386 ;;		line 74 in file "I2C.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  a               2    0[COMMON] unsigned short 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  temp            2    4[COMMON] unsigned short 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  2    0[COMMON] unsigned short 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0, pclath, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2400 ;;      Params:         2       0       0       0       0
  2401 ;;      Locals:         2       0       0       0       0
  2402 ;;      Temps:          2       0       0       0       0
  2403 ;;      Totals:         6       0       0       0       0
  2404 ;;Total ram usage:        6 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    1
  2407 ;; This function calls:
  2408 ;;		_I2C_Master_Wait
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;;		_get_Temp
  2412 ;;		_get_Time
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _I2C_Master_Read
  2418  0306                     _I2C_Master_Read:	
  2419                           
  2420                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  2424  0306  120A  118A  2258  120A  118A  	fcall	_I2C_Master_Wait
  2425                           
  2426                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  2427  030B  1683               	bsf	3,5	;RP0=1, select bank1
  2428  030C  1303               	bcf	3,6	;RP1=0, select bank1
  2429  030D  1591               	bsf	17,3	;volatile
  2430                           
  2431                           ;I2C.c: 79:     I2C_Master_Wait();
  2432  030E  120A  118A  2258  120A  118A  	fcall	_I2C_Master_Wait
  2433                           
  2434                           ;I2C.c: 80:     temp = SSPBUF;
  2435  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0315  0813               	movf	19,w	;volatile
  2438  0316  00F2               	movwf	??_I2C_Master_Read
  2439  0317  01F3               	clrf	??_I2C_Master_Read+1
  2440  0318  0872               	movf	??_I2C_Master_Read,w
  2441  0319  00F4               	movwf	I2C_Master_Read@temp
  2442  031A  0873               	movf	??_I2C_Master_Read+1,w
  2443  031B  00F5               	movwf	I2C_Master_Read@temp+1
  2444                           
  2445                           ;I2C.c: 81:     I2C_Master_Wait();
  2446  031C  120A  118A  2258  120A  118A  	fcall	_I2C_Master_Wait
  2447                           
  2448                           ;I2C.c: 82:     if(a == 1){
  2449  0321  0370               	decf	I2C_Master_Read@a,w
  2450  0322  0471               	iorwf	I2C_Master_Read@a+1,w
  2451  0323  1D03               	btfss	3,2
  2452  0324  2B29               	goto	l215
  2453                           
  2454                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  2455  0325  1683               	bsf	3,5	;RP0=1, select bank1
  2456  0326  1303               	bcf	3,6	;RP1=0, select bank1
  2457  0327  1291               	bcf	17,5	;volatile
  2458                           
  2459                           ;I2C.c: 84:     }else{
  2460  0328  2B2C               	goto	l216
  2461  0329                     l215:	
  2462                           
  2463                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  2464  0329  1683               	bsf	3,5	;RP0=1, select bank1
  2465  032A  1303               	bcf	3,6	;RP1=0, select bank1
  2466  032B  1691               	bsf	17,5	;volatile
  2467  032C                     l216:	
  2468                           ;I2C.c: 86:     }
  2469                           
  2470                           
  2471                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  2472  032C  1611               	bsf	17,4	;volatile
  2473                           
  2474                           ;I2C.c: 88:     return temp;
  2475  032D  0875               	movf	I2C_Master_Read@temp+1,w
  2476  032E  00F1               	movwf	?_I2C_Master_Read+1
  2477  032F  0874               	movf	I2C_Master_Read@temp,w
  2478  0330  00F0               	movwf	?_I2C_Master_Read
  2479  0331  0008               	return
  2480  0332                     __end_of_I2C_Master_Read:	
  2481                           
  2482                           	psect	text11
  2483  0258                     __ptext11:	
  2484 ;; *************** function _I2C_Master_Wait *****************
  2485 ;; Defined at:
  2486 ;;		line 32 in file "I2C.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2500 ;;      Params:         0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0
  2503 ;;      Totals:         0       0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_I2C_Master_Start
  2510 ;;		_I2C_Master_Stop
  2511 ;;		_I2C_Master_Write
  2512 ;;		_I2C_Master_Read
  2513 ;;		_I2C_Master_RepeatedStart
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _I2C_Master_Wait
  2519  0258                     _I2C_Master_Wait:	
  2520  0258                     l197:	
  2521                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  2525                           
  2526  0258  1683               	bsf	3,5	;RP0=1, select bank1
  2527  0259  1303               	bcf	3,6	;RP1=0, select bank1
  2528  025A  1914               	btfsc	20,2	;volatile
  2529  025B  2A58               	goto	l197
  2530  025C  0811               	movf	17,w	;volatile
  2531  025D  391F               	andlw	31
  2532  025E  1903               	btfsc	3,2
  2533  025F  0008               	return
  2534  0260  2A58               	goto	l197
  2535  0261                     __end_of_I2C_Master_Wait:	
  2536                           
  2537                           	psect	text12
  2538  04F6                     __ptext12:	
  2539 ;; *************** function _LCD_init *****************
  2540 ;; Defined at:
  2541 ;;		line 44 in file "LCD_8bits.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;		None
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, pclath, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2555 ;;      Params:         0       0       0       0       0
  2556 ;;      Locals:         0       0       0       0       0
  2557 ;;      Temps:          2       0       0       0       0
  2558 ;;      Totals:         2       0       0       0       0
  2559 ;;Total ram usage:        2 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    1
  2562 ;; This function calls:
  2563 ;;		_LCD_Cmd
  2564 ;; This function is called by:
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           
  2570                           ;psect for function _LCD_init
  2571  04F6                     _LCD_init:	
  2572                           
  2573                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2574                           
  2575                           ;incstack = 0
  2576                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  2577  04F6  301A               	movlw	26
  2578  04F7  00F4               	movwf	??_LCD_init+1
  2579  04F8  30F8               	movlw	248
  2580  04F9  00F3               	movwf	??_LCD_init
  2581  04FA                     u807:	
  2582  04FA  0BF3               	decfsz	??_LCD_init,f
  2583  04FB  2CFA               	goto	u807
  2584  04FC  0BF4               	decfsz	??_LCD_init+1,f
  2585  04FD  2CFA               	goto	u807
  2586  04FE  0000               	nop
  2587                           
  2588                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  2589  04FF  3030               	movlw	48
  2590  0500  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2591                           
  2592                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2593  0505  3007               	movlw	7
  2594  0506  00F4               	movwf	??_LCD_init+1
  2595  0507  307D               	movlw	125
  2596  0508  00F3               	movwf	??_LCD_init
  2597  0509                     u817:	
  2598  0509  0BF3               	decfsz	??_LCD_init,f
  2599  050A  2D09               	goto	u817
  2600  050B  0BF4               	decfsz	??_LCD_init+1,f
  2601  050C  2D09               	goto	u817
  2602                           
  2603                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  2604  050D  3030               	movlw	48
  2605  050E  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2606                           
  2607                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2608  0513  3021               	movlw	33
  2609  0514  00F3               	movwf	??_LCD_init
  2610  0515                     u827:	
  2611  0515  0BF3               	decfsz	??_LCD_init,f
  2612  0516  2D15               	goto	u827
  2613                           
  2614                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  2615  0517  3030               	movlw	48
  2616  0518  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2617                           
  2618                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2619  051D  3021               	movlw	33
  2620  051E  00F3               	movwf	??_LCD_init
  2621  051F                     u837:	
  2622  051F  0BF3               	decfsz	??_LCD_init,f
  2623  0520  2D1F               	goto	u837
  2624                           
  2625                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  2626  0521  3038               	movlw	56
  2627  0522  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2628                           
  2629                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2630  0527  3011               	movlw	17
  2631  0528  00F3               	movwf	??_LCD_init
  2632  0529                     u847:	
  2633  0529  0BF3               	decfsz	??_LCD_init,f
  2634  052A  2D29               	goto	u847
  2635  052B  0000               	nop
  2636                           
  2637                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  2638  052C  3008               	movlw	8
  2639  052D  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2640                           
  2641                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2642  0532  3011               	movlw	17
  2643  0533  00F3               	movwf	??_LCD_init
  2644  0534                     u857:	
  2645  0534  0BF3               	decfsz	??_LCD_init,f
  2646  0535  2D34               	goto	u857
  2647  0536  0000               	nop
  2648                           
  2649                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  2650  0537  3001               	movlw	1
  2651  0538  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2652                           
  2653                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(4000000/4000.0)));
  2654  053D  3004               	movlw	4
  2655  053E  00F4               	movwf	??_LCD_init+1
  2656  053F  30E4               	movlw	228
  2657  0540  00F3               	movwf	??_LCD_init
  2658  0541                     u867:	
  2659  0541  0BF3               	decfsz	??_LCD_init,f
  2660  0542  2D41               	goto	u867
  2661  0543  0BF4               	decfsz	??_LCD_init+1,f
  2662  0544  2D41               	goto	u867
  2663  0545  0000               	nop
  2664                           
  2665                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  2666  0546  3006               	movlw	6
  2667  0547  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2668                           
  2669                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2670  054C  3011               	movlw	17
  2671  054D  00F3               	movwf	??_LCD_init
  2672  054E                     u877:	
  2673  054E  0BF3               	decfsz	??_LCD_init,f
  2674  054F  2D4E               	goto	u877
  2675  0550  0000               	nop
  2676                           
  2677                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  2678  0551  300C               	movlw	12
  2679  0552  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2680                           
  2681                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2682  0557  3011               	movlw	17
  2683  0558  00F3               	movwf	??_LCD_init
  2684  0559                     u887:	
  2685  0559  0BF3               	decfsz	??_LCD_init,f
  2686  055A  2D59               	goto	u887
  2687  055B  0000               	nop
  2688  055C  0008               	return
  2689  055D                     __end_of_LCD_init:	
  2690                           
  2691                           	psect	text13
  2692  0281                     __ptext13:	
  2693 ;; *************** function _LCD_clear *****************
  2694 ;; Defined at:
  2695 ;;		line 32 in file "LCD_8bits.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;		None
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, pclath, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2709 ;;      Params:         0       0       0       0       0
  2710 ;;      Locals:         0       0       0       0       0
  2711 ;;      Temps:          2       0       0       0       0
  2712 ;;      Totals:         2       0       0       0       0
  2713 ;;Total ram usage:        2 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    1
  2716 ;; This function calls:
  2717 ;;		_LCD_Cmd
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _LCD_clear
  2725  0281                     _LCD_clear:	
  2726                           
  2727                           ;LCD_8bits.c: 33:     LCD_Cmd(0x00);
  2728                           
  2729                           ;incstack = 0
  2730                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  2731  0281  3000               	movlw	0
  2732  0282  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2733                           
  2734                           ;LCD_8bits.c: 34:     LCD_Cmd(0x01);
  2735  0287  3001               	movlw	1
  2736  0288  120A  118A  2332  120A  118A  	fcall	_LCD_Cmd
  2737                           
  2738                           ;LCD_8bits.c: 35:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2739  028D  3006               	movlw	6
  2740  028E  00F4               	movwf	??_LCD_clear+1
  2741  028F  3030               	movlw	48
  2742  0290  00F3               	movwf	??_LCD_clear
  2743  0291                     u897:	
  2744  0291  0BF3               	decfsz	??_LCD_clear,f
  2745  0292  2A91               	goto	u897
  2746  0293  0BF4               	decfsz	??_LCD_clear+1,f
  2747  0294  2A91               	goto	u897
  2748  0295  0000               	nop
  2749  0296  0008               	return
  2750  0297                     __end_of_LCD_clear:	
  2751                           
  2752                           	psect	text14
  2753  02B8                     __ptext14:	
  2754 ;; *************** function _LCD_Write_String *****************
  2755 ;; Defined at:
  2756 ;;		line 73 in file "LCD_8bits.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  a               1    wreg     PTR unsigned char 
  2759 ;;		 -> STR_2(3), STR_1(15), 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  a               1    4[COMMON] PTR unsigned char 
  2762 ;;		 -> STR_2(3), STR_1(15), 
  2763 ;;  n               2    2[COMMON] int 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2773 ;;      Params:         0       0       0       0       0
  2774 ;;      Locals:         3       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0
  2776 ;;      Totals:         3       0       0       0       0
  2777 ;;Total ram usage:        3 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    1
  2780 ;; This function calls:
  2781 ;;		_LCD_Write_Character
  2782 ;; This function is called by:
  2783 ;;		_main
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function _LCD_Write_String
  2789  02B8                     _LCD_Write_String:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2793                           ;LCD_Write_String@a stored from wreg
  2794  02B8  00F4               	movwf	LCD_Write_String@a
  2795                           
  2796                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  2797  02B9  01F2               	clrf	LCD_Write_String@n
  2798  02BA  01F3               	clrf	LCD_Write_String@n+1
  2799  02BB                     l1513:	
  2800  02BB  0872               	movf	LCD_Write_String@n,w
  2801  02BC  0774               	addwf	LCD_Write_String@a,w
  2802  02BD  0084               	movwf	4
  2803  02BE  120A  118A  2003  120A  118A  	fcall	stringdir
  2804  02C3  3A00               	xorlw	0
  2805  02C4  1903               	btfsc	3,2
  2806  02C5  0008               	return
  2807                           
  2808                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  2809  02C6  0872               	movf	LCD_Write_String@n,w
  2810  02C7  0774               	addwf	LCD_Write_String@a,w
  2811  02C8  0084               	movwf	4
  2812  02C9  120A  118A  2003  120A  118A  	fcall	stringdir
  2813  02CE  120A  118A  2261  120A  118A  	fcall	_LCD_Write_Character
  2814                           
  2815                           ;LCD_8bits.c: 77:     }
  2816  02D3  3001               	movlw	1
  2817  02D4  07F2               	addwf	LCD_Write_String@n,f
  2818  02D5  1803               	skipnc
  2819  02D6  0AF3               	incf	LCD_Write_String@n+1,f
  2820  02D7  3000               	movlw	0
  2821  02D8  07F3               	addwf	LCD_Write_String@n+1,f
  2822  02D9  2ABB               	goto	l1513
  2823  02DA                     __end_of_LCD_Write_String:	
  2824                           
  2825                           	psect	text15
  2826  0261                     __ptext15:	
  2827 ;; *************** function _LCD_Write_Character *****************
  2828 ;; Defined at:
  2829 ;;		line 64 in file "LCD_8bits.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;  caracter        1    wreg     unsigned char 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  caracter        1    1[COMMON] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2843 ;;      Params:         0       0       0       0       0
  2844 ;;      Locals:         1       0       0       0       0
  2845 ;;      Temps:          1       0       0       0       0
  2846 ;;      Totals:         2       0       0       0       0
  2847 ;;Total ram usage:        2 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_LCD_Write_String
  2853 ;;		_main
  2854 ;;		_display_Uhrzeit
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function _LCD_Write_Character
  2860  0261                     _LCD_Write_Character:	
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _LCD_Write_Character: [wreg]
  2864                           ;LCD_Write_Character@caracter stored from wreg
  2865  0261  00F1               	movwf	LCD_Write_Character@caracter
  2866                           
  2867                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  2868  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2870  0264  1407               	bsf	7,0	;volatile
  2871                           
  2872                           ;LCD_8bits.c: 67:     PORTD = caracter;
  2873  0265  0871               	movf	LCD_Write_Character@caracter,w
  2874  0266  0088               	movwf	8	;volatile
  2875                           
  2876                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  2877  0267  1487               	bsf	7,1	;volatile
  2878                           
  2879                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2880  0268  300D               	movlw	13
  2881  0269  00F0               	movwf	??_LCD_Write_Character
  2882  026A                     u907:	
  2883  026A  0BF0               	decfsz	??_LCD_Write_Character,f
  2884  026B  2A6A               	goto	u907
  2885                           
  2886                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  2887  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2888  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2889  026E  1087               	bcf	7,1	;volatile
  2890  026F  0008               	return
  2891  0270                     __end_of_LCD_Write_Character:	
  2892                           
  2893                           	psect	text16
  2894  02DA                     __ptext16:	
  2895 ;; *************** function _LCD_Set_Cursor *****************
  2896 ;; Defined at:
  2897 ;;		line 80 in file "LCD_8bits.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  linea           1    wreg     unsigned char 
  2900 ;;  columna         1    3[COMMON] unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  linea           1    6[COMMON] unsigned char 
  2903 ;;  corrimiento     1    7[COMMON] unsigned char 
  2904 ;; Return value:  Size  Location     Type
  2905 ;;                  1    wreg      void 
  2906 ;; Registers used:
  2907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2908 ;; Tracked objects:
  2909 ;;		On entry : 0/0
  2910 ;;		On exit  : 0/0
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2913 ;;      Params:         1       0       0       0       0
  2914 ;;      Locals:         2       0       0       0       0
  2915 ;;      Temps:          2       0       0       0       0
  2916 ;;      Totals:         5       0       0       0       0
  2917 ;;Total ram usage:        5 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    1
  2920 ;; This function calls:
  2921 ;;		_LCD_Cmd
  2922 ;; This function is called by:
  2923 ;;		_main
  2924 ;;		_display_Uhrzeit
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           
  2929                           ;psect for function _LCD_Set_Cursor
  2930  02DA                     _LCD_Set_Cursor:	
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2934                           ;LCD_Set_Cursor@linea stored from wreg
  2935  02DA  00F6               	movwf	LCD_Set_Cursor@linea
  2936                           
  2937                           ;LCD_8bits.c: 82:     switch (linea){
  2938  02DB  2AF5               	goto	l1527
  2939  02DC                     l1517:	
  2940                           
  2941                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  2942  02DC  0873               	movf	LCD_Set_Cursor@columna,w
  2943  02DD  3E80               	addlw	128
  2944  02DE  00F4               	movwf	??_LCD_Set_Cursor
  2945  02DF  0874               	movf	??_LCD_Set_Cursor,w
  2946  02E0  00F7               	movwf	LCD_Set_Cursor@corrimiento
  2947                           
  2948                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  2949  02E1  0877               	movf	LCD_Set_Cursor@corrimiento,w
  2950  02E2  120A  118A  2332   	fcall	_LCD_Cmd
  2951                           
  2952                           ;LCD_8bits.c: 86:             break;
  2953  02E5  0008               	return
  2954  02E6                     l1521:	
  2955                           
  2956                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  2957  02E6  0873               	movf	LCD_Set_Cursor@columna,w
  2958  02E7  3EC0               	addlw	192
  2959  02E8  00F4               	movwf	??_LCD_Set_Cursor
  2960  02E9  0874               	movf	??_LCD_Set_Cursor,w
  2961  02EA  00F7               	movwf	LCD_Set_Cursor@corrimiento
  2962                           
  2963                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  2964  02EB  0877               	movf	LCD_Set_Cursor@corrimiento,w
  2965  02EC  120A  118A  2332   	fcall	_LCD_Cmd
  2966                           
  2967                           ;LCD_8bits.c: 90:             break;
  2968  02EF  0008               	return
  2969  02F0                     l1525:	
  2970                           
  2971                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  2972  02F0  3080               	movlw	128
  2973  02F1  120A  118A  2332   	fcall	_LCD_Cmd
  2974                           
  2975                           ;LCD_8bits.c: 93:     }
  2976  02F4  0008               	return
  2977  02F5                     l1527:	
  2978  02F5  0876               	movf	LCD_Set_Cursor@linea,w
  2979  02F6  00F4               	movwf	??_LCD_Set_Cursor
  2980  02F7  01F5               	clrf	??_LCD_Set_Cursor+1
  2981                           
  2982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2983                           ; Switch size 1, requested type "simple"
  2984                           ; Number of cases is 1, Range of values is 0 to 0
  2985                           ; switch strategies available:
  2986                           ; Name         Instructions Cycles
  2987                           ; simple_byte            4     3 (average)
  2988                           ; direct_byte           11     8 (fixed)
  2989                           ; jumptable            260     6 (fixed)
  2990                           ;	Chosen strategy is simple_byte
  2991  02F8  0875               	movf	??_LCD_Set_Cursor+1,w
  2992  02F9  3A00               	xorlw	0	; case 0
  2993  02FA  1903               	skipnz
  2994  02FB  2AFD               	goto	l1875
  2995  02FC  2AF0               	goto	l1525
  2996  02FD                     l1875:	
  2997                           
  2998                           ; Switch size 1, requested type "simple"
  2999                           ; Number of cases is 2, Range of values is 1 to 2
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            7     4 (average)
  3003                           ; direct_byte           17    11 (fixed)
  3004                           ; jumptable            263     9 (fixed)
  3005                           ;	Chosen strategy is simple_byte
  3006  02FD  0874               	movf	??_LCD_Set_Cursor,w
  3007  02FE  3A01               	xorlw	1	; case 1
  3008  02FF  1903               	skipnz
  3009  0300  2ADC               	goto	l1517
  3010  0301  3A03               	xorlw	3	; case 2
  3011  0302  1903               	skipnz
  3012  0303  2AE6               	goto	l1521
  3013  0304  2AF0               	goto	l1525
  3014  0305  0008               	return
  3015  0306                     __end_of_LCD_Set_Cursor:	
  3016                           
  3017                           	psect	text17
  3018  0332                     __ptext17:	
  3019 ;; *************** function _LCD_Cmd *****************
  3020 ;; Defined at:
  3021 ;;		line 21 in file "LCD_8bits.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  comando         1    wreg     unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  comando         1    2[COMMON] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3035 ;;      Params:         0       0       0       0       0
  3036 ;;      Locals:         1       0       0       0       0
  3037 ;;      Temps:          2       0       0       0       0
  3038 ;;      Totals:         3       0       0       0       0
  3039 ;;Total ram usage:        3 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_LCD_clear
  3045 ;;		_LCD_init
  3046 ;;		_LCD_Set_Cursor
  3047 ;;		_LCD_home
  3048 ;;		_LCD_Shift_links
  3049 ;;		_LCD_Shift_rechts
  3050 ;;		_LCD_Cursor_rechts
  3051 ;;		_LCD_Cursor_links
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _LCD_Cmd
  3057  0332                     _LCD_Cmd:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _LCD_Cmd: [wreg]
  3061                           ;LCD_Cmd@comando stored from wreg
  3062  0332  00F2               	movwf	LCD_Cmd@comando
  3063                           
  3064                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  3065  0333  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0334  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0335  1007               	bcf	7,0	;volatile
  3068                           
  3069                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3070  0336  3007               	movlw	7
  3071  0337  00F1               	movwf	??_LCD_Cmd+1
  3072  0338  307D               	movlw	125
  3073  0339  00F0               	movwf	??_LCD_Cmd
  3074  033A                     u917:	
  3075  033A  0BF0               	decfsz	??_LCD_Cmd,f
  3076  033B  2B3A               	goto	u917
  3077  033C  0BF1               	decfsz	??_LCD_Cmd+1,f
  3078  033D  2B3A               	goto	u917
  3079                           
  3080                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  3081  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3082  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0340  1487               	bsf	7,1	;volatile
  3084                           
  3085                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3086  0341  3007               	movlw	7
  3087  0342  00F1               	movwf	??_LCD_Cmd+1
  3088  0343  307D               	movlw	125
  3089  0344  00F0               	movwf	??_LCD_Cmd
  3090  0345                     u927:	
  3091  0345  0BF0               	decfsz	??_LCD_Cmd,f
  3092  0346  2B45               	goto	u927
  3093  0347  0BF1               	decfsz	??_LCD_Cmd+1,f
  3094  0348  2B45               	goto	u927
  3095                           
  3096                           ;LCD_8bits.c: 26:     PORTD = comando;
  3097  0349  0872               	movf	LCD_Cmd@comando,w
  3098  034A  1283               	bcf	3,5	;RP0=0, select bank0
  3099  034B  1303               	bcf	3,6	;RP1=0, select bank0
  3100  034C  0088               	movwf	8	;volatile
  3101                           
  3102                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3103  034D  3007               	movlw	7
  3104  034E  00F1               	movwf	??_LCD_Cmd+1
  3105  034F  307D               	movlw	125
  3106  0350  00F0               	movwf	??_LCD_Cmd
  3107  0351                     u937:	
  3108  0351  0BF0               	decfsz	??_LCD_Cmd,f
  3109  0352  2B51               	goto	u937
  3110  0353  0BF1               	decfsz	??_LCD_Cmd+1,f
  3111  0354  2B51               	goto	u937
  3112                           
  3113                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  3114  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0357  1087               	bcf	7,1	;volatile
  3117                           
  3118                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3119  0358  3007               	movlw	7
  3120  0359  00F1               	movwf	??_LCD_Cmd+1
  3121  035A  307D               	movlw	125
  3122  035B  00F0               	movwf	??_LCD_Cmd
  3123  035C                     u947:	
  3124  035C  0BF0               	decfsz	??_LCD_Cmd,f
  3125  035D  2B5C               	goto	u947
  3126  035E  0BF1               	decfsz	??_LCD_Cmd+1,f
  3127  035F  2B5C               	goto	u947
  3128  0360  0008               	return
  3129  0361                     __end_of_LCD_Cmd:	
  3130                           
  3131                           	psect	text18
  3132  0361                     __ptext18:	
  3133 ;; *************** function _I2C_Master_Init *****************
  3134 ;; Defined at:
  3135 ;;		line 16 in file "I2C.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  c               4    0[BANK0 ] const unsigned long 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       4       0       0       0
  3150 ;;      Locals:         0       0       0       0       0
  3151 ;;      Temps:          0       4       0       0       0
  3152 ;;      Totals:         0       8       0       0       0
  3153 ;;Total ram usage:        8 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    1
  3156 ;; This function calls:
  3157 ;;		___lldiv
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _I2C_Master_Init
  3165  0361                     _I2C_Master_Init:	
  3166                           
  3167                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3171  0361  3028               	movlw	40
  3172  0362  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0363  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0364  0094               	movwf	20	;volatile
  3175                           
  3176                           ;I2C.c: 19:     SSPCON2 = 0;
  3177  0365  1683               	bsf	3,5	;RP0=1, select bank1
  3178  0366  1303               	bcf	3,6	;RP1=0, select bank1
  3179  0367  0191               	clrf	17	;volatile
  3180                           
  3181                           ;I2C.c: 20:     SSPADD = (4000000/(4*c))-1;
  3182  0368  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0369  1303               	bcf	3,6	;RP1=0, select bank0
  3184  036A  0820               	movf	I2C_Master_Init@c,w
  3185  036B  00A4               	movwf	??_I2C_Master_Init
  3186  036C  0821               	movf	I2C_Master_Init@c+1,w
  3187  036D  00A5               	movwf	??_I2C_Master_Init+1
  3188  036E  0822               	movf	I2C_Master_Init@c+2,w
  3189  036F  00A6               	movwf	??_I2C_Master_Init+2
  3190  0370  0823               	movf	I2C_Master_Init@c+3,w
  3191  0371  00A7               	movwf	??_I2C_Master_Init+3
  3192  0372  3002               	movlw	2
  3193  0373                     u615:	
  3194  0373  1003               	clrc
  3195  0374  0DA4               	rlf	??_I2C_Master_Init,f
  3196  0375  0DA5               	rlf	??_I2C_Master_Init+1,f
  3197  0376  0DA6               	rlf	??_I2C_Master_Init+2,f
  3198  0377  0DA7               	rlf	??_I2C_Master_Init+3,f
  3199  0378  3EFF               	addlw	-1
  3200  0379  1D03               	skipz
  3201  037A  2B73               	goto	u615
  3202  037B  0827               	movf	??_I2C_Master_Init+3,w
  3203  037C  00F3               	movwf	___lldiv@divisor+3
  3204  037D  0826               	movf	??_I2C_Master_Init+2,w
  3205  037E  00F2               	movwf	___lldiv@divisor+2
  3206  037F  0825               	movf	??_I2C_Master_Init+1,w
  3207  0380  00F1               	movwf	___lldiv@divisor+1
  3208  0381  0824               	movf	??_I2C_Master_Init,w
  3209  0382  00F0               	movwf	___lldiv@divisor
  3210  0383  3000               	movlw	0
  3211  0384  00F7               	movwf	___lldiv@dividend+3
  3212  0385  303D               	movlw	61
  3213  0386  00F6               	movwf	___lldiv@dividend+2
  3214  0387  3009               	movlw	9
  3215  0388  00F5               	movwf	___lldiv@dividend+1
  3216  0389  3000               	movlw	0
  3217  038A  00F4               	movwf	___lldiv@dividend
  3218  038B  120A  118A  2435   	fcall	___lldiv
  3219  038E  0870               	movf	?___lldiv,w
  3220  038F  3EFF               	addlw	255
  3221  0390  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0391  1303               	bcf	3,6	;RP1=0, select bank1
  3223  0392  0093               	movwf	19	;volatile
  3224                           
  3225                           ;I2C.c: 21:     SSPSTAT = 0;
  3226  0393  0194               	clrf	20	;volatile
  3227                           
  3228                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  3229  0394  1587               	bsf	7,3	;volatile
  3230                           
  3231                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  3232  0395  1607               	bsf	7,4	;volatile
  3233  0396  0008               	return
  3234  0397                     __end_of_I2C_Master_Init:	
  3235                           
  3236                           	psect	text19
  3237  0435                     __ptext19:	
  3238 ;; *************** function ___lldiv *****************
  3239 ;; Defined at:
  3240 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  divisor         4    0[COMMON] unsigned long 
  3243 ;;  dividend        4    4[COMMON] unsigned long 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  quotient        4    9[COMMON] unsigned long 
  3246 ;;  counter         1   13[COMMON] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  4    0[COMMON] unsigned long 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3256 ;;      Params:         8       0       0       0       0
  3257 ;;      Locals:         5       0       0       0       0
  3258 ;;      Temps:          1       0       0       0       0
  3259 ;;      Totals:        14       0       0       0       0
  3260 ;;Total ram usage:       14 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_I2C_Master_Init
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function ___lldiv
  3271  0435                     ___lldiv:	
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3275  0435  3000               	movlw	0
  3276  0436  00FC               	movwf	___lldiv@quotient+3
  3277  0437  3000               	movlw	0
  3278  0438  00FB               	movwf	___lldiv@quotient+2
  3279  0439  3000               	movlw	0
  3280  043A  00FA               	movwf	___lldiv@quotient+1
  3281  043B  3000               	movlw	0
  3282  043C  00F9               	movwf	___lldiv@quotient
  3283  043D  0873               	movf	___lldiv@divisor+3,w
  3284  043E  0472               	iorwf	___lldiv@divisor+2,w
  3285  043F  0471               	iorwf	___lldiv@divisor+1,w
  3286  0440  0470               	iorwf	___lldiv@divisor,w
  3287  0441  1903               	skipnz
  3288  0442  2C8A               	goto	l1431
  3289  0443  01FD               	clrf	___lldiv@counter
  3290  0444  0AFD               	incf	___lldiv@counter,f
  3291  0445                     l1417:	
  3292  0445  1BF3               	btfsc	___lldiv@divisor+3,7
  3293  0446  2C55               	goto	l1419
  3294  0447  3001               	movlw	1
  3295  0448  00F8               	movwf	??___lldiv
  3296  0449                     u435:	
  3297  0449  1003               	clrc
  3298  044A  0DF0               	rlf	___lldiv@divisor,f
  3299  044B  0DF1               	rlf	___lldiv@divisor+1,f
  3300  044C  0DF2               	rlf	___lldiv@divisor+2,f
  3301  044D  0DF3               	rlf	___lldiv@divisor+3,f
  3302  044E  0BF8               	decfsz	??___lldiv,f
  3303  044F  2C49               	goto	u435
  3304  0450  3001               	movlw	1
  3305  0451  00F8               	movwf	??___lldiv
  3306  0452  0878               	movf	??___lldiv,w
  3307  0453  07FD               	addwf	___lldiv@counter,f
  3308  0454  2C45               	goto	l1417
  3309  0455                     l1419:	
  3310  0455  3001               	movlw	1
  3311  0456  00F8               	movwf	??___lldiv
  3312  0457                     u455:	
  3313  0457  1003               	clrc
  3314  0458  0DF9               	rlf	___lldiv@quotient,f
  3315  0459  0DFA               	rlf	___lldiv@quotient+1,f
  3316  045A  0DFB               	rlf	___lldiv@quotient+2,f
  3317  045B  0DFC               	rlf	___lldiv@quotient+3,f
  3318  045C  0BF8               	decfsz	??___lldiv,f
  3319  045D  2C57               	goto	u455
  3320  045E  0873               	movf	___lldiv@divisor+3,w
  3321  045F  0277               	subwf	___lldiv@dividend+3,w
  3322  0460  1D03               	skipz
  3323  0461  2C6C               	goto	u465
  3324  0462  0872               	movf	___lldiv@divisor+2,w
  3325  0463  0276               	subwf	___lldiv@dividend+2,w
  3326  0464  1D03               	skipz
  3327  0465  2C6C               	goto	u465
  3328  0466  0871               	movf	___lldiv@divisor+1,w
  3329  0467  0275               	subwf	___lldiv@dividend+1,w
  3330  0468  1D03               	skipz
  3331  0469  2C6C               	goto	u465
  3332  046A  0870               	movf	___lldiv@divisor,w
  3333  046B  0274               	subwf	___lldiv@dividend,w
  3334  046C                     u465:	
  3335  046C  1C03               	skipc
  3336  046D  2C7D               	goto	l1427
  3337  046E  0870               	movf	___lldiv@divisor,w
  3338  046F  02F4               	subwf	___lldiv@dividend,f
  3339  0470  0871               	movf	___lldiv@divisor+1,w
  3340  0471  1C03               	skipc
  3341  0472  0F71               	incfsz	___lldiv@divisor+1,w
  3342  0473  02F5               	subwf	___lldiv@dividend+1,f
  3343  0474  0872               	movf	___lldiv@divisor+2,w
  3344  0475  1C03               	skipc
  3345  0476  0F72               	incfsz	___lldiv@divisor+2,w
  3346  0477  02F6               	subwf	___lldiv@dividend+2,f
  3347  0478  0873               	movf	___lldiv@divisor+3,w
  3348  0479  1C03               	skipc
  3349  047A  0F73               	incfsz	___lldiv@divisor+3,w
  3350  047B  02F7               	subwf	___lldiv@dividend+3,f
  3351  047C  1479               	bsf	___lldiv@quotient,0
  3352  047D                     l1427:	
  3353  047D  3001               	movlw	1
  3354  047E                     u475:	
  3355  047E  1003               	clrc
  3356  047F  0CF3               	rrf	___lldiv@divisor+3,f
  3357  0480  0CF2               	rrf	___lldiv@divisor+2,f
  3358  0481  0CF1               	rrf	___lldiv@divisor+1,f
  3359  0482  0CF0               	rrf	___lldiv@divisor,f
  3360  0483  3EFF               	addlw	-1
  3361  0484  1D03               	skipz
  3362  0485  2C7E               	goto	u475
  3363  0486  3001               	movlw	1
  3364  0487  02FD               	subwf	___lldiv@counter,f
  3365  0488  1D03               	btfss	3,2
  3366  0489  2C55               	goto	l1419
  3367  048A                     l1431:	
  3368  048A  087C               	movf	___lldiv@quotient+3,w
  3369  048B  00F3               	movwf	?___lldiv+3
  3370  048C  087B               	movf	___lldiv@quotient+2,w
  3371  048D  00F2               	movwf	?___lldiv+2
  3372  048E  087A               	movf	___lldiv@quotient+1,w
  3373  048F  00F1               	movwf	?___lldiv+1
  3374  0490  0879               	movf	___lldiv@quotient,w
  3375  0491  00F0               	movwf	?___lldiv
  3376  0492  0008               	return
  3377  0493                     __end_of___lldiv:	
  3378  007E                     btemp	set	126	;btemp
  3379  007E                     wtemp0	set	126


Data Sizes:
    Strings     18
    Constant    0
    Data        8
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      54
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    voltaje_map	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    temp_array	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[3]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _uint_to_array->___awdiv
    ___awdiv->___wmul
    _mapear->___wmul
    _get_Temp->_I2C_Master_Read
    _LCD_init->_LCD_Cmd
    _LCD_clear->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_uint_to_array
    _uint_to_array->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10525
                                             19 BANK0      5     5      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                          _LCD_clear
                           _LCD_init
                           _get_Temp
                             _mapear
                      _uint_to_array
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      62
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uint_to_array                                       15    15      0    2621
                                              4 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1212
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1809
                                              6 COMMON     6     4      2
                                              0 BANK0      9     9      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _get_Temp                                             3     3      0    2371
                                              6 COMMON     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1390
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      6     4      2     957
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     178
                                              2 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     591
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_clear
     _LCD_Cmd
   _LCD_init
     _LCD_Cmd
   _get_Temp
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _mapear
     ___wmul
   _uint_to_array
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _uint_to_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     18      36       5       67.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      44      12        0.0%
ABS                  0      0      44       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Feb 23 14:40:12 2020

                           pc 0002                   __CFG_CP$OFF 0000                  ___awdiv@sign 0021  
             mapear@resultado 0021                            fsr 0004           ___wmul@multiplicand 0072  
                         l215 0329                           l216 032C                           l343 02A1  
                         l197 0258                           _GIE 005F                           u405 02A9  
                         u600 0564                  __CFG_CPD$OFF 0000                           u435 0449  
                         u620 05E9                           u525 03FC                           u455 0457  
                         u615 0373                           u465 046C                           u545 0408  
                         u475 047E                           u395 02A2                           u635 0610  
                         u555 0414                           u645 063E                           u565 041E  
                         u807 04FA                           u655 066C                           u817 0509  
                         u907 026A                           u827 0515                           u917 033A  
                         u837 051F                           u927 0345                           u847 0529  
                         u937 0351                           u857 0534                           u947 035C  
                         u867 0541                           u787 06E5                           u877 054E  
                         u797 0710                           u887 0559                           u897 0291  
                         _dia 0054                           _mes 0050                           _min 0046  
                         _seg 0048                  _uint_to_char 0493                           fsr0 0004  
                         indf 0000  __size_of_LCD_Write_Character 000F               __end_of_LCD_Cmd 0361  
                __CFG_LVP$OFF 0000                _LCD_Set_Cursor 02DA                          l1431 048A  
                        l1417 0445                          l1521 02E6                          l1513 02BB  
                        l1427 047D                          l1419 0455                          l1443 03E6  
                        l1525 02F0                          l1517 02DC                          l1621 0622  
                        l1461 0407                          l1541 049B                          l1527 02F5  
                        l1631 0663                          l1471 0428                          l1551 04A5  
                        l1543 049D                          l1535 0495                          l1633 067E  
                        l1625 0635                          l1449 03F1                          l1561 04AF  
                        l1553 04A7                          l1545 049F                          l1537 0497  
                        l1627 0650                          l1619 0607                          l1475 0430  
                        l1467 041D                          l1459 03F9                          l1563 04B1  
                        l1555 04A9                          l1547 04A1                          l1539 0499  
                        l1571 04F4                          l1565 04B3                          l1557 04AB  
                        l1549 04A3                          l1399 0299                          l1567 04B5  
                        l1559 04AD                          l1719 0734                          l1569 04BA  
                        l1873 04C2                          l1689 06BE                          l1875 02FD  
                        STR_1 0009                          STR_2 0018                          _PEIE 005E  
                __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070                          _jahr 004E  
                        _main 0680                          _hora 0044                          btemp 007E  
               _uint_to_array 055D                          start 0000            ??_LCD_Write_String 0072  
               __CFG_IESO$OFF 0000            __size_of_LCD_clear 0016                   _voltaje_map 004B  
            ?_I2C_Master_Init 0020              ?_I2C_Master_Read 0070              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070              __end_of_LCD_init 055D                         ?_main 0070  
             __end_of___awdiv 0435                 __CFG_WDTE$OFF 0000            uint_to_char@numChr 0073  
             __end_of___lldiv 0493               ___awdiv@divisor 0076            uint_to_char@numero 0072  
             ___awdiv@counter 0020                         _PORTD 0008                         _TRISD 0088  
                       _SSPIE 0463                         _SSPIF 0063                __CFG_FCMEN$OFF 0000  
      __end_of_LCD_Set_Cursor 0306                   mapear@F1358 0038                         _datum 0052  
              __CFG_BOREN$OFF 0000                         pclath 000A                ?_uint_to_array 0070  
                       status 0003                         wtemp0 007E                   mapear@valor 0020  
              __CFG_MCLRE$OFF 0000               __initialization 07E8                  __end_of_main 07E8  
                      ??_main 0033                     ??_LCD_Cmd 0070             ?_I2C_Master_Start 0070  
           ?_I2C_Master_Write 0070             __end_of_LCD_clear 0297               ?_LCD_Set_Cursor 0073  
          ??_I2C_Master_Start 0070            ??_I2C_Master_Write 0072              ___awdiv@dividend 0078  
                      _SSPADD 0093                        _TRISC0 0438                        _TRISC1 0439  
                      _TRISC3 043B                        _TRISC4 043C            uint_to_array@F1341 003E  
                      _SSPCON 0014                        _SSPBUF 0013   LCD_Write_Character@caracter 0071  
              __CFG_PWRTE$OFF 0000              __end_of_get_Temp 03DA                        ___wmul 0297  
                   ??___awdiv 007A                     ??___lldiv 0078                        _mapear 05E2  
            ___awdiv@quotient 0022               ??_uint_to_array 0024                  mapear@limSup 0077  
     __end_of__initialization 07FC                     ?_LCD_init 0070                __pcstackCOMMON 0070  
         _LCD_Write_Character 0261                  __pidataBANK0 0250          ?_LCD_Write_Character 0070  
              LCD_Cmd@comando 0072                    __pbssBANK0 0038     LCD_Set_Cursor@corrimiento 0077  
                  ??_LCD_init 0073                    __pmaintext 0680                       ?___wmul 0070  
                     ?_mapear 0076     __size_of_LCD_Write_String 0022                       _LCD_Cmd 0332  
       ??_LCD_Write_Character 0070                     ?_get_Temp 0070                       _SSPCON2 0091  
                     _SSPSTAT 0094                    __stringtab 0003        uint_to_array@resultado 002B  
                     ___awdiv 03DA                       ___lldiv 0435               __size_of___wmul 0021  
             __size_of_mapear 009E              ??_LCD_Set_Cursor 0074                       __ptext1 0493  
                     __ptext2 055D                       __ptext3 03DA                       __ptext4 05E2  
                     __ptext5 0297                       __ptext6 0397                       __ptext7 0240  
                     __ptext8 0239                       __ptext9 0232           uint_to_array@numero 0032  
    __size_of_I2C_Master_Init 0036      __size_of_I2C_Master_Read 002C      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                    ??_get_Temp 0076                       clrloop0 0249  
                   _LCD_clear 0281          end_of_initialization 07FC     __size_of_I2C_Master_Start 0007  
   __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070               ___lldiv@counter 007D  
            I2C_Master_Init@c 0020              I2C_Master_Read@a 0070                    _temp_array 004A  
                   _PORTCbits 0007                 mapear@limReal 0076                     _TRISCbits 0087  
                  ?_LCD_clear 0070             LCD_Write_String@a 0074             LCD_Write_String@n 0072  
           __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0073                __end_of___wmul 02B8  
            _LCD_Write_String 02B8                __end_of_mapear 0680                 ?_uint_to_char 0070  
         start_initialization 07E8               get_Temp@TempMSB 0078             ??_I2C_Master_Init 0024  
           ??_I2C_Master_Read 0072             ??_I2C_Master_Wait 0070         __end_of_uint_to_array 05E2  
           ??_I2C_Master_Stop 0070      __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??___wmul 0074  
                  init_fetch0 0270                   __pdataBANK0 004E                      ??_mapear 0078  
              ??_uint_to_char 0070                      ?_LCD_Cmd 0070                     ___latbits 0002  
               __pcstackBANK0 0020                   ??_LCD_clear 0073             __size_of_get_Temp 0043  
            _I2C_Master_Start 0232              _I2C_Master_Write 0240         uint_to_array@centenas 0031  
                    ?___awdiv 0076                      ?___lldiv 0070                     __pstrings 0003  
 __end_of_LCD_Write_Character 0270                ___wmul@product 0074                      _LCD_init 04F6  
                   clear_ram0 0248                   __stringbase 0008             ___wmul@multiplier 0070  
            __size_of_LCD_Cmd 002F                     main@signo 0036           I2C_Master_Read@temp 0074  
    __end_of_LCD_Write_String 02DA          __end_of_uint_to_char 04F6              __size_of___awdiv 005B  
            __size_of___lldiv 005E            __end_of__stringtab 0009               _I2C_Master_Init 0361  
             _I2C_Master_Read 0306          uint_to_array@decenas 002A               _I2C_Master_Wait 0258  
             _I2C_Master_Stop 0239                      __ptext10 0306                      __ptext11 0258  
                    __ptext12 04F6                      __ptext13 0281                      __ptext14 02B8  
                    __ptext15 0261                      __ptext16 02DA                      __ptext17 0332  
                    __ptext18 0361                      __ptext19 0435                      _get_Temp 0397  
           __CFG_BOR4V$BOR40V 0000       __size_of_LCD_Set_Cursor 002C                      _contador 004C  
               __size_of_main 0168                      _valorADC 004D           LCD_Set_Cursor@linea 0076  
             main@temperatura 0037      __end_of_I2C_Master_Start 0239      __end_of_I2C_Master_Write 0248  
                    init_ram0 0274              ___lldiv@dividend 0074                     stringcode 0003  
     __end_of_I2C_Master_Init 0397       __end_of_I2C_Master_Read 0332       __end_of_I2C_Master_Wait 0261  
     __end_of_I2C_Master_Stop 0240               mapear@dividendo 0027        __size_of_uint_to_array 0085  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070                      stringdir 0003  
                    stringtab 0003                   _SSPCON2bits 0091         __size_of_uint_to_char 0063  
