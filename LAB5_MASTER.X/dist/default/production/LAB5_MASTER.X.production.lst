

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb 22 16:37:47 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  008F                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  0105                     	;# 
   204  0107                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  010F                     	;# 
   212  0185                     	;# 
   213  0187                     	;# 
   214  0188                     	;# 
   215  0189                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  0105                     	;# 
   282  0107                     	;# 
   283  0108                     	;# 
   284  0109                     	;# 
   285  010C                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0187                     	;# 
   292  0188                     	;# 
   293  0189                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  009F                     	;# 
   359  0105                     	;# 
   360  0107                     	;# 
   361  0108                     	;# 
   362  0109                     	;# 
   363  010C                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  010F                     	;# 
   368  0185                     	;# 
   369  0187                     	;# 
   370  0188                     	;# 
   371  0189                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  0013                     _SSPBUF	set	19
   375  0014                     _SSPCON	set	20
   376  0008                     _PORTD	set	8
   377  0007                     _PORTCbits	set	7
   378  0063                     _SSPIF	set	99
   379  005E                     _PEIE	set	94
   380  005F                     _GIE	set	95
   381  0091                     _SSPCON2bits	set	145
   382  0087                     _TRISCbits	set	135
   383  0094                     _SSPSTAT	set	148
   384  0093                     _SSPADD	set	147
   385  0091                     _SSPCON2	set	145
   386  0088                     _TRISD	set	136
   387  0463                     _SSPIE	set	1123
   388  043C                     _TRISC4	set	1084
   389  043B                     _TRISC3	set	1083
   390  0439                     _TRISC1	set	1081
   391  0438                     _TRISC0	set	1080
   392                           
   393                           	psect	strings
   394  0003                     __pstrings:	
   395  0003                     stringtab:	
   396  0003                     __stringtab:	
   397  0003                     stringcode:	
   398                           ;	String table - string pointers are 1 byte each
   399                           
   400  0003                     stringdir:	
   401  0003  3000               	movlw	high stringdir
   402  0004  008A               	movwf	10
   403  0005  0804               	movf	4,w
   404  0006  0A84               	incf	4,f
   405  0007  0782               	addwf	2,f
   406  0008                     __stringbase:	
   407  0008  3400               	retlw	0
   408  0009                     __end_of__stringtab:	
   409  0009                     STR_1:	
   410  0009  3453               	retlw	83	;'S'
   411  000A  3431               	retlw	49	;'1'
   412  000B  343A               	retlw	58	;':'
   413  000C  3420               	retlw	32	;' '
   414  000D  3420               	retlw	32	;' '
   415  000E  3453               	retlw	83	;'S'
   416  000F  3432               	retlw	50	;'2'
   417  0010  343A               	retlw	58	;':'
   418  0011  3400               	retlw	0
   419  0012                     STR_2:	
   420  0012  3430               	retlw	48	;'0'
   421  0013  3478               	retlw	120	;'x'
   422  0014  3400               	retlw	0
   423                           
   424                           ; #config settings
   425  0000                     
   426                           	psect	cinit
   427  07EB                     start_initialization:	
   428  07EB                     __initialization:	
   429                           
   430                           ; Clear objects allocated to BANK0
   431  07EB  1283               	bcf	3,5	;RP0=0, select bank0
   432  07EC  1303               	bcf	3,6	;RP1=0, select bank0
   433  07ED  01A0               	clrf	__pbssBANK0& (0+127)
   434  07EE  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   435  07EF  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   436  07F0  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   437  07F1  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   438  07F2  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   439  07F3  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   440  07F4  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   441  07F5  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   442  07F6  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   443  07F7  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   444  07F8  01AB               	clrf	(__pbssBANK0+11)& (0+127)
   445  07F9  01AC               	clrf	(__pbssBANK0+12)& (0+127)
   446  07FA  01AD               	clrf	(__pbssBANK0+13)& (0+127)
   447  07FB  01AE               	clrf	(__pbssBANK0+14)& (0+127)
   448  07FC                     end_of_initialization:	
   449                           ;End of C runtime variable initialization code
   450                           
   451  07FC                     __end_of__initialization:	
   452  07FC  0183               	clrf	3
   453  07FD  120A  118A  2EE1   	ljmp	_main	;jump to C main() function
   454                           
   455                           	psect	bssBANK0
   456  0020                     __pbssBANK0:	
   457  0020                     mapear@F1338:	
   458  0020                     	ds	6
   459  0026                     uint_to_array@F1341:	
   460  0026                     	ds	6
   461  002C                     _voltaje_map:	
   462  002C                     	ds	1
   463  002D                     _contador:	
   464  002D                     	ds	1
   465  002E                     _valorADC:	
   466  002E                     	ds	1
   467                           
   468                           	psect	cstackCOMMON
   469  0070                     __pcstackCOMMON:	
   470  0070                     ?_I2C_Master_Start:	
   471  0070                     ??_I2C_Master_Start:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_I2C_Master_Write:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_I2C_Master_Stop:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ??_I2C_Master_Stop:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_LCD_Cmd:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ??_LCD_Cmd:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_LCD_clear:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_LCD_init:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_LCD_Write_Character:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ??_LCD_Write_Character:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_LCD_Write_String:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_uint_to_char:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ??_uint_to_char:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_main:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_I2C_Master_Wait:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ??_I2C_Master_Wait:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?_I2C_Master_Read:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?___wmul:	
   523                           ; 2 bytes @ 0x0
   524                           
   525  0070                     ?___lldiv:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0070                     I2C_Master_Write@d:	
   529                           ; 4 bytes @ 0x0
   530                           
   531  0070                     I2C_Master_Read@a:	
   532                           ; 2 bytes @ 0x0
   533                           
   534  0070                     ___wmul@multiplier:	
   535                           ; 2 bytes @ 0x0
   536                           
   537  0070                     ___lldiv@divisor:	
   538                           ; 2 bytes @ 0x0
   539                           
   540                           
   541                           ; 4 bytes @ 0x0
   542  0070                     	ds	1
   543  0071                     LCD_Write_Character@caracter:	
   544                           
   545                           ; 1 bytes @ 0x1
   546  0071                     	ds	1
   547  0072                     ??_I2C_Master_Write:	
   548  0072                     ??_I2C_Master_Read:	
   549                           ; 1 bytes @ 0x2
   550                           
   551  0072                     ??_LCD_Write_String:	
   552                           ; 1 bytes @ 0x2
   553                           
   554  0072                     LCD_Cmd@comando:	
   555                           ; 1 bytes @ 0x2
   556                           
   557  0072                     uint_to_char@numero:	
   558                           ; 1 bytes @ 0x2
   559                           
   560  0072                     LCD_Write_String@n:	
   561                           ; 1 bytes @ 0x2
   562                           
   563  0072                     ___wmul@multiplicand:	
   564                           ; 2 bytes @ 0x2
   565                           
   566                           
   567                           ; 2 bytes @ 0x2
   568  0072                     	ds	1
   569  0073                     ??_LCD_clear:	
   570  0073                     ??_LCD_init:	
   571                           ; 1 bytes @ 0x3
   572                           
   573  0073                     ?_LCD_Set_Cursor:	
   574                           ; 1 bytes @ 0x3
   575                           
   576  0073                     LCD_Set_Cursor@columna:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0073                     uint_to_char@numChr:	
   580                           ; 1 bytes @ 0x3
   581                           
   582                           
   583                           ; 1 bytes @ 0x3
   584  0073                     	ds	1
   585  0074                     ??_LCD_Set_Cursor:	
   586  0074                     ??___wmul:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     LCD_Write_String@a:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     I2C_Master_Read@temp:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     ___wmul@product:	
   596                           ; 2 bytes @ 0x4
   597                           
   598  0074                     ___lldiv@dividend:	
   599                           ; 2 bytes @ 0x4
   600                           
   601                           
   602                           ; 4 bytes @ 0x4
   603  0074                     	ds	2
   604  0076                     ?_mapear:	
   605  0076                     LCD_Set_Cursor@linea:	
   606                           ; 1 bytes @ 0x6
   607                           
   608  0076                     mapear@limReal:	
   609                           ; 1 bytes @ 0x6
   610                           
   611                           
   612                           ; 1 bytes @ 0x6
   613  0076                     	ds	1
   614  0077                     LCD_Set_Cursor@corrimiento:	
   615  0077                     mapear@limSup:	
   616                           ; 1 bytes @ 0x7
   617                           
   618                           
   619                           ; 1 bytes @ 0x7
   620  0077                     	ds	1
   621  0078                     ??_mapear:	
   622  0078                     ??___lldiv:	
   623                           ; 1 bytes @ 0x8
   624                           
   625                           
   626                           ; 1 bytes @ 0x8
   627  0078                     	ds	1
   628  0079                     ___lldiv@quotient:	
   629                           
   630                           ; 4 bytes @ 0x9
   631  0079                     	ds	4
   632  007D                     ___lldiv@counter:	
   633                           
   634                           ; 1 bytes @ 0xD
   635  007D                     	ds	1
   636                           
   637                           	psect	cstackBANK0
   638  002F                     __pcstackBANK0:	
   639  002F                     ?_I2C_Master_Init:	
   640  002F                     mapear@valor:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  002F                     I2C_Master_Init@c:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 4 bytes @ 0x0
   648  002F                     	ds	1
   649  0030                     mapear@resultado:	
   650                           
   651                           ; 6 bytes @ 0x1
   652  0030                     	ds	3
   653  0033                     ??_I2C_Master_Init:	
   654                           
   655                           ; 1 bytes @ 0x4
   656  0033                     	ds	3
   657  0036                     mapear@dividendo:	
   658                           
   659                           ; 2 bytes @ 0x7
   660  0036                     	ds	2
   661  0038                     ??_main:	
   662                           
   663                           ; 1 bytes @ 0x9
   664  0038                     	ds	3
   665                           
   666                           	psect	maintext
   667  06E1                     __pmaintext:	
   668 ;;
   669 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   670 ;;
   671 ;; *************** function _main *****************
   672 ;; Defined at:
   673 ;;		line 36 in file "Master_main.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : B00/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   687 ;;      Params:         0       0       0       0       0
   688 ;;      Locals:         0       0       0       0       0
   689 ;;      Temps:          0       3       0       0       0
   690 ;;      Totals:         0       3       0       0       0
   691 ;;Total ram usage:        3 bytes
   692 ;; Hardware stack levels required when called:    2
   693 ;; This function calls:
   694 ;;		_I2C_Master_Init
   695 ;;		_I2C_Master_Read
   696 ;;		_I2C_Master_Start
   697 ;;		_I2C_Master_Stop
   698 ;;		_I2C_Master_Write
   699 ;;		_LCD_Set_Cursor
   700 ;;		_LCD_Write_Character
   701 ;;		_LCD_Write_String
   702 ;;		_LCD_clear
   703 ;;		_LCD_init
   704 ;;		_mapear
   705 ;;		_uint_to_char
   706 ;; This function is called by:
   707 ;;		Startup code after reset
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _main
   713  06E1                     _main:	
   714                           
   715                           ;Master_main.c: 37:     TRISD = 0;
   716                           
   717                           ;incstack = 0
   718                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   719  06E1  1683               	bsf	3,5	;RP0=1, select bank1
   720  06E2  1303               	bcf	3,6	;RP1=0, select bank1
   721  06E3  0188               	clrf	8	;volatile
   722                           
   723                           ;Master_main.c: 38:     TRISC0 = 0;
   724  06E4  1007               	bcf	7,0	;volatile
   725                           
   726                           ;Master_main.c: 39:     TRISC1 = 0;
   727  06E5  1087               	bcf	7,1	;volatile
   728                           
   729                           ;Master_main.c: 40:     LCD_init();
   730  06E6  120A  118A  25DC  120A  118A  	fcall	_LCD_init
   731                           
   732                           ;Master_main.c: 41:     LCD_clear();
   733  06EB  120A  118A  2405  120A  118A  	fcall	_LCD_clear
   734                           
   735                           ;Master_main.c: 42:     LCD_Set_Cursor(1,1);
   736  06F0  01F3               	clrf	LCD_Set_Cursor@columna
   737  06F1  0AF3               	incf	LCD_Set_Cursor@columna,f
   738  06F2  3001               	movlw	1
   739  06F3  120A  118A  248A  120A  118A  	fcall	_LCD_Set_Cursor
   740                           
   741                           ;Master_main.c: 43:     LCD_Write_String("S1:  S2:");
   742  06F8  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   743  06F9  120A  118A  243C  120A  118A  	fcall	_LCD_Write_String
   744                           
   745                           ;Master_main.c: 44:     LCD_Set_Cursor(2,6);
   746  06FE  3006               	movlw	6
   747  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   748  0700  1303               	bcf	3,6	;RP1=0, select bank0
   749  0701  00B8               	movwf	??_main
   750  0702  0838               	movf	??_main,w
   751  0703  00F3               	movwf	LCD_Set_Cursor@columna
   752  0704  3002               	movlw	2
   753  0705  120A  118A  248A  120A  118A  	fcall	_LCD_Set_Cursor
   754                           
   755                           ;Master_main.c: 45:     LCD_Write_String("0x");
   756  070A  300A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   757  070B  120A  118A  243C  120A  118A  	fcall	_LCD_Write_String
   758                           
   759                           ;Master_main.c: 46:     I2C_Master_Init(100000);
   760  0710  3000               	movlw	0
   761  0711  1283               	bcf	3,5	;RP0=0, select bank0
   762  0712  1303               	bcf	3,6	;RP1=0, select bank0
   763  0713  00B2               	movwf	I2C_Master_Init@c+3
   764  0714  3001               	movlw	1
   765  0715  00B1               	movwf	I2C_Master_Init@c+2
   766  0716  3086               	movlw	134
   767  0717  00B0               	movwf	I2C_Master_Init@c+1
   768  0718  30A0               	movlw	160
   769  0719  00AF               	movwf	I2C_Master_Init@c
   770  071A  120A  118A  24E5  120A  118A  	fcall	_I2C_Master_Init
   771  071F                     l1443:	
   772                           
   773                           ;Master_main.c: 49:         I2C_Master_Start();
   774  071F  120A  118A  23D7  120A  118A  	fcall	_I2C_Master_Start
   775                           
   776                           ;Master_main.c: 50:         I2C_Master_Write(0x61);
   777  0724  3061               	movlw	97
   778  0725  00F0               	movwf	I2C_Master_Write@d
   779  0726  3000               	movlw	0
   780  0727  00F1               	movwf	I2C_Master_Write@d+1
   781  0728  120A  118A  23E5  120A  118A  	fcall	_I2C_Master_Write
   782                           
   783                           ;Master_main.c: 51:         valorADC = I2C_Master_Read(0);
   784  072D  3000               	movlw	0
   785  072E  00F0               	movwf	I2C_Master_Read@a
   786  072F  00F1               	movwf	I2C_Master_Read@a+1
   787  0730  120A  118A  245E  120A  118A  	fcall	_I2C_Master_Read
   788  0735  0870               	movf	?_I2C_Master_Read,w
   789  0736  1283               	bcf	3,5	;RP0=0, select bank0
   790  0737  1303               	bcf	3,6	;RP1=0, select bank0
   791  0738  00B8               	movwf	??_main
   792  0739  0838               	movf	??_main,w
   793  073A  00AE               	movwf	_valorADC
   794                           
   795                           ;Master_main.c: 52:         I2C_Master_Stop();
   796  073B  120A  118A  23DE  120A  118A  	fcall	_I2C_Master_Stop
   797                           
   798                           ;Master_main.c: 53:         _delay((unsigned long)((50)*(4000000/4000.0)));
   799  0740  3041               	movlw	65
   800  0741  1283               	bcf	3,5	;RP0=0, select bank0
   801  0742  1303               	bcf	3,6	;RP1=0, select bank0
   802  0743  00B9               	movwf	??_main+1
   803  0744  30ED               	movlw	237
   804  0745  00B8               	movwf	??_main
   805  0746                     u577:	
   806  0746  0BB8               	decfsz	??_main,f
   807  0747  2F46               	goto	u577
   808  0748  0BB9               	decfsz	??_main+1,f
   809  0749  2F46               	goto	u577
   810  074A  2F4B               	nop2
   811                           
   812                           ;Master_main.c: 55:         I2C_Master_Start();
   813  074B  120A  118A  23D7  120A  118A  	fcall	_I2C_Master_Start
   814                           
   815                           ;Master_main.c: 56:         I2C_Master_Write(0x71);
   816  0750  3071               	movlw	113
   817  0751  00F0               	movwf	I2C_Master_Write@d
   818  0752  3000               	movlw	0
   819  0753  00F1               	movwf	I2C_Master_Write@d+1
   820  0754  120A  118A  23E5  120A  118A  	fcall	_I2C_Master_Write
   821                           
   822                           ;Master_main.c: 57:         contador = I2C_Master_Read(0);
   823  0759  3000               	movlw	0
   824  075A  00F0               	movwf	I2C_Master_Read@a
   825  075B  00F1               	movwf	I2C_Master_Read@a+1
   826  075C  120A  118A  245E  120A  118A  	fcall	_I2C_Master_Read
   827  0761  0870               	movf	?_I2C_Master_Read,w
   828  0762  1283               	bcf	3,5	;RP0=0, select bank0
   829  0763  1303               	bcf	3,6	;RP1=0, select bank0
   830  0764  00B8               	movwf	??_main
   831  0765  0838               	movf	??_main,w
   832  0766  00AD               	movwf	_contador
   833                           
   834                           ;Master_main.c: 58:         I2C_Master_Stop();
   835  0767  120A  118A  23DE  120A  118A  	fcall	_I2C_Master_Stop
   836                           
   837                           ;Master_main.c: 59:         _delay((unsigned long)((50)*(4000000/4000.0)));
   838  076C  3041               	movlw	65
   839  076D  1283               	bcf	3,5	;RP0=0, select bank0
   840  076E  1303               	bcf	3,6	;RP1=0, select bank0
   841  076F  00B9               	movwf	??_main+1
   842  0770  30ED               	movlw	237
   843  0771  00B8               	movwf	??_main
   844  0772                     u587:	
   845  0772  0BB8               	decfsz	??_main,f
   846  0773  2F72               	goto	u587
   847  0774  0BB9               	decfsz	??_main+1,f
   848  0775  2F72               	goto	u587
   849  0776  2F77               	nop2
   850                           
   851                           ;Master_main.c: 61:         voltaje_map = mapear(valorADC, 255, 5);
   852  0777  30FF               	movlw	255
   853  0778  1283               	bcf	3,5	;RP0=0, select bank0
   854  0779  1303               	bcf	3,6	;RP1=0, select bank0
   855  077A  00B8               	movwf	??_main
   856  077B  0838               	movf	??_main,w
   857  077C  00F6               	movwf	mapear@limReal
   858  077D  3005               	movlw	5
   859  077E  00B9               	movwf	??_main+1
   860  077F  0839               	movf	??_main+1,w
   861  0780  00F7               	movwf	mapear@limSup
   862  0781  082E               	movf	_valorADC,w
   863  0782  120A  118A  2643  120A  118A  	fcall	_mapear
   864  0787  1283               	bcf	3,5	;RP0=0, select bank0
   865  0788  1303               	bcf	3,6	;RP1=0, select bank0
   866  0789  00BA               	movwf	??_main+2
   867  078A  083A               	movf	??_main+2,w
   868  078B  00AC               	movwf	_voltaje_map
   869                           
   870                           ;Master_main.c: 62:         LCD_Set_Cursor(2,0);
   871  078C  01F3               	clrf	LCD_Set_Cursor@columna
   872  078D  3002               	movlw	2
   873  078E  120A  118A  248A  120A  118A  	fcall	_LCD_Set_Cursor
   874                           
   875                           ;Master_main.c: 63:         LCD_Write_Character(uint_to_char(voltaje_map[0]));
   876  0793  1283               	bcf	3,5	;RP0=0, select bank0
   877  0794  1303               	bcf	3,6	;RP1=0, select bank0
   878  0795  082C               	movf	_voltaje_map,w
   879  0796  0084               	movwf	4
   880  0797  1383               	bcf	3,7	;select IRP bank0
   881  0798  0800               	movf	0,w
   882  0799  120A  118A  2579  120A  118A  	fcall	_uint_to_char
   883  079E  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   884                           
   885                           ;Master_main.c: 64:         LCD_Write_Character('.');
   886  07A3  302E               	movlw	46
   887  07A4  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   888                           
   889                           ;Master_main.c: 65:         LCD_Write_Character(uint_to_char(voltaje_map[1]));
   890  07A9  1283               	bcf	3,5	;RP0=0, select bank0
   891  07AA  1303               	bcf	3,6	;RP1=0, select bank0
   892  07AB  082C               	movf	_voltaje_map,w
   893  07AC  3E02               	addlw	2
   894  07AD  0084               	movwf	4
   895  07AE  1383               	bcf	3,7	;select IRP bank0
   896  07AF  0800               	movf	0,w
   897  07B0  120A  118A  2579  120A  118A  	fcall	_uint_to_char
   898  07B5  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   899                           
   900                           ;Master_main.c: 66:         LCD_Write_Character(uint_to_char(voltaje_map[2]));
   901  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   902  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   903  07BC  082C               	movf	_voltaje_map,w
   904  07BD  3E04               	addlw	4
   905  07BE  0084               	movwf	4
   906  07BF  1383               	bcf	3,7	;select IRP bank0
   907  07C0  0800               	movf	0,w
   908  07C1  120A  118A  2579  120A  118A  	fcall	_uint_to_char
   909  07C6  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   910                           
   911                           ;Master_main.c: 67:         LCD_Write_Character('V');
   912  07CB  3056               	movlw	86
   913  07CC  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   914                           
   915                           ;Master_main.c: 69:         LCD_Set_Cursor(2,8);
   916  07D1  3008               	movlw	8
   917  07D2  1283               	bcf	3,5	;RP0=0, select bank0
   918  07D3  1303               	bcf	3,6	;RP1=0, select bank0
   919  07D4  00B8               	movwf	??_main
   920  07D5  0838               	movf	??_main,w
   921  07D6  00F3               	movwf	LCD_Set_Cursor@columna
   922  07D7  3002               	movlw	2
   923  07D8  120A  118A  248A  120A  118A  	fcall	_LCD_Set_Cursor
   924                           
   925                           ;Master_main.c: 70:         LCD_Write_Character(uint_to_char(contador));
   926  07DD  1283               	bcf	3,5	;RP0=0, select bank0
   927  07DE  1303               	bcf	3,6	;RP1=0, select bank0
   928  07DF  082D               	movf	_contador,w
   929  07E0  120A  118A  2579  120A  118A  	fcall	_uint_to_char
   930  07E5  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
   931  07EA  2F1F               	goto	l1443
   932  07EB                     __end_of_main:	
   933                           
   934                           	psect	text1
   935  0579                     __ptext1:	
   936 ;; *************** function _uint_to_char *****************
   937 ;; Defined at:
   938 ;;		line 116 in file "LCD_8bits.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  numero          1    wreg     unsigned char 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  numero          1    2[COMMON] unsigned char 
   943 ;;  numChr          1    3[COMMON] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      unsigned char 
   946 ;; Registers used:
   947 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   953 ;;      Params:         0       0       0       0       0
   954 ;;      Locals:         2       0       0       0       0
   955 ;;      Temps:          2       0       0       0       0
   956 ;;      Totals:         4       0       0       0       0
   957 ;;Total ram usage:        4 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _uint_to_char
   968  0579                     _uint_to_char:	
   969                           
   970                           ;incstack = 0
   971                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
   972                           ;uint_to_char@numero stored from wreg
   973  0579  00F2               	movwf	uint_to_char@numero
   974                           
   975                           ;LCD_8bits.c: 118:     switch (numero){
   976  057A  2DA0               	goto	l1311
   977  057B                     l1277:	
   978                           
   979                           ;LCD_8bits.c: 120:             numChr = 48;
   980  057B  3030               	movlw	48
   981  057C  2D9C               	goto	L16
   982  057D                     l1279:	
   983                           ;LCD_8bits.c: 121:             break;
   984                           
   985                           
   986                           ;LCD_8bits.c: 123:             numChr = 49;
   987  057D  3031               	movlw	49
   988  057E  2D9C               	goto	L16
   989  057F                     l1281:	
   990                           ;LCD_8bits.c: 124:             break;
   991                           
   992                           
   993                           ;LCD_8bits.c: 126:             numChr = 50;
   994  057F  3032               	movlw	50
   995  0580  2D9C               	goto	L16
   996  0581                     l1283:	
   997                           ;LCD_8bits.c: 127:             break;
   998                           
   999                           
  1000                           ;LCD_8bits.c: 129:             numChr = 51;
  1001  0581  3033               	movlw	51
  1002  0582  2D9C               	goto	L16
  1003  0583                     l1285:	
  1004                           ;LCD_8bits.c: 130:             break;
  1005                           
  1006                           
  1007                           ;LCD_8bits.c: 132:             numChr = 52;
  1008  0583  3034               	movlw	52
  1009  0584  2D9C               	goto	L16
  1010  0585                     l1287:	
  1011                           ;LCD_8bits.c: 133:             break;
  1012                           
  1013                           
  1014                           ;LCD_8bits.c: 135:             numChr = 53;
  1015  0585  3035               	movlw	53
  1016  0586  2D9C               	goto	L16
  1017  0587                     l1289:	
  1018                           ;LCD_8bits.c: 136:             break;
  1019                           
  1020                           
  1021                           ;LCD_8bits.c: 138:             numChr = 54;
  1022  0587  3036               	movlw	54
  1023  0588  2D9C               	goto	L16
  1024  0589                     l1291:	
  1025                           ;LCD_8bits.c: 139:             break;
  1026                           
  1027                           
  1028                           ;LCD_8bits.c: 141:             numChr = 55;
  1029  0589  3037               	movlw	55
  1030  058A  2D9C               	goto	L16
  1031  058B                     l1293:	
  1032                           ;LCD_8bits.c: 142:             break;
  1033                           
  1034                           
  1035                           ;LCD_8bits.c: 144:             numChr = 56;
  1036  058B  3038               	movlw	56
  1037  058C  2D9C               	goto	L16
  1038  058D                     l1295:	
  1039                           ;LCD_8bits.c: 145:             break;
  1040                           
  1041                           
  1042                           ;LCD_8bits.c: 147:             numChr = 57;
  1043  058D  3039               	movlw	57
  1044  058E  2D9C               	goto	L16
  1045  058F                     l1297:	
  1046                           ;LCD_8bits.c: 148:             break;
  1047                           
  1048                           
  1049                           ;LCD_8bits.c: 150:             numChr = 65;
  1050  058F  3041               	movlw	65
  1051  0590  2D9C               	goto	L16
  1052  0591                     l1299:	
  1053                           ;LCD_8bits.c: 151:             break;
  1054                           
  1055                           
  1056                           ;LCD_8bits.c: 153:             numChr = 66;
  1057  0591  3042               	movlw	66
  1058  0592  2D9C               	goto	L16
  1059  0593                     l1301:	
  1060                           ;LCD_8bits.c: 154:             break;
  1061                           
  1062                           
  1063                           ;LCD_8bits.c: 156:             numChr = 67;
  1064  0593  3043               	movlw	67
  1065  0594  2D9C               	goto	L16
  1066  0595                     l1303:	
  1067                           ;LCD_8bits.c: 157:             break;
  1068                           
  1069                           
  1070                           ;LCD_8bits.c: 159:             numChr = 68;
  1071  0595  3044               	movlw	68
  1072  0596  2D9C               	goto	L16
  1073  0597                     l1305:	
  1074                           ;LCD_8bits.c: 160:             break;
  1075                           
  1076                           
  1077                           ;LCD_8bits.c: 162:             numChr = 69;
  1078  0597  3045               	movlw	69
  1079  0598  2D9C               	goto	L16
  1080  0599                     l1307:	
  1081                           ;LCD_8bits.c: 163:             break;
  1082                           
  1083                           
  1084                           ;LCD_8bits.c: 165:             numChr = 70;
  1085  0599  3046               	movlw	70
  1086  059A  2D9C               	goto	L16
  1087  059B                     l1309:	
  1088                           ;LCD_8bits.c: 166:             break;
  1089                           
  1090                           
  1091                           ;LCD_8bits.c: 168:             numChr = 214;
  1092  059B  30D6               	movlw	214
  1093  059C                     L16:	
  1094  059C  00F0               	movwf	??_uint_to_char
  1095  059D  0870               	movf	??_uint_to_char,w
  1096  059E  00F3               	movwf	uint_to_char@numChr
  1097                           
  1098                           ;LCD_8bits.c: 169:     }
  1099  059F  2DDA               	goto	l1313
  1100  05A0                     l1311:	
  1101  05A0  0872               	movf	uint_to_char@numero,w
  1102  05A1  00F0               	movwf	??_uint_to_char
  1103  05A2  01F1               	clrf	??_uint_to_char+1
  1104                           
  1105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1106                           ; Switch size 1, requested type "simple"
  1107                           ; Number of cases is 1, Range of values is 0 to 0
  1108                           ; switch strategies available:
  1109                           ; Name         Instructions Cycles
  1110                           ; simple_byte            4     3 (average)
  1111                           ; direct_byte           11     8 (fixed)
  1112                           ; jumptable            260     6 (fixed)
  1113                           ;	Chosen strategy is simple_byte
  1114  05A3  0871               	movf	??_uint_to_char+1,w
  1115  05A4  3A00               	xorlw	0	; case 0
  1116  05A5  1903               	skipnz
  1117  05A6  2DA8               	goto	l1569
  1118  05A7  2D9B               	goto	l1309
  1119  05A8                     l1569:	
  1120                           
  1121                           ; Switch size 1, requested type "simple"
  1122                           ; Number of cases is 16, Range of values is 0 to 15
  1123                           ; switch strategies available:
  1124                           ; Name         Instructions Cycles
  1125                           ; simple_byte           49    25 (average)
  1126                           ; direct_byte           56     8 (fixed)
  1127                           ; jumptable            260     6 (fixed)
  1128                           ;	Chosen strategy is simple_byte
  1129  05A8  0870               	movf	??_uint_to_char,w
  1130  05A9  3A00               	xorlw	0	; case 0
  1131  05AA  1903               	skipnz
  1132  05AB  2D7B               	goto	l1277
  1133  05AC  3A01               	xorlw	1	; case 1
  1134  05AD  1903               	skipnz
  1135  05AE  2D7D               	goto	l1279
  1136  05AF  3A03               	xorlw	3	; case 2
  1137  05B0  1903               	skipnz
  1138  05B1  2D7F               	goto	l1281
  1139  05B2  3A01               	xorlw	1	; case 3
  1140  05B3  1903               	skipnz
  1141  05B4  2D81               	goto	l1283
  1142  05B5  3A07               	xorlw	7	; case 4
  1143  05B6  1903               	skipnz
  1144  05B7  2D83               	goto	l1285
  1145  05B8  3A01               	xorlw	1	; case 5
  1146  05B9  1903               	skipnz
  1147  05BA  2D85               	goto	l1287
  1148  05BB  3A03               	xorlw	3	; case 6
  1149  05BC  1903               	skipnz
  1150  05BD  2D87               	goto	l1289
  1151  05BE  3A01               	xorlw	1	; case 7
  1152  05BF  1903               	skipnz
  1153  05C0  2D89               	goto	l1291
  1154  05C1  3A0F               	xorlw	15	; case 8
  1155  05C2  1903               	skipnz
  1156  05C3  2D8B               	goto	l1293
  1157  05C4  3A01               	xorlw	1	; case 9
  1158  05C5  1903               	skipnz
  1159  05C6  2D8D               	goto	l1295
  1160  05C7  3A03               	xorlw	3	; case 10
  1161  05C8  1903               	skipnz
  1162  05C9  2D8F               	goto	l1297
  1163  05CA  3A01               	xorlw	1	; case 11
  1164  05CB  1903               	skipnz
  1165  05CC  2D91               	goto	l1299
  1166  05CD  3A07               	xorlw	7	; case 12
  1167  05CE  1903               	skipnz
  1168  05CF  2D93               	goto	l1301
  1169  05D0  3A01               	xorlw	1	; case 13
  1170  05D1  1903               	skipnz
  1171  05D2  2D95               	goto	l1303
  1172  05D3  3A03               	xorlw	3	; case 14
  1173  05D4  1903               	skipnz
  1174  05D5  2D97               	goto	l1305
  1175  05D6  3A01               	xorlw	1	; case 15
  1176  05D7  1903               	skipnz
  1177  05D8  2D99               	goto	l1307
  1178  05D9  2D9B               	goto	l1309
  1179  05DA                     l1313:	
  1180                           
  1181                           ;LCD_8bits.c: 170:     return(numChr);
  1182  05DA  0873               	movf	uint_to_char@numChr,w
  1183  05DB  0008               	return
  1184  05DC                     __end_of_uint_to_char:	
  1185                           
  1186                           	psect	text2
  1187  0643                     __ptext2:	
  1188 ;; *************** function _mapear *****************
  1189 ;; Defined at:
  1190 ;;		line 77 in file "Master_main.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  valor           1    wreg     unsigned char 
  1193 ;;  limReal         1    6[COMMON] unsigned char 
  1194 ;;  limSup          1    7[COMMON] unsigned char 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  valor           1    0[BANK0 ] unsigned char 
  1197 ;;  resultado       6    1[BANK0 ] unsigned int [3]
  1198 ;;  dividendo       2    7[BANK0 ] unsigned int 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      PTR unsigned int 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         2       0       0       0       0
  1209 ;;      Locals:         0       9       0       0       0
  1210 ;;      Temps:          4       0       0       0       0
  1211 ;;      Totals:         6       9       0       0       0
  1212 ;;Total ram usage:       15 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    1
  1215 ;; This function calls:
  1216 ;;		___wmul
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           
  1223                           ;psect for function _mapear
  1224  0643                     _mapear:	
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1228                           ;mapear@valor stored from wreg
  1229  0643  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0644  1303               	bcf	3,6	;RP1=0, select bank0
  1231  0645  00AF               	movwf	mapear@valor
  1232                           
  1233                           ;Master_main.c: 78:     uint16_t resultado[3] = {0,0,0};
  1234  0646  3030               	movlw	mapear@resultado& (0+255)
  1235  0647  0084               	movwf	4
  1236  0648  3006               	movlw	6
  1237  0649  00FF               	movwf	127
  1238  064A                     u400:	
  1239  064A  1383               	bcf	3,7	;select IRP bank0
  1240  064B  0180               	clrf	0
  1241  064C  0A84               	incf	4,f
  1242  064D  0BFF               	decfsz	127,f
  1243  064E  2E4A               	goto	u400
  1244                           
  1245                           ;Master_main.c: 79:     uint16_t dividendo = valor*limSup;
  1246  064F  082F               	movf	mapear@valor,w
  1247  0650  00F8               	movwf	??_mapear
  1248  0651  01F9               	clrf	??_mapear+1
  1249  0652  0878               	movf	??_mapear,w
  1250  0653  00F0               	movwf	___wmul@multiplier
  1251  0654  0879               	movf	??_mapear+1,w
  1252  0655  00F1               	movwf	___wmul@multiplier+1
  1253  0656  0877               	movf	mapear@limSup,w
  1254  0657  00FA               	movwf	??_mapear+2
  1255  0658  01FB               	clrf	??_mapear+3
  1256  0659  087A               	movf	??_mapear+2,w
  1257  065A  00F2               	movwf	___wmul@multiplicand
  1258  065B  087B               	movf	??_mapear+3,w
  1259  065C  00F3               	movwf	___wmul@multiplicand+1
  1260  065D  120A  118A  241B  120A  118A  	fcall	___wmul
  1261  0662  0871               	movf	?___wmul+1,w
  1262  0663  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0664  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0665  00B7               	movwf	mapear@dividendo+1
  1265  0666  0870               	movf	?___wmul,w
  1266  0667  00B6               	movwf	mapear@dividendo
  1267  0668                     l1367:	
  1268                           ;Master_main.c: 80:     while (limReal <= dividendo){
  1269                           
  1270                           
  1271                           ;Master_main.c: 80:     while (limReal <= dividendo){
  1272  0668  0876               	movf	mapear@limReal,w
  1273  0669  00F8               	movwf	??_mapear
  1274  066A  01F9               	clrf	??_mapear+1
  1275  066B  0879               	movf	??_mapear+1,w
  1276  066C  0237               	subwf	mapear@dividendo+1,w
  1277  066D  1D03               	skipz
  1278  066E  2E71               	goto	u415
  1279  066F  0878               	movf	??_mapear,w
  1280  0670  0236               	subwf	mapear@dividendo,w
  1281  0671                     u415:	
  1282  0671  1C03               	btfss	3,0
  1283  0672  2E83               	goto	l1369
  1284                           
  1285                           ;Master_main.c: 81:         resultado[0] = resultado[0] + 1;
  1286  0673  0830               	movf	mapear@resultado,w
  1287  0674  3E01               	addlw	1
  1288  0675  00B0               	movwf	mapear@resultado
  1289  0676  0831               	movf	mapear@resultado+1,w
  1290  0677  1803               	skipnc
  1291  0678  3E01               	addlw	1
  1292  0679  3E00               	addlw	0
  1293  067A  00B1               	movwf	mapear@resultado+1
  1294                           
  1295                           ;Master_main.c: 82:         dividendo = dividendo - limReal;
  1296  067B  0876               	movf	mapear@limReal,w
  1297  067C  0236               	subwf	mapear@dividendo,w
  1298  067D  00B6               	movwf	mapear@dividendo
  1299  067E  0837               	movf	mapear@dividendo+1,w
  1300  067F  1C03               	skipc
  1301  0680  0337               	decf	mapear@dividendo+1,w
  1302  0681  00B7               	movwf	mapear@dividendo+1
  1303  0682  2E68               	goto	l1367
  1304  0683                     l1369:	
  1305                           
  1306                           ;Master_main.c: 84:     dividendo = dividendo *10;
  1307  0683  0837               	movf	mapear@dividendo+1,w
  1308  0684  00F1               	movwf	___wmul@multiplier+1
  1309  0685  0836               	movf	mapear@dividendo,w
  1310  0686  00F0               	movwf	___wmul@multiplier
  1311  0687  300A               	movlw	10
  1312  0688  00F2               	movwf	___wmul@multiplicand
  1313  0689  3000               	movlw	0
  1314  068A  00F3               	movwf	___wmul@multiplicand+1
  1315  068B  120A  118A  241B  120A  118A  	fcall	___wmul
  1316  0690  0871               	movf	?___wmul+1,w
  1317  0691  1283               	bcf	3,5	;RP0=0, select bank0
  1318  0692  1303               	bcf	3,6	;RP1=0, select bank0
  1319  0693  00B7               	movwf	mapear@dividendo+1
  1320  0694  0870               	movf	?___wmul,w
  1321  0695  00B6               	movwf	mapear@dividendo
  1322  0696                     l1373:	
  1323                           ;Master_main.c: 85:     while (limReal <= dividendo){
  1324                           
  1325                           
  1326                           ;Master_main.c: 85:     while (limReal <= dividendo){
  1327  0696  0876               	movf	mapear@limReal,w
  1328  0697  00F8               	movwf	??_mapear
  1329  0698  01F9               	clrf	??_mapear+1
  1330  0699  0879               	movf	??_mapear+1,w
  1331  069A  0237               	subwf	mapear@dividendo+1,w
  1332  069B  1D03               	skipz
  1333  069C  2E9F               	goto	u425
  1334  069D  0878               	movf	??_mapear,w
  1335  069E  0236               	subwf	mapear@dividendo,w
  1336  069F                     u425:	
  1337  069F  1C03               	btfss	3,0
  1338  06A0  2EB1               	goto	l1375
  1339                           
  1340                           ;Master_main.c: 86:         resultado[1] = resultado[1] +1;
  1341  06A1  0832               	movf	mapear@resultado+2,w
  1342  06A2  3E01               	addlw	1
  1343  06A3  00B2               	movwf	mapear@resultado+2
  1344  06A4  0833               	movf	mapear@resultado+3,w
  1345  06A5  1803               	skipnc
  1346  06A6  3E01               	addlw	1
  1347  06A7  3E00               	addlw	0
  1348  06A8  00B3               	movwf	mapear@resultado+3
  1349                           
  1350                           ;Master_main.c: 87:         dividendo = dividendo - limReal;
  1351  06A9  0876               	movf	mapear@limReal,w
  1352  06AA  0236               	subwf	mapear@dividendo,w
  1353  06AB  00B6               	movwf	mapear@dividendo
  1354  06AC  0837               	movf	mapear@dividendo+1,w
  1355  06AD  1C03               	skipc
  1356  06AE  0337               	decf	mapear@dividendo+1,w
  1357  06AF  00B7               	movwf	mapear@dividendo+1
  1358  06B0  2E96               	goto	l1373
  1359  06B1                     l1375:	
  1360                           
  1361                           ;Master_main.c: 89:     dividendo = dividendo *10;
  1362  06B1  0837               	movf	mapear@dividendo+1,w
  1363  06B2  00F1               	movwf	___wmul@multiplier+1
  1364  06B3  0836               	movf	mapear@dividendo,w
  1365  06B4  00F0               	movwf	___wmul@multiplier
  1366  06B5  300A               	movlw	10
  1367  06B6  00F2               	movwf	___wmul@multiplicand
  1368  06B7  3000               	movlw	0
  1369  06B8  00F3               	movwf	___wmul@multiplicand+1
  1370  06B9  120A  118A  241B  120A  118A  	fcall	___wmul
  1371  06BE  0871               	movf	?___wmul+1,w
  1372  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  1373  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  1374  06C1  00B7               	movwf	mapear@dividendo+1
  1375  06C2  0870               	movf	?___wmul,w
  1376  06C3  00B6               	movwf	mapear@dividendo
  1377  06C4                     l1379:	
  1378                           ;Master_main.c: 90:     while (limReal <= dividendo){
  1379                           
  1380                           
  1381                           ;Master_main.c: 90:     while (limReal <= dividendo){
  1382  06C4  0876               	movf	mapear@limReal,w
  1383  06C5  00F8               	movwf	??_mapear
  1384  06C6  01F9               	clrf	??_mapear+1
  1385  06C7  0879               	movf	??_mapear+1,w
  1386  06C8  0237               	subwf	mapear@dividendo+1,w
  1387  06C9  1D03               	skipz
  1388  06CA  2ECD               	goto	u435
  1389  06CB  0878               	movf	??_mapear,w
  1390  06CC  0236               	subwf	mapear@dividendo,w
  1391  06CD                     u435:	
  1392  06CD  1C03               	btfss	3,0
  1393  06CE  2EDF               	goto	l1381
  1394                           
  1395                           ;Master_main.c: 91:         resultado[2] = resultado[2] +1;
  1396  06CF  0834               	movf	mapear@resultado+4,w
  1397  06D0  3E01               	addlw	1
  1398  06D1  00B4               	movwf	mapear@resultado+4
  1399  06D2  0835               	movf	mapear@resultado+5,w
  1400  06D3  1803               	skipnc
  1401  06D4  3E01               	addlw	1
  1402  06D5  3E00               	addlw	0
  1403  06D6  00B5               	movwf	mapear@resultado+5
  1404                           
  1405                           ;Master_main.c: 92:         dividendo = dividendo - limReal;
  1406  06D7  0876               	movf	mapear@limReal,w
  1407  06D8  0236               	subwf	mapear@dividendo,w
  1408  06D9  00B6               	movwf	mapear@dividendo
  1409  06DA  0837               	movf	mapear@dividendo+1,w
  1410  06DB  1C03               	skipc
  1411  06DC  0337               	decf	mapear@dividendo+1,w
  1412  06DD  00B7               	movwf	mapear@dividendo+1
  1413  06DE  2EC4               	goto	l1379
  1414  06DF                     l1381:	
  1415                           
  1416                           ;Master_main.c: 95:     return resultado;
  1417  06DF  3030               	movlw	(low (mapear@resultado| 0))& (0+255)
  1418  06E0  0008               	return
  1419  06E1                     __end_of_mapear:	
  1420                           
  1421                           	psect	text3
  1422  041B                     __ptext3:	
  1423 ;; *************** function ___wmul *****************
  1424 ;; Defined at:
  1425 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  multiplier      2    0[COMMON] unsigned int 
  1428 ;;  multiplicand    2    2[COMMON] unsigned int 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  product         2    4[COMMON] unsigned int 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  2    0[COMMON] unsigned int 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         4       0       0       0       0
  1441 ;;      Locals:         2       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0
  1443 ;;      Totals:         6       0       0       0       0
  1444 ;;Total ram usage:        6 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_mapear
  1450 ;;		_uint_to_array
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function ___wmul
  1456  041B                     ___wmul:	
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1460  041B  01F4               	clrf	___wmul@product
  1461  041C  01F5               	clrf	___wmul@product+1
  1462  041D                     l1185:	
  1463  041D  1C70               	btfss	___wmul@multiplier,0
  1464  041E  2C25               	goto	l281
  1465  041F  0872               	movf	___wmul@multiplicand,w
  1466  0420  07F4               	addwf	___wmul@product,f
  1467  0421  1803               	skipnc
  1468  0422  0AF5               	incf	___wmul@product+1,f
  1469  0423  0873               	movf	___wmul@multiplicand+1,w
  1470  0424  07F5               	addwf	___wmul@product+1,f
  1471  0425                     l281:	
  1472  0425  3001               	movlw	1
  1473  0426                     u275:	
  1474  0426  1003               	clrc
  1475  0427  0DF2               	rlf	___wmul@multiplicand,f
  1476  0428  0DF3               	rlf	___wmul@multiplicand+1,f
  1477  0429  3EFF               	addlw	-1
  1478  042A  1D03               	skipz
  1479  042B  2C26               	goto	u275
  1480  042C  3001               	movlw	1
  1481  042D                     u285:	
  1482  042D  1003               	clrc
  1483  042E  0CF1               	rrf	___wmul@multiplier+1,f
  1484  042F  0CF0               	rrf	___wmul@multiplier,f
  1485  0430  3EFF               	addlw	-1
  1486  0431  1D03               	skipz
  1487  0432  2C2D               	goto	u285
  1488  0433  0870               	movf	___wmul@multiplier,w
  1489  0434  0471               	iorwf	___wmul@multiplier+1,w
  1490  0435  1D03               	btfss	3,2
  1491  0436  2C1D               	goto	l1185
  1492  0437  0875               	movf	___wmul@product+1,w
  1493  0438  00F1               	movwf	?___wmul+1
  1494  0439  0874               	movf	___wmul@product,w
  1495  043A  00F0               	movwf	?___wmul
  1496  043B  0008               	return
  1497  043C                     __end_of___wmul:	
  1498                           
  1499                           	psect	text4
  1500  05DC                     __ptext4:	
  1501 ;; *************** function _LCD_init *****************
  1502 ;; Defined at:
  1503 ;;		line 44 in file "LCD_8bits.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;		None
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0, pclath, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1517 ;;      Params:         0       0       0       0       0
  1518 ;;      Locals:         0       0       0       0       0
  1519 ;;      Temps:          2       0       0       0       0
  1520 ;;      Totals:         2       0       0       0       0
  1521 ;;Total ram usage:        2 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    1
  1524 ;; This function calls:
  1525 ;;		_LCD_Cmd
  1526 ;; This function is called by:
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _LCD_init
  1533  05DC                     _LCD_init:	
  1534                           
  1535                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1536                           
  1537                           ;incstack = 0
  1538                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1539  05DC  301A               	movlw	26
  1540  05DD  00F4               	movwf	??_LCD_init+1
  1541  05DE  30F8               	movlw	248
  1542  05DF  00F3               	movwf	??_LCD_init
  1543  05E0                     u597:	
  1544  05E0  0BF3               	decfsz	??_LCD_init,f
  1545  05E1  2DE0               	goto	u597
  1546  05E2  0BF4               	decfsz	??_LCD_init+1,f
  1547  05E3  2DE0               	goto	u597
  1548  05E4  0000               	nop
  1549                           
  1550                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  1551  05E5  3030               	movlw	48
  1552  05E6  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1553                           
  1554                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1555  05EB  3007               	movlw	7
  1556  05EC  00F4               	movwf	??_LCD_init+1
  1557  05ED  307D               	movlw	125
  1558  05EE  00F3               	movwf	??_LCD_init
  1559  05EF                     u607:	
  1560  05EF  0BF3               	decfsz	??_LCD_init,f
  1561  05F0  2DEF               	goto	u607
  1562  05F1  0BF4               	decfsz	??_LCD_init+1,f
  1563  05F2  2DEF               	goto	u607
  1564                           
  1565                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  1566  05F3  3030               	movlw	48
  1567  05F4  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1568                           
  1569                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1570  05F9  3021               	movlw	33
  1571  05FA  00F3               	movwf	??_LCD_init
  1572  05FB                     u617:	
  1573  05FB  0BF3               	decfsz	??_LCD_init,f
  1574  05FC  2DFB               	goto	u617
  1575                           
  1576                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  1577  05FD  3030               	movlw	48
  1578  05FE  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1579                           
  1580                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1581  0603  3021               	movlw	33
  1582  0604  00F3               	movwf	??_LCD_init
  1583  0605                     u627:	
  1584  0605  0BF3               	decfsz	??_LCD_init,f
  1585  0606  2E05               	goto	u627
  1586                           
  1587                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  1588  0607  3038               	movlw	56
  1589  0608  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1590                           
  1591                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1592  060D  3011               	movlw	17
  1593  060E  00F3               	movwf	??_LCD_init
  1594  060F                     u637:	
  1595  060F  0BF3               	decfsz	??_LCD_init,f
  1596  0610  2E0F               	goto	u637
  1597  0611  0000               	nop
  1598                           
  1599                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  1600  0612  3008               	movlw	8
  1601  0613  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1602                           
  1603                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1604  0618  3011               	movlw	17
  1605  0619  00F3               	movwf	??_LCD_init
  1606  061A                     u647:	
  1607  061A  0BF3               	decfsz	??_LCD_init,f
  1608  061B  2E1A               	goto	u647
  1609  061C  0000               	nop
  1610                           
  1611                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  1612  061D  3001               	movlw	1
  1613  061E  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1614                           
  1615                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1616  0623  3004               	movlw	4
  1617  0624  00F4               	movwf	??_LCD_init+1
  1618  0625  30E4               	movlw	228
  1619  0626  00F3               	movwf	??_LCD_init
  1620  0627                     u657:	
  1621  0627  0BF3               	decfsz	??_LCD_init,f
  1622  0628  2E27               	goto	u657
  1623  0629  0BF4               	decfsz	??_LCD_init+1,f
  1624  062A  2E27               	goto	u657
  1625  062B  0000               	nop
  1626                           
  1627                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  1628  062C  3006               	movlw	6
  1629  062D  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1630                           
  1631                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1632  0632  3011               	movlw	17
  1633  0633  00F3               	movwf	??_LCD_init
  1634  0634                     u667:	
  1635  0634  0BF3               	decfsz	??_LCD_init,f
  1636  0635  2E34               	goto	u667
  1637  0636  0000               	nop
  1638                           
  1639                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  1640  0637  300C               	movlw	12
  1641  0638  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1642                           
  1643                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1644  063D  3011               	movlw	17
  1645  063E  00F3               	movwf	??_LCD_init
  1646  063F                     u677:	
  1647  063F  0BF3               	decfsz	??_LCD_init,f
  1648  0640  2E3F               	goto	u677
  1649  0641  0000               	nop
  1650  0642  0008               	return
  1651  0643                     __end_of_LCD_init:	
  1652                           
  1653                           	psect	text5
  1654  0405                     __ptext5:	
  1655 ;; *************** function _LCD_clear *****************
  1656 ;; Defined at:
  1657 ;;		line 32 in file "LCD_8bits.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;		None
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0, pclath, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1671 ;;      Params:         0       0       0       0       0
  1672 ;;      Locals:         0       0       0       0       0
  1673 ;;      Temps:          2       0       0       0       0
  1674 ;;      Totals:         2       0       0       0       0
  1675 ;;Total ram usage:        2 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    1
  1678 ;; This function calls:
  1679 ;;		_LCD_Cmd
  1680 ;; This function is called by:
  1681 ;;		_main
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function _LCD_clear
  1687  0405                     _LCD_clear:	
  1688                           
  1689                           ;LCD_8bits.c: 33:     LCD_Cmd(0x00);
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  1693  0405  3000               	movlw	0
  1694  0406  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1695                           
  1696                           ;LCD_8bits.c: 34:     LCD_Cmd(0x01);
  1697  040B  3001               	movlw	1
  1698  040C  120A  118A  24B6  120A  118A  	fcall	_LCD_Cmd
  1699                           
  1700                           ;LCD_8bits.c: 35:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1701  0411  3006               	movlw	6
  1702  0412  00F4               	movwf	??_LCD_clear+1
  1703  0413  3030               	movlw	48
  1704  0414  00F3               	movwf	??_LCD_clear
  1705  0415                     u687:	
  1706  0415  0BF3               	decfsz	??_LCD_clear,f
  1707  0416  2C15               	goto	u687
  1708  0417  0BF4               	decfsz	??_LCD_clear+1,f
  1709  0418  2C15               	goto	u687
  1710  0419  0000               	nop
  1711  041A  0008               	return
  1712  041B                     __end_of_LCD_clear:	
  1713                           
  1714                           	psect	text6
  1715  043C                     __ptext6:	
  1716 ;; *************** function _LCD_Write_String *****************
  1717 ;; Defined at:
  1718 ;;		line 73 in file "LCD_8bits.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  a               1    wreg     PTR unsigned char 
  1721 ;;		 -> STR_2(3), STR_1(9), 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  a               1    4[COMMON] PTR unsigned char 
  1724 ;;		 -> STR_2(3), STR_1(9), 
  1725 ;;  n               2    2[COMMON] int 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  1    wreg      void 
  1728 ;; Registers used:
  1729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1735 ;;      Params:         0       0       0       0       0
  1736 ;;      Locals:         3       0       0       0       0
  1737 ;;      Temps:          0       0       0       0       0
  1738 ;;      Totals:         3       0       0       0       0
  1739 ;;Total ram usage:        3 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    1
  1742 ;; This function calls:
  1743 ;;		_LCD_Write_Character
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           
  1750                           ;psect for function _LCD_Write_String
  1751  043C                     _LCD_Write_String:	
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1755                           ;LCD_Write_String@a stored from wreg
  1756  043C  00F4               	movwf	LCD_Write_String@a
  1757                           
  1758                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  1759  043D  01F2               	clrf	LCD_Write_String@n
  1760  043E  01F3               	clrf	LCD_Write_String@n+1
  1761  043F                     l1255:	
  1762  043F  0872               	movf	LCD_Write_String@n,w
  1763  0440  0774               	addwf	LCD_Write_String@a,w
  1764  0441  0084               	movwf	4
  1765  0442  120A  118A  2003  120A  118A  	fcall	stringdir
  1766  0447  3A00               	xorlw	0
  1767  0448  1903               	btfsc	3,2
  1768  0449  0008               	return
  1769                           
  1770                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  1771  044A  0872               	movf	LCD_Write_String@n,w
  1772  044B  0774               	addwf	LCD_Write_String@a,w
  1773  044C  0084               	movwf	4
  1774  044D  120A  118A  2003  120A  118A  	fcall	stringdir
  1775  0452  120A  118A  23F6  120A  118A  	fcall	_LCD_Write_Character
  1776                           
  1777                           ;LCD_8bits.c: 77:     }
  1778  0457  3001               	movlw	1
  1779  0458  07F2               	addwf	LCD_Write_String@n,f
  1780  0459  1803               	skipnc
  1781  045A  0AF3               	incf	LCD_Write_String@n+1,f
  1782  045B  3000               	movlw	0
  1783  045C  07F3               	addwf	LCD_Write_String@n+1,f
  1784  045D  2C3F               	goto	l1255
  1785  045E                     __end_of_LCD_Write_String:	
  1786                           
  1787                           	psect	text7
  1788  03F6                     __ptext7:	
  1789 ;; *************** function _LCD_Write_Character *****************
  1790 ;; Defined at:
  1791 ;;		line 64 in file "LCD_8bits.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  caracter        1    wreg     unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  caracter        1    1[COMMON] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1805 ;;      Params:         0       0       0       0       0
  1806 ;;      Locals:         1       0       0       0       0
  1807 ;;      Temps:          1       0       0       0       0
  1808 ;;      Totals:         2       0       0       0       0
  1809 ;;Total ram usage:        2 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_LCD_Write_String
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _LCD_Write_Character
  1821  03F6                     _LCD_Write_Character:	
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _LCD_Write_Character: [wreg]
  1825                           ;LCD_Write_Character@caracter stored from wreg
  1826  03F6  00F1               	movwf	LCD_Write_Character@caracter
  1827                           
  1828                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  1829  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  1830  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  1831  03F9  1407               	bsf	7,0	;volatile
  1832                           
  1833                           ;LCD_8bits.c: 67:     PORTD = caracter;
  1834  03FA  0871               	movf	LCD_Write_Character@caracter,w
  1835  03FB  0088               	movwf	8	;volatile
  1836                           
  1837                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  1838  03FC  1487               	bsf	7,1	;volatile
  1839                           
  1840                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1841  03FD  300D               	movlw	13
  1842  03FE  00F0               	movwf	??_LCD_Write_Character
  1843  03FF                     u697:	
  1844  03FF  0BF0               	decfsz	??_LCD_Write_Character,f
  1845  0400  2BFF               	goto	u697
  1846                           
  1847                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  1848  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0402  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0403  1087               	bcf	7,1	;volatile
  1851  0404  0008               	return
  1852  0405                     __end_of_LCD_Write_Character:	
  1853                           
  1854                           	psect	text8
  1855  048A                     __ptext8:	
  1856 ;; *************** function _LCD_Set_Cursor *****************
  1857 ;; Defined at:
  1858 ;;		line 80 in file "LCD_8bits.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  linea           1    wreg     unsigned char 
  1861 ;;  columna         1    3[COMMON] unsigned char 
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  linea           1    6[COMMON] unsigned char 
  1864 ;;  corrimiento     1    7[COMMON] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1874 ;;      Params:         1       0       0       0       0
  1875 ;;      Locals:         2       0       0       0       0
  1876 ;;      Temps:          2       0       0       0       0
  1877 ;;      Totals:         5       0       0       0       0
  1878 ;;Total ram usage:        5 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    1
  1881 ;; This function calls:
  1882 ;;		_LCD_Cmd
  1883 ;; This function is called by:
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           
  1889                           ;psect for function _LCD_Set_Cursor
  1890  048A                     _LCD_Set_Cursor:	
  1891                           
  1892                           ;incstack = 0
  1893                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1894                           ;LCD_Set_Cursor@linea stored from wreg
  1895  048A  00F6               	movwf	LCD_Set_Cursor@linea
  1896                           
  1897                           ;LCD_8bits.c: 82:     switch (linea){
  1898  048B  2CA5               	goto	l1269
  1899  048C                     l1259:	
  1900                           
  1901                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  1902  048C  0873               	movf	LCD_Set_Cursor@columna,w
  1903  048D  3E80               	addlw	128
  1904  048E  00F4               	movwf	??_LCD_Set_Cursor
  1905  048F  0874               	movf	??_LCD_Set_Cursor,w
  1906  0490  00F7               	movwf	LCD_Set_Cursor@corrimiento
  1907                           
  1908                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  1909  0491  0877               	movf	LCD_Set_Cursor@corrimiento,w
  1910  0492  120A  118A  24B6   	fcall	_LCD_Cmd
  1911                           
  1912                           ;LCD_8bits.c: 86:             break;
  1913  0495  0008               	return
  1914  0496                     l1263:	
  1915                           
  1916                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  1917  0496  0873               	movf	LCD_Set_Cursor@columna,w
  1918  0497  3EC0               	addlw	192
  1919  0498  00F4               	movwf	??_LCD_Set_Cursor
  1920  0499  0874               	movf	??_LCD_Set_Cursor,w
  1921  049A  00F7               	movwf	LCD_Set_Cursor@corrimiento
  1922                           
  1923                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  1924  049B  0877               	movf	LCD_Set_Cursor@corrimiento,w
  1925  049C  120A  118A  24B6   	fcall	_LCD_Cmd
  1926                           
  1927                           ;LCD_8bits.c: 90:             break;
  1928  049F  0008               	return
  1929  04A0                     l1267:	
  1930                           
  1931                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  1932  04A0  3080               	movlw	128
  1933  04A1  120A  118A  24B6   	fcall	_LCD_Cmd
  1934                           
  1935                           ;LCD_8bits.c: 93:     }
  1936  04A4  0008               	return
  1937  04A5                     l1269:	
  1938  04A5  0876               	movf	LCD_Set_Cursor@linea,w
  1939  04A6  00F4               	movwf	??_LCD_Set_Cursor
  1940  04A7  01F5               	clrf	??_LCD_Set_Cursor+1
  1941                           
  1942                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1943                           ; Switch size 1, requested type "simple"
  1944                           ; Number of cases is 1, Range of values is 0 to 0
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte            4     3 (average)
  1948                           ; direct_byte           11     8 (fixed)
  1949                           ; jumptable            260     6 (fixed)
  1950                           ;	Chosen strategy is simple_byte
  1951  04A8  0875               	movf	??_LCD_Set_Cursor+1,w
  1952  04A9  3A00               	xorlw	0	; case 0
  1953  04AA  1903               	skipnz
  1954  04AB  2CAD               	goto	l1571
  1955  04AC  2CA0               	goto	l1267
  1956  04AD                     l1571:	
  1957                           
  1958                           ; Switch size 1, requested type "simple"
  1959                           ; Number of cases is 2, Range of values is 1 to 2
  1960                           ; switch strategies available:
  1961                           ; Name         Instructions Cycles
  1962                           ; simple_byte            7     4 (average)
  1963                           ; direct_byte           17    11 (fixed)
  1964                           ; jumptable            263     9 (fixed)
  1965                           ;	Chosen strategy is simple_byte
  1966  04AD  0874               	movf	??_LCD_Set_Cursor,w
  1967  04AE  3A01               	xorlw	1	; case 1
  1968  04AF  1903               	skipnz
  1969  04B0  2C8C               	goto	l1259
  1970  04B1  3A03               	xorlw	3	; case 2
  1971  04B2  1903               	skipnz
  1972  04B3  2C96               	goto	l1263
  1973  04B4  2CA0               	goto	l1267
  1974  04B5  0008               	return
  1975  04B6                     __end_of_LCD_Set_Cursor:	
  1976                           
  1977                           	psect	text9
  1978  04B6                     __ptext9:	
  1979 ;; *************** function _LCD_Cmd *****************
  1980 ;; Defined at:
  1981 ;;		line 21 in file "LCD_8bits.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  comando         1    wreg     unsigned char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  comando         1    2[COMMON] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         0       0       0       0       0
  1996 ;;      Locals:         1       0       0       0       0
  1997 ;;      Temps:          2       0       0       0       0
  1998 ;;      Totals:         3       0       0       0       0
  1999 ;;Total ram usage:        3 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_LCD_clear
  2005 ;;		_LCD_init
  2006 ;;		_LCD_Set_Cursor
  2007 ;;		_LCD_home
  2008 ;;		_LCD_Shift_links
  2009 ;;		_LCD_Shift_rechts
  2010 ;;		_LCD_Cursor_rechts
  2011 ;;		_LCD_Cursor_links
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _LCD_Cmd
  2017  04B6                     _LCD_Cmd:	
  2018                           
  2019                           ;incstack = 0
  2020                           ; Regs used in _LCD_Cmd: [wreg]
  2021                           ;LCD_Cmd@comando stored from wreg
  2022  04B6  00F2               	movwf	LCD_Cmd@comando
  2023                           
  2024                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  2025  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2026  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2027  04B9  1007               	bcf	7,0	;volatile
  2028                           
  2029                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2030  04BA  3007               	movlw	7
  2031  04BB  00F1               	movwf	??_LCD_Cmd+1
  2032  04BC  307D               	movlw	125
  2033  04BD  00F0               	movwf	??_LCD_Cmd
  2034  04BE                     u707:	
  2035  04BE  0BF0               	decfsz	??_LCD_Cmd,f
  2036  04BF  2CBE               	goto	u707
  2037  04C0  0BF1               	decfsz	??_LCD_Cmd+1,f
  2038  04C1  2CBE               	goto	u707
  2039                           
  2040                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  2041  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2042  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2043  04C4  1487               	bsf	7,1	;volatile
  2044                           
  2045                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2046  04C5  3007               	movlw	7
  2047  04C6  00F1               	movwf	??_LCD_Cmd+1
  2048  04C7  307D               	movlw	125
  2049  04C8  00F0               	movwf	??_LCD_Cmd
  2050  04C9                     u717:	
  2051  04C9  0BF0               	decfsz	??_LCD_Cmd,f
  2052  04CA  2CC9               	goto	u717
  2053  04CB  0BF1               	decfsz	??_LCD_Cmd+1,f
  2054  04CC  2CC9               	goto	u717
  2055                           
  2056                           ;LCD_8bits.c: 26:     PORTD = comando;
  2057  04CD  0872               	movf	LCD_Cmd@comando,w
  2058  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2059  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2060  04D0  0088               	movwf	8	;volatile
  2061                           
  2062                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2063  04D1  3007               	movlw	7
  2064  04D2  00F1               	movwf	??_LCD_Cmd+1
  2065  04D3  307D               	movlw	125
  2066  04D4  00F0               	movwf	??_LCD_Cmd
  2067  04D5                     u727:	
  2068  04D5  0BF0               	decfsz	??_LCD_Cmd,f
  2069  04D6  2CD5               	goto	u727
  2070  04D7  0BF1               	decfsz	??_LCD_Cmd+1,f
  2071  04D8  2CD5               	goto	u727
  2072                           
  2073                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  2074  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2075  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2076  04DB  1087               	bcf	7,1	;volatile
  2077                           
  2078                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2079  04DC  3007               	movlw	7
  2080  04DD  00F1               	movwf	??_LCD_Cmd+1
  2081  04DE  307D               	movlw	125
  2082  04DF  00F0               	movwf	??_LCD_Cmd
  2083  04E0                     u737:	
  2084  04E0  0BF0               	decfsz	??_LCD_Cmd,f
  2085  04E1  2CE0               	goto	u737
  2086  04E2  0BF1               	decfsz	??_LCD_Cmd+1,f
  2087  04E3  2CE0               	goto	u737
  2088  04E4  0008               	return
  2089  04E5                     __end_of_LCD_Cmd:	
  2090                           
  2091                           	psect	text10
  2092  03E5                     __ptext10:	
  2093 ;; *************** function _I2C_Master_Write *****************
  2094 ;; Defined at:
  2095 ;;		line 65 in file "I2C.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  d               2    0[COMMON] unsigned int 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      void 
  2102 ;; Registers used:
  2103 ;;		wreg, status,2, status,0, pclath, cstack
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2109 ;;      Params:         2       0       0       0       0
  2110 ;;      Locals:         0       0       0       0       0
  2111 ;;      Temps:          0       0       0       0       0
  2112 ;;      Totals:         2       0       0       0       0
  2113 ;;Total ram usage:        2 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    1
  2116 ;; This function calls:
  2117 ;;		_I2C_Master_Wait
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _I2C_Master_Write
  2125  03E5                     _I2C_Master_Write:	
  2126                           
  2127                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  2131  03E5  120A  118A  23ED   	fcall	_I2C_Master_Wait
  2132                           
  2133                           ;I2C.c: 68:     SSPBUF = d;
  2134  03E8  0870               	movf	I2C_Master_Write@d,w
  2135  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2136  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2137  03EB  0093               	movwf	19	;volatile
  2138  03EC  0008               	return
  2139  03ED                     __end_of_I2C_Master_Write:	
  2140                           
  2141                           	psect	text11
  2142  03DE                     __ptext11:	
  2143 ;; *************** function _I2C_Master_Stop *****************
  2144 ;; Defined at:
  2145 ;;		line 55 in file "I2C.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;		None
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2159 ;;      Params:         0       0       0       0       0
  2160 ;;      Locals:         0       0       0       0       0
  2161 ;;      Temps:          0       0       0       0       0
  2162 ;;      Totals:         0       0       0       0       0
  2163 ;;Total ram usage:        0 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    1
  2166 ;; This function calls:
  2167 ;;		_I2C_Master_Wait
  2168 ;; This function is called by:
  2169 ;;		_main
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           
  2174                           ;psect for function _I2C_Master_Stop
  2175  03DE                     _I2C_Master_Stop:	
  2176                           
  2177                           ;I2C.c: 57:     I2C_Master_Wait();
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  2181  03DE  120A  118A  23ED   	fcall	_I2C_Master_Wait
  2182                           
  2183                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  2184  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  2185  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  2186  03E3  1511               	bsf	17,2	;volatile
  2187  03E4  0008               	return
  2188  03E5                     __end_of_I2C_Master_Stop:	
  2189                           
  2190                           	psect	text12
  2191  03D7                     __ptext12:	
  2192 ;; *************** function _I2C_Master_Start *****************
  2193 ;; Defined at:
  2194 ;;		line 39 in file "I2C.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0, pclath, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2208 ;;      Params:         0       0       0       0       0
  2209 ;;      Locals:         0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0
  2211 ;;      Totals:         0       0       0       0       0
  2212 ;;Total ram usage:        0 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    1
  2215 ;; This function calls:
  2216 ;;		_I2C_Master_Wait
  2217 ;; This function is called by:
  2218 ;;		_main
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           
  2223                           ;psect for function _I2C_Master_Start
  2224  03D7                     _I2C_Master_Start:	
  2225                           
  2226                           ;I2C.c: 41:     I2C_Master_Wait();
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  2230  03D7  120A  118A  23ED   	fcall	_I2C_Master_Wait
  2231                           
  2232                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  2233  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  2234  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  2235  03DC  1411               	bsf	17,0	;volatile
  2236  03DD  0008               	return
  2237  03DE                     __end_of_I2C_Master_Start:	
  2238                           
  2239                           	psect	text13
  2240  045E                     __ptext13:	
  2241 ;; *************** function _I2C_Master_Read *****************
  2242 ;; Defined at:
  2243 ;;		line 74 in file "I2C.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  a               2    0[COMMON] unsigned short 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  temp            2    4[COMMON] unsigned short 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  2    0[COMMON] unsigned short 
  2250 ;; Registers used:
  2251 ;;		wreg, status,2, status,0, pclath, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2257 ;;      Params:         2       0       0       0       0
  2258 ;;      Locals:         2       0       0       0       0
  2259 ;;      Temps:          2       0       0       0       0
  2260 ;;      Totals:         6       0       0       0       0
  2261 ;;Total ram usage:        6 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    1
  2264 ;; This function calls:
  2265 ;;		_I2C_Master_Wait
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           
  2272                           ;psect for function _I2C_Master_Read
  2273  045E                     _I2C_Master_Read:	
  2274                           
  2275                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  2276                           
  2277                           ;incstack = 0
  2278                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  2279  045E  120A  118A  23ED  120A  118A  	fcall	_I2C_Master_Wait
  2280                           
  2281                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  2282  0463  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0464  1303               	bcf	3,6	;RP1=0, select bank1
  2284  0465  1591               	bsf	17,3	;volatile
  2285                           
  2286                           ;I2C.c: 79:     I2C_Master_Wait();
  2287  0466  120A  118A  23ED  120A  118A  	fcall	_I2C_Master_Wait
  2288                           
  2289                           ;I2C.c: 80:     temp = SSPBUF;
  2290  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2291  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2292  046D  0813               	movf	19,w	;volatile
  2293  046E  00F2               	movwf	??_I2C_Master_Read
  2294  046F  01F3               	clrf	??_I2C_Master_Read+1
  2295  0470  0872               	movf	??_I2C_Master_Read,w
  2296  0471  00F4               	movwf	I2C_Master_Read@temp
  2297  0472  0873               	movf	??_I2C_Master_Read+1,w
  2298  0473  00F5               	movwf	I2C_Master_Read@temp+1
  2299                           
  2300                           ;I2C.c: 81:     I2C_Master_Wait();
  2301  0474  120A  118A  23ED  120A  118A  	fcall	_I2C_Master_Wait
  2302                           
  2303                           ;I2C.c: 82:     if(a == 1){
  2304  0479  0370               	decf	I2C_Master_Read@a,w
  2305  047A  0471               	iorwf	I2C_Master_Read@a+1,w
  2306  047B  1D03               	btfss	3,2
  2307  047C  2C81               	goto	l190
  2308                           
  2309                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  2310  047D  1683               	bsf	3,5	;RP0=1, select bank1
  2311  047E  1303               	bcf	3,6	;RP1=0, select bank1
  2312  047F  1291               	bcf	17,5	;volatile
  2313                           
  2314                           ;I2C.c: 84:     }else{
  2315  0480  2C84               	goto	l191
  2316  0481                     l190:	
  2317                           
  2318                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  2319  0481  1683               	bsf	3,5	;RP0=1, select bank1
  2320  0482  1303               	bcf	3,6	;RP1=0, select bank1
  2321  0483  1691               	bsf	17,5	;volatile
  2322  0484                     l191:	
  2323                           ;I2C.c: 86:     }
  2324                           
  2325                           
  2326                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  2327  0484  1611               	bsf	17,4	;volatile
  2328                           
  2329                           ;I2C.c: 88:     return temp;
  2330  0485  0875               	movf	I2C_Master_Read@temp+1,w
  2331  0486  00F1               	movwf	?_I2C_Master_Read+1
  2332  0487  0874               	movf	I2C_Master_Read@temp,w
  2333  0488  00F0               	movwf	?_I2C_Master_Read
  2334  0489  0008               	return
  2335  048A                     __end_of_I2C_Master_Read:	
  2336                           
  2337                           	psect	text14
  2338  03ED                     __ptext14:	
  2339 ;; *************** function _I2C_Master_Wait *****************
  2340 ;; Defined at:
  2341 ;;		line 32 in file "I2C.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2355 ;;      Params:         0       0       0       0       0
  2356 ;;      Locals:         0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0
  2358 ;;      Totals:         0       0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; This function calls:
  2362 ;;		Nothing
  2363 ;; This function is called by:
  2364 ;;		_I2C_Master_Start
  2365 ;;		_I2C_Master_Stop
  2366 ;;		_I2C_Master_Write
  2367 ;;		_I2C_Master_Read
  2368 ;;		_I2C_Master_RepeatedStart
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           
  2373                           ;psect for function _I2C_Master_Wait
  2374  03ED                     _I2C_Master_Wait:	
  2375  03ED                     l172:	
  2376                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  2380                           
  2381  03ED  1683               	bsf	3,5	;RP0=1, select bank1
  2382  03EE  1303               	bcf	3,6	;RP1=0, select bank1
  2383  03EF  1914               	btfsc	20,2	;volatile
  2384  03F0  2BED               	goto	l172
  2385  03F1  0811               	movf	17,w	;volatile
  2386  03F2  391F               	andlw	31
  2387  03F3  1903               	btfsc	3,2
  2388  03F4  0008               	return
  2389  03F5  2BED               	goto	l172
  2390  03F6                     __end_of_I2C_Master_Wait:	
  2391                           
  2392                           	psect	text15
  2393  04E5                     __ptext15:	
  2394 ;; *************** function _I2C_Master_Init *****************
  2395 ;; Defined at:
  2396 ;;		line 16 in file "I2C.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  c               4    0[BANK0 ] const unsigned long 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2410 ;;      Params:         0       4       0       0       0
  2411 ;;      Locals:         0       0       0       0       0
  2412 ;;      Temps:          0       4       0       0       0
  2413 ;;      Totals:         0       8       0       0       0
  2414 ;;Total ram usage:        8 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    1
  2417 ;; This function calls:
  2418 ;;		___lldiv
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _I2C_Master_Init
  2426  04E5                     _I2C_Master_Init:	
  2427                           
  2428                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2432  04E5  3028               	movlw	40
  2433  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2434  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  2435  04E8  0094               	movwf	20	;volatile
  2436                           
  2437                           ;I2C.c: 19:     SSPCON2 = 0;
  2438  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  2439  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  2440  04EB  0191               	clrf	17	;volatile
  2441                           
  2442                           ;I2C.c: 20:     SSPADD = (4000000/(4*c))-1;
  2443  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2444  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2445  04EE  082F               	movf	I2C_Master_Init@c,w
  2446  04EF  00B3               	movwf	??_I2C_Master_Init
  2447  04F0  0830               	movf	I2C_Master_Init@c+1,w
  2448  04F1  00B4               	movwf	??_I2C_Master_Init+1
  2449  04F2  0831               	movf	I2C_Master_Init@c+2,w
  2450  04F3  00B5               	movwf	??_I2C_Master_Init+2
  2451  04F4  0832               	movf	I2C_Master_Init@c+3,w
  2452  04F5  00B6               	movwf	??_I2C_Master_Init+3
  2453  04F6  3002               	movlw	2
  2454  04F7                     u385:	
  2455  04F7  1003               	clrc
  2456  04F8  0DB3               	rlf	??_I2C_Master_Init,f
  2457  04F9  0DB4               	rlf	??_I2C_Master_Init+1,f
  2458  04FA  0DB5               	rlf	??_I2C_Master_Init+2,f
  2459  04FB  0DB6               	rlf	??_I2C_Master_Init+3,f
  2460  04FC  3EFF               	addlw	-1
  2461  04FD  1D03               	skipz
  2462  04FE  2CF7               	goto	u385
  2463  04FF  0836               	movf	??_I2C_Master_Init+3,w
  2464  0500  00F3               	movwf	___lldiv@divisor+3
  2465  0501  0835               	movf	??_I2C_Master_Init+2,w
  2466  0502  00F2               	movwf	___lldiv@divisor+2
  2467  0503  0834               	movf	??_I2C_Master_Init+1,w
  2468  0504  00F1               	movwf	___lldiv@divisor+1
  2469  0505  0833               	movf	??_I2C_Master_Init,w
  2470  0506  00F0               	movwf	___lldiv@divisor
  2471  0507  3000               	movlw	0
  2472  0508  00F7               	movwf	___lldiv@dividend+3
  2473  0509  303D               	movlw	61
  2474  050A  00F6               	movwf	___lldiv@dividend+2
  2475  050B  3009               	movlw	9
  2476  050C  00F5               	movwf	___lldiv@dividend+1
  2477  050D  3000               	movlw	0
  2478  050E  00F4               	movwf	___lldiv@dividend
  2479  050F  120A  118A  251B   	fcall	___lldiv
  2480  0512  0870               	movf	?___lldiv,w
  2481  0513  3EFF               	addlw	255
  2482  0514  1683               	bsf	3,5	;RP0=1, select bank1
  2483  0515  1303               	bcf	3,6	;RP1=0, select bank1
  2484  0516  0093               	movwf	19	;volatile
  2485                           
  2486                           ;I2C.c: 21:     SSPSTAT = 0;
  2487  0517  0194               	clrf	20	;volatile
  2488                           
  2489                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  2490  0518  1587               	bsf	7,3	;volatile
  2491                           
  2492                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  2493  0519  1607               	bsf	7,4	;volatile
  2494  051A  0008               	return
  2495  051B                     __end_of_I2C_Master_Init:	
  2496                           
  2497                           	psect	text16
  2498  051B                     __ptext16:	
  2499 ;; *************** function ___lldiv *****************
  2500 ;; Defined at:
  2501 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  divisor         4    0[COMMON] unsigned long 
  2504 ;;  dividend        4    4[COMMON] unsigned long 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  quotient        4    9[COMMON] unsigned long 
  2507 ;;  counter         1   13[COMMON] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  4    0[COMMON] unsigned long 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2517 ;;      Params:         8       0       0       0       0
  2518 ;;      Locals:         5       0       0       0       0
  2519 ;;      Temps:          1       0       0       0       0
  2520 ;;      Totals:        14       0       0       0       0
  2521 ;;Total ram usage:       14 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_I2C_Master_Init
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           
  2531                           ;psect for function ___lldiv
  2532  051B                     ___lldiv:	
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2536  051B  3000               	movlw	0
  2537  051C  00FC               	movwf	___lldiv@quotient+3
  2538  051D  3000               	movlw	0
  2539  051E  00FB               	movwf	___lldiv@quotient+2
  2540  051F  3000               	movlw	0
  2541  0520  00FA               	movwf	___lldiv@quotient+1
  2542  0521  3000               	movlw	0
  2543  0522  00F9               	movwf	___lldiv@quotient
  2544  0523  0873               	movf	___lldiv@divisor+3,w
  2545  0524  0472               	iorwf	___lldiv@divisor+2,w
  2546  0525  0471               	iorwf	___lldiv@divisor+1,w
  2547  0526  0470               	iorwf	___lldiv@divisor,w
  2548  0527  1903               	skipnz
  2549  0528  2D70               	goto	l1217
  2550  0529  01FD               	clrf	___lldiv@counter
  2551  052A  0AFD               	incf	___lldiv@counter,f
  2552  052B                     l1203:	
  2553  052B  1BF3               	btfsc	___lldiv@divisor+3,7
  2554  052C  2D3B               	goto	l1205
  2555  052D  3001               	movlw	1
  2556  052E  00F8               	movwf	??___lldiv
  2557  052F                     u315:	
  2558  052F  1003               	clrc
  2559  0530  0DF0               	rlf	___lldiv@divisor,f
  2560  0531  0DF1               	rlf	___lldiv@divisor+1,f
  2561  0532  0DF2               	rlf	___lldiv@divisor+2,f
  2562  0533  0DF3               	rlf	___lldiv@divisor+3,f
  2563  0534  0BF8               	decfsz	??___lldiv,f
  2564  0535  2D2F               	goto	u315
  2565  0536  3001               	movlw	1
  2566  0537  00F8               	movwf	??___lldiv
  2567  0538  0878               	movf	??___lldiv,w
  2568  0539  07FD               	addwf	___lldiv@counter,f
  2569  053A  2D2B               	goto	l1203
  2570  053B                     l1205:	
  2571  053B  3001               	movlw	1
  2572  053C  00F8               	movwf	??___lldiv
  2573  053D                     u335:	
  2574  053D  1003               	clrc
  2575  053E  0DF9               	rlf	___lldiv@quotient,f
  2576  053F  0DFA               	rlf	___lldiv@quotient+1,f
  2577  0540  0DFB               	rlf	___lldiv@quotient+2,f
  2578  0541  0DFC               	rlf	___lldiv@quotient+3,f
  2579  0542  0BF8               	decfsz	??___lldiv,f
  2580  0543  2D3D               	goto	u335
  2581  0544  0873               	movf	___lldiv@divisor+3,w
  2582  0545  0277               	subwf	___lldiv@dividend+3,w
  2583  0546  1D03               	skipz
  2584  0547  2D52               	goto	u345
  2585  0548  0872               	movf	___lldiv@divisor+2,w
  2586  0549  0276               	subwf	___lldiv@dividend+2,w
  2587  054A  1D03               	skipz
  2588  054B  2D52               	goto	u345
  2589  054C  0871               	movf	___lldiv@divisor+1,w
  2590  054D  0275               	subwf	___lldiv@dividend+1,w
  2591  054E  1D03               	skipz
  2592  054F  2D52               	goto	u345
  2593  0550  0870               	movf	___lldiv@divisor,w
  2594  0551  0274               	subwf	___lldiv@dividend,w
  2595  0552                     u345:	
  2596  0552  1C03               	skipc
  2597  0553  2D63               	goto	l1213
  2598  0554  0870               	movf	___lldiv@divisor,w
  2599  0555  02F4               	subwf	___lldiv@dividend,f
  2600  0556  0871               	movf	___lldiv@divisor+1,w
  2601  0557  1C03               	skipc
  2602  0558  0F71               	incfsz	___lldiv@divisor+1,w
  2603  0559  02F5               	subwf	___lldiv@dividend+1,f
  2604  055A  0872               	movf	___lldiv@divisor+2,w
  2605  055B  1C03               	skipc
  2606  055C  0F72               	incfsz	___lldiv@divisor+2,w
  2607  055D  02F6               	subwf	___lldiv@dividend+2,f
  2608  055E  0873               	movf	___lldiv@divisor+3,w
  2609  055F  1C03               	skipc
  2610  0560  0F73               	incfsz	___lldiv@divisor+3,w
  2611  0561  02F7               	subwf	___lldiv@dividend+3,f
  2612  0562  1479               	bsf	___lldiv@quotient,0
  2613  0563                     l1213:	
  2614  0563  3001               	movlw	1
  2615  0564                     u355:	
  2616  0564  1003               	clrc
  2617  0565  0CF3               	rrf	___lldiv@divisor+3,f
  2618  0566  0CF2               	rrf	___lldiv@divisor+2,f
  2619  0567  0CF1               	rrf	___lldiv@divisor+1,f
  2620  0568  0CF0               	rrf	___lldiv@divisor,f
  2621  0569  3EFF               	addlw	-1
  2622  056A  1D03               	skipz
  2623  056B  2D64               	goto	u355
  2624  056C  3001               	movlw	1
  2625  056D  02FD               	subwf	___lldiv@counter,f
  2626  056E  1D03               	btfss	3,2
  2627  056F  2D3B               	goto	l1205
  2628  0570                     l1217:	
  2629  0570  087C               	movf	___lldiv@quotient+3,w
  2630  0571  00F3               	movwf	?___lldiv+3
  2631  0572  087B               	movf	___lldiv@quotient+2,w
  2632  0573  00F2               	movwf	?___lldiv+2
  2633  0574  087A               	movf	___lldiv@quotient+1,w
  2634  0575  00F1               	movwf	?___lldiv+1
  2635  0576  0879               	movf	___lldiv@quotient,w
  2636  0577  00F0               	movwf	?___lldiv
  2637  0578  0008               	return
  2638  0579                     __end_of___lldiv:	
  2639  007E                     btemp	set	126	;btemp
  2640  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      27
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    voltaje_map	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(COMMON[6]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 9
		 -> STR_2(CODE[3]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_clear->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_mapear

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3185
                                              9 BANK0      3     3      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                          _LCD_clear
                           _LCD_init
                             _mapear
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      62
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1657
                                              6 COMMON     6     4      2
                                              0 BANK0      9     9      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     178
                                              2 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     439
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     174
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      6     4      2     197
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_clear
     _LCD_Cmd
   _LCD_init
     _LCD_Cmd
   _mapear
     ___wmul
   _uint_to_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      29       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      1B       5       33.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      29      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb 22 16:37:47 2020

                           pc 0002                   __CFG_CP$OFF 0000               mapear@resultado 0030  
                          fsr 0004           ___wmul@multiplicand 0072                           l172 03ED  
                         l190 0481                           l191 0484                           l281 0425  
                         _GIE 005F                           u400 064A                           u315 052F  
                         u335 053D                           u415 0671                           u345 0552  
                         u425 069F                  __CFG_CPD$OFF 0000                           u355 0564  
                         u275 0426                           u435 06CD                           u285 042D  
                         u607 05EF                           u385 04F7                           u617 05FB  
                         u707 04BE                           u627 0605                           u717 04C9  
                         u637 060F                           u727 04D5                           u647 061A  
                         u737 04E0                           u657 0627                           u577 0746  
                         u667 0634                           u587 0772                           u677 063F  
                         u597 05E0                           u687 0415                           u697 03FF  
                _uint_to_char 0579                           fsr0 0004                           indf 0000  
__size_of_LCD_Write_Character 000F               __end_of_LCD_Cmd 04E5                  __CFG_LVP$OFF 0000  
              _LCD_Set_Cursor 048A                          l1203 052B                          l1213 0563  
                        l1205 053B                          l1301 0593                          l1303 0595  
                        l1311 05A0                          l1217 0570                          l1305 0597  
                        l1313 05DA                          l1307 0599                          l1309 059B  
                        l1263 0496                          l1255 043F                          l1185 041D  
                        l1281 057F                          l1267 04A0                          l1259 048C  
                        l1291 0589                          l1283 0581                          l1443 071F  
                        l1269 04A5                          l1381 06DF                          l1373 0696  
                        l1293 058B                          l1285 0583                          l1277 057B  
                        l1375 06B1                          l1367 0668                          l1295 058D  
                        l1287 0585                          l1279 057D                          l1369 0683  
                        l1297 058F                          l1289 0587                          l1571 04AD  
                        l1379 06C4                          l1299 0591                          l1569 05A8  
                        STR_1 0009                          STR_2 0012                          _PEIE 005E  
                __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070                          _main 06E1  
                        btemp 007E                          start 0000            ??_LCD_Write_String 0072  
               __CFG_IESO$OFF 0000            __size_of_LCD_clear 0016                   _voltaje_map 002C  
            ?_I2C_Master_Init 002F              ?_I2C_Master_Read 0070              ?_I2C_Master_Wait 0070  
            ?_I2C_Master_Stop 0070              __end_of_LCD_init 0643                         ?_main 0070  
               __CFG_WDTE$OFF 0000            uint_to_char@numChr 0073               __end_of___lldiv 0579  
          uint_to_char@numero 0072                         _PORTD 0008                         _TRISD 0088  
                       _SSPIE 0463                         _SSPIF 0063                __CFG_FCMEN$OFF 0000  
      __end_of_LCD_Set_Cursor 04B6                   mapear@F1338 0020                __CFG_BOREN$OFF 0000  
                       pclath 000A                         status 0003                         wtemp0 007E  
                 mapear@valor 002F                __CFG_MCLRE$OFF 0000               __initialization 07EB  
                __end_of_main 07EB                        ??_main 0038                     ??_LCD_Cmd 0070  
           ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070             __end_of_LCD_clear 041B  
             ?_LCD_Set_Cursor 0073            ??_I2C_Master_Start 0070            ??_I2C_Master_Write 0072  
                      _SSPADD 0093                        _TRISC0 0438                        _TRISC1 0439  
                      _TRISC3 043B                        _TRISC4 043C            uint_to_array@F1341 0026  
                      _SSPCON 0014                        _SSPBUF 0013   LCD_Write_Character@caracter 0071  
              __CFG_PWRTE$OFF 0000                        ___wmul 041B                     ??___lldiv 0078  
                      _mapear 0643                  mapear@limSup 0077       __end_of__initialization 07FC  
                   ?_LCD_init 0070                __pcstackCOMMON 0070           _LCD_Write_Character 03F6  
        ?_LCD_Write_Character 0070                LCD_Cmd@comando 0072                    __pbssBANK0 0020  
   LCD_Set_Cursor@corrimiento 0077                    ??_LCD_init 0073                    __pmaintext 06E1  
                     ?___wmul 0070                       ?_mapear 0076     __size_of_LCD_Write_String 0022  
                     _LCD_Cmd 04B6         ??_LCD_Write_Character 0070                       _SSPCON2 0091  
                     _SSPSTAT 0094                    __stringtab 0003                       ___lldiv 051B  
             __size_of___wmul 0021               __size_of_mapear 009E              ??_LCD_Set_Cursor 0074  
                     __ptext1 0579                       __ptext2 0643                       __ptext3 041B  
                     __ptext4 05DC                       __ptext5 0405                       __ptext6 043C  
                     __ptext7 03F6                       __ptext8 048A                       __ptext9 04B6  
    __size_of_I2C_Master_Init 0036      __size_of_I2C_Master_Read 002C      __size_of_I2C_Master_Wait 0009  
    __size_of_I2C_Master_Stop 0007                     _LCD_clear 0405          end_of_initialization 07FC  
   __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008               ___lldiv@divisor 0070  
             ___lldiv@counter 007D              I2C_Master_Init@c 002F              I2C_Master_Read@a 0070  
                   _PORTCbits 0007                 mapear@limReal 0076                     _TRISCbits 0087  
                  ?_LCD_clear 0070             LCD_Write_String@a 0074             LCD_Write_String@n 0072  
           __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0073                __end_of___wmul 043C  
            _LCD_Write_String 043C                __end_of_mapear 06E1                 ?_uint_to_char 0070  
         start_initialization 07EB             ??_I2C_Master_Init 0033             ??_I2C_Master_Read 0072  
           ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070      __CFG_FOSC$INTRC_NOCLKOUT 0000  
                    ??___wmul 0074                      ??_mapear 0078                ??_uint_to_char 0070  
                    ?_LCD_Cmd 0070                     ___latbits 0002                 __pcstackBANK0 002F  
                 ??_LCD_clear 0073              _I2C_Master_Start 03D7              _I2C_Master_Write 03E5  
                    ?___lldiv 0070                     __pstrings 0003   __end_of_LCD_Write_Character 0405  
              ___wmul@product 0074                      _LCD_init 05DC                   __stringbase 0008  
           ___wmul@multiplier 0070              __size_of_LCD_Cmd 002F           I2C_Master_Read@temp 0074  
    __end_of_LCD_Write_String 045E          __end_of_uint_to_char 05DC              __size_of___lldiv 005E  
          __end_of__stringtab 0009               _I2C_Master_Init 04E5               _I2C_Master_Read 045E  
             _I2C_Master_Wait 03ED               _I2C_Master_Stop 03DE                      __ptext10 03E5  
                    __ptext11 03DE                      __ptext12 03D7                      __ptext13 045E  
                    __ptext14 03ED                      __ptext15 04E5                      __ptext16 051B  
           __CFG_BOR4V$BOR40V 0000       __size_of_LCD_Set_Cursor 002C                      _contador 002D  
               __size_of_main 010A                      _valorADC 002E           LCD_Set_Cursor@linea 0076  
    __end_of_I2C_Master_Start 03DE      __end_of_I2C_Master_Write 03ED              ___lldiv@dividend 0074  
                   stringcode 0003       __end_of_I2C_Master_Init 051B       __end_of_I2C_Master_Read 048A  
     __end_of_I2C_Master_Wait 03F6       __end_of_I2C_Master_Stop 03E5               mapear@dividendo 0036  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070                      stringdir 0003  
                    stringtab 0003                   _SSPCON2bits 0091         __size_of_uint_to_char 0063  
