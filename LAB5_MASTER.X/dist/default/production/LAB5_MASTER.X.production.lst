

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb 22 16:13:37 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  008F                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  0105                     	;# 
   204  0107                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  010F                     	;# 
   212  0185                     	;# 
   213  0187                     	;# 
   214  0188                     	;# 
   215  0189                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  0105                     	;# 
   282  0107                     	;# 
   283  0108                     	;# 
   284  0109                     	;# 
   285  010C                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0187                     	;# 
   292  0188                     	;# 
   293  0189                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  009F                     	;# 
   359  0105                     	;# 
   360  0107                     	;# 
   361  0108                     	;# 
   362  0109                     	;# 
   363  010C                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  010F                     	;# 
   368  0185                     	;# 
   369  0187                     	;# 
   370  0188                     	;# 
   371  0189                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  0013                     _SSPBUF	set	19
   375  0014                     _SSPCON	set	20
   376  0008                     _PORTD	set	8
   377  0007                     _PORTCbits	set	7
   378  0063                     _SSPIF	set	99
   379  005E                     _PEIE	set	94
   380  005F                     _GIE	set	95
   381  0091                     _SSPCON2bits	set	145
   382  0087                     _TRISCbits	set	135
   383  0094                     _SSPSTAT	set	148
   384  0093                     _SSPADD	set	147
   385  0091                     _SSPCON2	set	145
   386  0088                     _TRISD	set	136
   387  0463                     _SSPIE	set	1123
   388  043C                     _TRISC4	set	1084
   389  043B                     _TRISC3	set	1083
   390  0439                     _TRISC1	set	1081
   391  0438                     _TRISC0	set	1080
   392                           
   393                           	psect	strings
   394  0003                     __pstrings:	
   395  0003                     stringtab:	
   396  0003                     __stringtab:	
   397  0003                     stringcode:	
   398                           ;	String table - string pointers are 1 byte each
   399                           
   400  0003                     stringdir:	
   401  0003  3000               	movlw	high stringdir
   402  0004  008A               	movwf	10
   403  0005  0804               	movf	4,w
   404  0006  0A84               	incf	4,f
   405  0007  0782               	addwf	2,f
   406  0008                     __stringbase:	
   407  0008  3400               	retlw	0
   408  0009                     __end_of__stringtab:	
   409  0009                     STR_1:	
   410  0009  3453               	retlw	83	;'S'
   411  000A  3431               	retlw	49	;'1'
   412  000B  343A               	retlw	58	;':'
   413  000C  3400               	retlw	0
   414                           
   415                           ; #config settings
   416  0000                     
   417                           	psect	cinit
   418  07EC                     start_initialization:	
   419  07EC                     __initialization:	
   420                           
   421                           ; Clear objects allocated to BANK0
   422  07EC  1283               	bcf	3,5	;RP0=0, select bank0
   423  07ED  1303               	bcf	3,6	;RP1=0, select bank0
   424  07EE  01A0               	clrf	__pbssBANK0& (0+127)
   425  07EF  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   426  07F0  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   427  07F1  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   428  07F2  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   429  07F3  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   430  07F4  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   431  07F5  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   432  07F6  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   433  07F7  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   434  07F8  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   435  07F9  01AB               	clrf	(__pbssBANK0+11)& (0+127)
   436  07FA  01AC               	clrf	(__pbssBANK0+12)& (0+127)
   437  07FB  01AD               	clrf	(__pbssBANK0+13)& (0+127)
   438  07FC                     end_of_initialization:	
   439                           ;End of C runtime variable initialization code
   440                           
   441  07FC                     __end_of__initialization:	
   442  07FC  0183               	clrf	3
   443  07FD  120A  118A  2F3A   	ljmp	_main	;jump to C main() function
   444                           
   445                           	psect	bssBANK0
   446  0020                     __pbssBANK0:	
   447  0020                     mapear@F1337:	
   448  0020                     	ds	6
   449  0026                     uint_to_array@F1341:	
   450  0026                     	ds	6
   451  002C                     _voltaje_map:	
   452  002C                     	ds	1
   453  002D                     _valorADC:	
   454  002D                     	ds	1
   455                           
   456                           	psect	cstackCOMMON
   457  0070                     __pcstackCOMMON:	
   458  0070                     ?_I2C_Master_Start:	
   459  0070                     ??_I2C_Master_Start:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_I2C_Master_Write:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_I2C_Master_Stop:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ??_I2C_Master_Stop:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_LCD_Cmd:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ??_LCD_Cmd:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_LCD_clear:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_LCD_init:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_LCD_Write_Character:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ??_LCD_Write_Character:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_LCD_Write_String:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_uint_to_char:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ??_uint_to_char:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_main:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_I2C_Master_Wait:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ??_I2C_Master_Wait:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_I2C_Master_Read:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?___wmul:	
   511                           ; 2 bytes @ 0x0
   512                           
   513  0070                     ?___lldiv:	
   514                           ; 2 bytes @ 0x0
   515                           
   516  0070                     I2C_Master_Write@d:	
   517                           ; 4 bytes @ 0x0
   518                           
   519  0070                     I2C_Master_Read@a:	
   520                           ; 2 bytes @ 0x0
   521                           
   522  0070                     ___wmul@multiplier:	
   523                           ; 2 bytes @ 0x0
   524                           
   525  0070                     ___lldiv@divisor:	
   526                           ; 2 bytes @ 0x0
   527                           
   528                           
   529                           ; 4 bytes @ 0x0
   530  0070                     	ds	1
   531  0071                     LCD_Write_Character@caracter:	
   532                           
   533                           ; 1 bytes @ 0x1
   534  0071                     	ds	1
   535  0072                     ??_I2C_Master_Write:	
   536  0072                     ??_I2C_Master_Read:	
   537                           ; 1 bytes @ 0x2
   538                           
   539  0072                     ??_LCD_Write_String:	
   540                           ; 1 bytes @ 0x2
   541                           
   542  0072                     LCD_Cmd@comando:	
   543                           ; 1 bytes @ 0x2
   544                           
   545  0072                     uint_to_char@numero:	
   546                           ; 1 bytes @ 0x2
   547                           
   548  0072                     LCD_Write_String@n:	
   549                           ; 1 bytes @ 0x2
   550                           
   551  0072                     ___wmul@multiplicand:	
   552                           ; 2 bytes @ 0x2
   553                           
   554                           
   555                           ; 2 bytes @ 0x2
   556  0072                     	ds	1
   557  0073                     ??_LCD_clear:	
   558  0073                     ??_LCD_init:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0073                     ?_LCD_Set_Cursor:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     LCD_Set_Cursor@columna:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0073                     uint_to_char@numChr:	
   568                           ; 1 bytes @ 0x3
   569                           
   570                           
   571                           ; 1 bytes @ 0x3
   572  0073                     	ds	1
   573  0074                     ??_LCD_Set_Cursor:	
   574  0074                     ??___wmul:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     LCD_Write_String@a:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     I2C_Master_Read@temp:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ___wmul@product:	
   584                           ; 2 bytes @ 0x4
   585                           
   586  0074                     ___lldiv@dividend:	
   587                           ; 2 bytes @ 0x4
   588                           
   589                           
   590                           ; 4 bytes @ 0x4
   591  0074                     	ds	2
   592  0076                     ?_mapear:	
   593  0076                     LCD_Set_Cursor@linea:	
   594                           ; 1 bytes @ 0x6
   595                           
   596  0076                     mapear@limReal:	
   597                           ; 1 bytes @ 0x6
   598                           
   599                           
   600                           ; 1 bytes @ 0x6
   601  0076                     	ds	1
   602  0077                     LCD_Set_Cursor@corrimiento:	
   603  0077                     mapear@limSup:	
   604                           ; 1 bytes @ 0x7
   605                           
   606                           
   607                           ; 1 bytes @ 0x7
   608  0077                     	ds	1
   609  0078                     ??_mapear:	
   610  0078                     ??___lldiv:	
   611                           ; 1 bytes @ 0x8
   612                           
   613                           
   614                           ; 1 bytes @ 0x8
   615  0078                     	ds	1
   616  0079                     ___lldiv@quotient:	
   617                           
   618                           ; 4 bytes @ 0x9
   619  0079                     	ds	4
   620  007D                     ___lldiv@counter:	
   621                           
   622                           ; 1 bytes @ 0xD
   623  007D                     	ds	1
   624                           
   625                           	psect	cstackBANK0
   626  002E                     __pcstackBANK0:	
   627  002E                     ?_I2C_Master_Init:	
   628  002E                     mapear@valor:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  002E                     I2C_Master_Init@c:	
   632                           ; 1 bytes @ 0x0
   633                           
   634                           
   635                           ; 4 bytes @ 0x0
   636  002E                     	ds	1
   637  002F                     mapear@resultado:	
   638                           
   639                           ; 6 bytes @ 0x1
   640  002F                     	ds	3
   641  0032                     ??_I2C_Master_Init:	
   642                           
   643                           ; 1 bytes @ 0x4
   644  0032                     	ds	3
   645  0035                     mapear@dividendo:	
   646                           
   647                           ; 2 bytes @ 0x7
   648  0035                     	ds	2
   649  0037                     ??_main:	
   650                           
   651                           ; 1 bytes @ 0x9
   652  0037                     	ds	3
   653                           
   654                           	psect	maintext
   655  073A                     __pmaintext:	
   656 ;;
   657 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   658 ;;
   659 ;; *************** function _main *****************
   660 ;; Defined at:
   661 ;;		line 35 in file "Master_main.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;		None
   664 ;; Auto vars:     Size  Location     Type
   665 ;;		None
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : B00/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   675 ;;      Params:         0       0       0       0       0
   676 ;;      Locals:         0       0       0       0       0
   677 ;;      Temps:          0       3       0       0       0
   678 ;;      Totals:         0       3       0       0       0
   679 ;;Total ram usage:        3 bytes
   680 ;; Hardware stack levels required when called:    2
   681 ;; This function calls:
   682 ;;		_I2C_Master_Init
   683 ;;		_I2C_Master_Read
   684 ;;		_I2C_Master_Start
   685 ;;		_I2C_Master_Stop
   686 ;;		_I2C_Master_Write
   687 ;;		_LCD_Set_Cursor
   688 ;;		_LCD_Write_Character
   689 ;;		_LCD_Write_String
   690 ;;		_LCD_clear
   691 ;;		_LCD_init
   692 ;;		_mapear
   693 ;;		_uint_to_char
   694 ;; This function is called by:
   695 ;;		Startup code after reset
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           
   700                           ;psect for function _main
   701  073A                     _main:	
   702                           
   703                           ;Master_main.c: 36:     TRISD = 0;
   704                           
   705                           ;incstack = 0
   706                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   707  073A  1683               	bsf	3,5	;RP0=1, select bank1
   708  073B  1303               	bcf	3,6	;RP1=0, select bank1
   709  073C  0188               	clrf	8	;volatile
   710                           
   711                           ;Master_main.c: 37:     TRISC0 = 0;
   712  073D  1007               	bcf	7,0	;volatile
   713                           
   714                           ;Master_main.c: 38:     TRISC1 = 0;
   715  073E  1087               	bcf	7,1	;volatile
   716                           
   717                           ;Master_main.c: 39:     LCD_init();
   718  073F  120A  118A  2635  120A  118A  	fcall	_LCD_init
   719                           
   720                           ;Master_main.c: 40:     LCD_clear();
   721  0744  120A  118A  247C  120A  118A  	fcall	_LCD_clear
   722                           
   723                           ;Master_main.c: 41:     LCD_Set_Cursor(1,1);
   724  0749  01F3               	clrf	LCD_Set_Cursor@columna
   725  074A  0AF3               	incf	LCD_Set_Cursor@columna,f
   726  074B  3001               	movlw	1
   727  074C  120A  118A  2501  120A  118A  	fcall	_LCD_Set_Cursor
   728                           
   729                           ;Master_main.c: 42:     LCD_Write_String("S1:");
   730  0751  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   731  0752  120A  118A  24B3  120A  118A  	fcall	_LCD_Write_String
   732                           
   733                           ;Master_main.c: 43:     I2C_Master_Init(100000);
   734  0757  3000               	movlw	0
   735  0758  1283               	bcf	3,5	;RP0=0, select bank0
   736  0759  1303               	bcf	3,6	;RP1=0, select bank0
   737  075A  00B1               	movwf	I2C_Master_Init@c+3
   738  075B  3001               	movlw	1
   739  075C  00B0               	movwf	I2C_Master_Init@c+2
   740  075D  3086               	movlw	134
   741  075E  00AF               	movwf	I2C_Master_Init@c+1
   742  075F  30A0               	movlw	160
   743  0760  00AE               	movwf	I2C_Master_Init@c
   744  0761  120A  118A  255C  120A  118A  	fcall	_I2C_Master_Init
   745  0766                     l1389:	
   746                           
   747                           ;Master_main.c: 46:         I2C_Master_Start();
   748  0766  120A  118A  244E  120A  118A  	fcall	_I2C_Master_Start
   749                           
   750                           ;Master_main.c: 47:         I2C_Master_Write(0x61);
   751  076B  3061               	movlw	97
   752  076C  00F0               	movwf	I2C_Master_Write@d
   753  076D  3000               	movlw	0
   754  076E  00F1               	movwf	I2C_Master_Write@d+1
   755  076F  120A  118A  245C  120A  118A  	fcall	_I2C_Master_Write
   756                           
   757                           ;Master_main.c: 48:         valorADC = I2C_Master_Read(0);
   758  0774  3000               	movlw	0
   759  0775  00F0               	movwf	I2C_Master_Read@a
   760  0776  00F1               	movwf	I2C_Master_Read@a+1
   761  0777  120A  118A  24D5  120A  118A  	fcall	_I2C_Master_Read
   762  077C  0870               	movf	?_I2C_Master_Read,w
   763  077D  1283               	bcf	3,5	;RP0=0, select bank0
   764  077E  1303               	bcf	3,6	;RP1=0, select bank0
   765  077F  00B7               	movwf	??_main
   766  0780  0837               	movf	??_main,w
   767  0781  00AD               	movwf	_valorADC
   768                           
   769                           ;Master_main.c: 49:         I2C_Master_Stop();
   770  0782  120A  118A  2455  120A  118A  	fcall	_I2C_Master_Stop
   771                           
   772                           ;Master_main.c: 50:         _delay((unsigned long)((100)*(4000000/4000.0)));
   773  0787  3082               	movlw	130
   774  0788  1283               	bcf	3,5	;RP0=0, select bank0
   775  0789  1303               	bcf	3,6	;RP1=0, select bank0
   776  078A  00B8               	movwf	??_main+1
   777  078B  30DD               	movlw	221
   778  078C  00B7               	movwf	??_main
   779  078D                     u577:	
   780  078D  0BB7               	decfsz	??_main,f
   781  078E  2F8D               	goto	u577
   782  078F  0BB8               	decfsz	??_main+1,f
   783  0790  2F8D               	goto	u577
   784                           
   785                           ;Master_main.c: 52:         voltaje_map = mapear(valorADC, 255, 5);
   786  0791  30FF               	movlw	255
   787  0792  1283               	bcf	3,5	;RP0=0, select bank0
   788  0793  1303               	bcf	3,6	;RP1=0, select bank0
   789  0794  00B7               	movwf	??_main
   790  0795  0837               	movf	??_main,w
   791  0796  00F6               	movwf	mapear@limReal
   792  0797  3005               	movlw	5
   793  0798  00B8               	movwf	??_main+1
   794  0799  0838               	movf	??_main+1,w
   795  079A  00F7               	movwf	mapear@limSup
   796  079B  082D               	movf	_valorADC,w
   797  079C  120A  118A  269C  120A  118A  	fcall	_mapear
   798  07A1  1283               	bcf	3,5	;RP0=0, select bank0
   799  07A2  1303               	bcf	3,6	;RP1=0, select bank0
   800  07A3  00B9               	movwf	??_main+2
   801  07A4  0839               	movf	??_main+2,w
   802  07A5  00AC               	movwf	_voltaje_map
   803                           
   804                           ;Master_main.c: 53:         LCD_Set_Cursor(2,0);
   805  07A6  01F3               	clrf	LCD_Set_Cursor@columna
   806  07A7  3002               	movlw	2
   807  07A8  120A  118A  2501  120A  118A  	fcall	_LCD_Set_Cursor
   808                           
   809                           ;Master_main.c: 54:         LCD_Write_Character(uint_to_char(voltaje_map[0]));
   810  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   811  07AE  1303               	bcf	3,6	;RP1=0, select bank0
   812  07AF  082C               	movf	_voltaje_map,w
   813  07B0  0084               	movwf	4
   814  07B1  1383               	bcf	3,7	;select IRP bank0
   815  07B2  0800               	movf	0,w
   816  07B3  120A  118A  2592  120A  118A  	fcall	_uint_to_char
   817  07B8  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
   818                           
   819                           ;Master_main.c: 55:         LCD_Write_Character('.');
   820  07BD  302E               	movlw	46
   821  07BE  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
   822                           
   823                           ;Master_main.c: 56:         LCD_Write_Character(uint_to_char(voltaje_map[1]));
   824  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   825  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   826  07C5  082C               	movf	_voltaje_map,w
   827  07C6  3E02               	addlw	2
   828  07C7  0084               	movwf	4
   829  07C8  1383               	bcf	3,7	;select IRP bank0
   830  07C9  0800               	movf	0,w
   831  07CA  120A  118A  2592  120A  118A  	fcall	_uint_to_char
   832  07CF  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
   833                           
   834                           ;Master_main.c: 57:         LCD_Write_Character(uint_to_char(voltaje_map[2]));
   835  07D4  1283               	bcf	3,5	;RP0=0, select bank0
   836  07D5  1303               	bcf	3,6	;RP1=0, select bank0
   837  07D6  082C               	movf	_voltaje_map,w
   838  07D7  3E04               	addlw	4
   839  07D8  0084               	movwf	4
   840  07D9  1383               	bcf	3,7	;select IRP bank0
   841  07DA  0800               	movf	0,w
   842  07DB  120A  118A  2592  120A  118A  	fcall	_uint_to_char
   843  07E0  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
   844                           
   845                           ;Master_main.c: 58:         LCD_Write_Character('V');
   846  07E5  3056               	movlw	86
   847  07E6  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
   848  07EB  2F66               	goto	l1389
   849  07EC                     __end_of_main:	
   850                           
   851                           	psect	text1
   852  0592                     __ptext1:	
   853 ;; *************** function _uint_to_char *****************
   854 ;; Defined at:
   855 ;;		line 116 in file "LCD_8bits.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  numero          1    wreg     unsigned char 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  numero          1    2[COMMON] unsigned char 
   860 ;;  numChr          1    3[COMMON] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      unsigned char 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   870 ;;      Params:         0       0       0       0       0
   871 ;;      Locals:         2       0       0       0       0
   872 ;;      Temps:          2       0       0       0       0
   873 ;;      Totals:         4       0       0       0       0
   874 ;;Total ram usage:        4 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           
   884                           ;psect for function _uint_to_char
   885  0592                     _uint_to_char:	
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
   889                           ;uint_to_char@numero stored from wreg
   890  0592  00F2               	movwf	uint_to_char@numero
   891                           
   892                           ;LCD_8bits.c: 118:     switch (numero){
   893  0593  2DAD               	goto	l1261
   894  0594                     l1239:	
   895                           
   896                           ;LCD_8bits.c: 120:             numChr = 48;
   897  0594  3030               	movlw	48
   898  0595  2DA9               	goto	L10
   899  0596                     l1241:	
   900                           ;LCD_8bits.c: 121:             break;
   901                           
   902                           
   903                           ;LCD_8bits.c: 123:             numChr = 49;
   904  0596  3031               	movlw	49
   905  0597  2DA9               	goto	L10
   906  0598                     l1243:	
   907                           ;LCD_8bits.c: 124:             break;
   908                           
   909                           
   910                           ;LCD_8bits.c: 126:             numChr = 50;
   911  0598  3032               	movlw	50
   912  0599  2DA9               	goto	L10
   913  059A                     l1245:	
   914                           ;LCD_8bits.c: 127:             break;
   915                           
   916                           
   917                           ;LCD_8bits.c: 129:             numChr = 51;
   918  059A  3033               	movlw	51
   919  059B  2DA9               	goto	L10
   920  059C                     l1247:	
   921                           ;LCD_8bits.c: 130:             break;
   922                           
   923                           
   924                           ;LCD_8bits.c: 132:             numChr = 52;
   925  059C  3034               	movlw	52
   926  059D  2DA9               	goto	L10
   927  059E                     l1249:	
   928                           ;LCD_8bits.c: 133:             break;
   929                           
   930                           
   931                           ;LCD_8bits.c: 135:             numChr = 53;
   932  059E  3035               	movlw	53
   933  059F  2DA9               	goto	L10
   934  05A0                     l1251:	
   935                           ;LCD_8bits.c: 136:             break;
   936                           
   937                           
   938                           ;LCD_8bits.c: 138:             numChr = 54;
   939  05A0  3036               	movlw	54
   940  05A1  2DA9               	goto	L10
   941  05A2                     l1253:	
   942                           ;LCD_8bits.c: 139:             break;
   943                           
   944                           
   945                           ;LCD_8bits.c: 141:             numChr = 55;
   946  05A2  3037               	movlw	55
   947  05A3  2DA9               	goto	L10
   948  05A4                     l1255:	
   949                           ;LCD_8bits.c: 142:             break;
   950                           
   951                           
   952                           ;LCD_8bits.c: 144:             numChr = 56;
   953  05A4  3038               	movlw	56
   954  05A5  2DA9               	goto	L10
   955  05A6                     l1257:	
   956                           ;LCD_8bits.c: 145:             break;
   957                           
   958                           
   959                           ;LCD_8bits.c: 147:             numChr = 57;
   960  05A6  3039               	movlw	57
   961  05A7  2DA9               	goto	L10
   962  05A8                     l1259:	
   963                           ;LCD_8bits.c: 148:             break;
   964                           
   965                           
   966                           ;LCD_8bits.c: 150:             numChr = 214;
   967  05A8  30D6               	movlw	214
   968  05A9                     L10:	
   969  05A9  00F0               	movwf	??_uint_to_char
   970  05AA  0870               	movf	??_uint_to_char,w
   971  05AB  00F3               	movwf	uint_to_char@numChr
   972                           
   973                           ;LCD_8bits.c: 151:     }
   974  05AC  2DD5               	goto	l1263
   975  05AD                     l1261:	
   976  05AD  0872               	movf	uint_to_char@numero,w
   977  05AE  00F0               	movwf	??_uint_to_char
   978  05AF  01F1               	clrf	??_uint_to_char+1
   979                           
   980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   981                           ; Switch size 1, requested type "simple"
   982                           ; Number of cases is 1, Range of values is 0 to 0
   983                           ; switch strategies available:
   984                           ; Name         Instructions Cycles
   985                           ; simple_byte            4     3 (average)
   986                           ; direct_byte           11     8 (fixed)
   987                           ; jumptable            260     6 (fixed)
   988                           ;	Chosen strategy is simple_byte
   989  05B0  0871               	movf	??_uint_to_char+1,w
   990  05B1  3A00               	xorlw	0	; case 0
   991  05B2  1903               	skipnz
   992  05B3  2DB5               	goto	l1501
   993  05B4  2DA8               	goto	l1259
   994  05B5                     l1501:	
   995                           
   996                           ; Switch size 1, requested type "simple"
   997                           ; Number of cases is 10, Range of values is 0 to 9
   998                           ; switch strategies available:
   999                           ; Name         Instructions Cycles
  1000                           ; simple_byte           31    16 (average)
  1001                           ; direct_byte           38     8 (fixed)
  1002                           ; jumptable            260     6 (fixed)
  1003                           ;	Chosen strategy is simple_byte
  1004  05B5  0870               	movf	??_uint_to_char,w
  1005  05B6  3A00               	xorlw	0	; case 0
  1006  05B7  1903               	skipnz
  1007  05B8  2D94               	goto	l1239
  1008  05B9  3A01               	xorlw	1	; case 1
  1009  05BA  1903               	skipnz
  1010  05BB  2D96               	goto	l1241
  1011  05BC  3A03               	xorlw	3	; case 2
  1012  05BD  1903               	skipnz
  1013  05BE  2D98               	goto	l1243
  1014  05BF  3A01               	xorlw	1	; case 3
  1015  05C0  1903               	skipnz
  1016  05C1  2D9A               	goto	l1245
  1017  05C2  3A07               	xorlw	7	; case 4
  1018  05C3  1903               	skipnz
  1019  05C4  2D9C               	goto	l1247
  1020  05C5  3A01               	xorlw	1	; case 5
  1021  05C6  1903               	skipnz
  1022  05C7  2D9E               	goto	l1249
  1023  05C8  3A03               	xorlw	3	; case 6
  1024  05C9  1903               	skipnz
  1025  05CA  2DA0               	goto	l1251
  1026  05CB  3A01               	xorlw	1	; case 7
  1027  05CC  1903               	skipnz
  1028  05CD  2DA2               	goto	l1253
  1029  05CE  3A0F               	xorlw	15	; case 8
  1030  05CF  1903               	skipnz
  1031  05D0  2DA4               	goto	l1255
  1032  05D1  3A01               	xorlw	1	; case 9
  1033  05D2  1903               	skipnz
  1034  05D3  2DA6               	goto	l1257
  1035  05D4  2DA8               	goto	l1259
  1036  05D5                     l1263:	
  1037                           
  1038                           ;LCD_8bits.c: 152:     return(numChr);
  1039  05D5  0873               	movf	uint_to_char@numChr,w
  1040  05D6  0008               	return
  1041  05D7                     __end_of_uint_to_char:	
  1042                           
  1043                           	psect	text2
  1044  069C                     __ptext2:	
  1045 ;; *************** function _mapear *****************
  1046 ;; Defined at:
  1047 ;;		line 63 in file "Master_main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  valor           1    wreg     unsigned char 
  1050 ;;  limReal         1    6[COMMON] unsigned char 
  1051 ;;  limSup          1    7[COMMON] unsigned char 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  valor           1    0[BANK0 ] unsigned char 
  1054 ;;  resultado       6    1[BANK0 ] unsigned int [3]
  1055 ;;  dividendo       2    7[BANK0 ] unsigned int 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      PTR unsigned int 
  1058 ;; Registers used:
  1059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         2       0       0       0       0
  1066 ;;      Locals:         0       9       0       0       0
  1067 ;;      Temps:          4       0       0       0       0
  1068 ;;      Totals:         6       9       0       0       0
  1069 ;;Total ram usage:       15 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    1
  1072 ;; This function calls:
  1073 ;;		___wmul
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           
  1080                           ;psect for function _mapear
  1081  069C                     _mapear:	
  1082                           
  1083                           ;incstack = 0
  1084                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1085                           ;mapear@valor stored from wreg
  1086  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1087  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1088  069E  00AE               	movwf	mapear@valor
  1089                           
  1090                           ;Master_main.c: 64:     uint16_t resultado[3] = {0,0,0};
  1091  069F  302F               	movlw	mapear@resultado& (0+255)
  1092  06A0  0084               	movwf	4
  1093  06A1  3006               	movlw	6
  1094  06A2  00FF               	movwf	127
  1095  06A3                     u400:	
  1096  06A3  1383               	bcf	3,7	;select IRP bank0
  1097  06A4  0180               	clrf	0
  1098  06A5  0A84               	incf	4,f
  1099  06A6  0BFF               	decfsz	127,f
  1100  06A7  2EA3               	goto	u400
  1101                           
  1102                           ;Master_main.c: 65:     uint16_t dividendo = valor*limSup;
  1103  06A8  082E               	movf	mapear@valor,w
  1104  06A9  00F8               	movwf	??_mapear
  1105  06AA  01F9               	clrf	??_mapear+1
  1106  06AB  0878               	movf	??_mapear,w
  1107  06AC  00F0               	movwf	___wmul@multiplier
  1108  06AD  0879               	movf	??_mapear+1,w
  1109  06AE  00F1               	movwf	___wmul@multiplier+1
  1110  06AF  0877               	movf	mapear@limSup,w
  1111  06B0  00FA               	movwf	??_mapear+2
  1112  06B1  01FB               	clrf	??_mapear+3
  1113  06B2  087A               	movf	??_mapear+2,w
  1114  06B3  00F2               	movwf	___wmul@multiplicand
  1115  06B4  087B               	movf	??_mapear+3,w
  1116  06B5  00F3               	movwf	___wmul@multiplicand+1
  1117  06B6  120A  118A  2492  120A  118A  	fcall	___wmul
  1118  06BB  0871               	movf	?___wmul+1,w
  1119  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1120  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1121  06BE  00B6               	movwf	mapear@dividendo+1
  1122  06BF  0870               	movf	?___wmul,w
  1123  06C0  00B5               	movwf	mapear@dividendo
  1124  06C1                     l1317:	
  1125                           ;Master_main.c: 66:     while (limReal <= dividendo){
  1126                           
  1127                           
  1128                           ;Master_main.c: 66:     while (limReal <= dividendo){
  1129  06C1  0876               	movf	mapear@limReal,w
  1130  06C2  00F8               	movwf	??_mapear
  1131  06C3  01F9               	clrf	??_mapear+1
  1132  06C4  0879               	movf	??_mapear+1,w
  1133  06C5  0236               	subwf	mapear@dividendo+1,w
  1134  06C6  1D03               	skipz
  1135  06C7  2ECA               	goto	u415
  1136  06C8  0878               	movf	??_mapear,w
  1137  06C9  0235               	subwf	mapear@dividendo,w
  1138  06CA                     u415:	
  1139  06CA  1C03               	btfss	3,0
  1140  06CB  2EDC               	goto	l1319
  1141                           
  1142                           ;Master_main.c: 67:         resultado[0] = resultado[0] + 1;
  1143  06CC  082F               	movf	mapear@resultado,w
  1144  06CD  3E01               	addlw	1
  1145  06CE  00AF               	movwf	mapear@resultado
  1146  06CF  0830               	movf	mapear@resultado+1,w
  1147  06D0  1803               	skipnc
  1148  06D1  3E01               	addlw	1
  1149  06D2  3E00               	addlw	0
  1150  06D3  00B0               	movwf	mapear@resultado+1
  1151                           
  1152                           ;Master_main.c: 68:         dividendo = dividendo - limReal;
  1153  06D4  0876               	movf	mapear@limReal,w
  1154  06D5  0235               	subwf	mapear@dividendo,w
  1155  06D6  00B5               	movwf	mapear@dividendo
  1156  06D7  0836               	movf	mapear@dividendo+1,w
  1157  06D8  1C03               	skipc
  1158  06D9  0336               	decf	mapear@dividendo+1,w
  1159  06DA  00B6               	movwf	mapear@dividendo+1
  1160  06DB  2EC1               	goto	l1317
  1161  06DC                     l1319:	
  1162                           
  1163                           ;Master_main.c: 70:     dividendo = dividendo *10;
  1164  06DC  0836               	movf	mapear@dividendo+1,w
  1165  06DD  00F1               	movwf	___wmul@multiplier+1
  1166  06DE  0835               	movf	mapear@dividendo,w
  1167  06DF  00F0               	movwf	___wmul@multiplier
  1168  06E0  300A               	movlw	10
  1169  06E1  00F2               	movwf	___wmul@multiplicand
  1170  06E2  3000               	movlw	0
  1171  06E3  00F3               	movwf	___wmul@multiplicand+1
  1172  06E4  120A  118A  2492  120A  118A  	fcall	___wmul
  1173  06E9  0871               	movf	?___wmul+1,w
  1174  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  1175  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  1176  06EC  00B6               	movwf	mapear@dividendo+1
  1177  06ED  0870               	movf	?___wmul,w
  1178  06EE  00B5               	movwf	mapear@dividendo
  1179  06EF                     l1323:	
  1180                           ;Master_main.c: 71:     while (limReal <= dividendo){
  1181                           
  1182                           
  1183                           ;Master_main.c: 71:     while (limReal <= dividendo){
  1184  06EF  0876               	movf	mapear@limReal,w
  1185  06F0  00F8               	movwf	??_mapear
  1186  06F1  01F9               	clrf	??_mapear+1
  1187  06F2  0879               	movf	??_mapear+1,w
  1188  06F3  0236               	subwf	mapear@dividendo+1,w
  1189  06F4  1D03               	skipz
  1190  06F5  2EF8               	goto	u425
  1191  06F6  0878               	movf	??_mapear,w
  1192  06F7  0235               	subwf	mapear@dividendo,w
  1193  06F8                     u425:	
  1194  06F8  1C03               	btfss	3,0
  1195  06F9  2F0A               	goto	l1325
  1196                           
  1197                           ;Master_main.c: 72:         resultado[1] = resultado[1] +1;
  1198  06FA  0831               	movf	mapear@resultado+2,w
  1199  06FB  3E01               	addlw	1
  1200  06FC  00B1               	movwf	mapear@resultado+2
  1201  06FD  0832               	movf	mapear@resultado+3,w
  1202  06FE  1803               	skipnc
  1203  06FF  3E01               	addlw	1
  1204  0700  3E00               	addlw	0
  1205  0701  00B2               	movwf	mapear@resultado+3
  1206                           
  1207                           ;Master_main.c: 73:         dividendo = dividendo - limReal;
  1208  0702  0876               	movf	mapear@limReal,w
  1209  0703  0235               	subwf	mapear@dividendo,w
  1210  0704  00B5               	movwf	mapear@dividendo
  1211  0705  0836               	movf	mapear@dividendo+1,w
  1212  0706  1C03               	skipc
  1213  0707  0336               	decf	mapear@dividendo+1,w
  1214  0708  00B6               	movwf	mapear@dividendo+1
  1215  0709  2EEF               	goto	l1323
  1216  070A                     l1325:	
  1217                           
  1218                           ;Master_main.c: 75:     dividendo = dividendo *10;
  1219  070A  0836               	movf	mapear@dividendo+1,w
  1220  070B  00F1               	movwf	___wmul@multiplier+1
  1221  070C  0835               	movf	mapear@dividendo,w
  1222  070D  00F0               	movwf	___wmul@multiplier
  1223  070E  300A               	movlw	10
  1224  070F  00F2               	movwf	___wmul@multiplicand
  1225  0710  3000               	movlw	0
  1226  0711  00F3               	movwf	___wmul@multiplicand+1
  1227  0712  120A  118A  2492  120A  118A  	fcall	___wmul
  1228  0717  0871               	movf	?___wmul+1,w
  1229  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1231  071A  00B6               	movwf	mapear@dividendo+1
  1232  071B  0870               	movf	?___wmul,w
  1233  071C  00B5               	movwf	mapear@dividendo
  1234  071D                     l1329:	
  1235                           ;Master_main.c: 76:     while (limReal <= dividendo){
  1236                           
  1237                           
  1238                           ;Master_main.c: 76:     while (limReal <= dividendo){
  1239  071D  0876               	movf	mapear@limReal,w
  1240  071E  00F8               	movwf	??_mapear
  1241  071F  01F9               	clrf	??_mapear+1
  1242  0720  0879               	movf	??_mapear+1,w
  1243  0721  0236               	subwf	mapear@dividendo+1,w
  1244  0722  1D03               	skipz
  1245  0723  2F26               	goto	u435
  1246  0724  0878               	movf	??_mapear,w
  1247  0725  0235               	subwf	mapear@dividendo,w
  1248  0726                     u435:	
  1249  0726  1C03               	btfss	3,0
  1250  0727  2F38               	goto	l1331
  1251                           
  1252                           ;Master_main.c: 77:         resultado[2] = resultado[2] +1;
  1253  0728  0833               	movf	mapear@resultado+4,w
  1254  0729  3E01               	addlw	1
  1255  072A  00B3               	movwf	mapear@resultado+4
  1256  072B  0834               	movf	mapear@resultado+5,w
  1257  072C  1803               	skipnc
  1258  072D  3E01               	addlw	1
  1259  072E  3E00               	addlw	0
  1260  072F  00B4               	movwf	mapear@resultado+5
  1261                           
  1262                           ;Master_main.c: 78:         dividendo = dividendo - limReal;
  1263  0730  0876               	movf	mapear@limReal,w
  1264  0731  0235               	subwf	mapear@dividendo,w
  1265  0732  00B5               	movwf	mapear@dividendo
  1266  0733  0836               	movf	mapear@dividendo+1,w
  1267  0734  1C03               	skipc
  1268  0735  0336               	decf	mapear@dividendo+1,w
  1269  0736  00B6               	movwf	mapear@dividendo+1
  1270  0737  2F1D               	goto	l1329
  1271  0738                     l1331:	
  1272                           
  1273                           ;Master_main.c: 81:     return resultado;
  1274  0738  302F               	movlw	(low (mapear@resultado| 0))& (0+255)
  1275  0739  0008               	return
  1276  073A                     __end_of_mapear:	
  1277                           
  1278                           	psect	text3
  1279  0492                     __ptext3:	
  1280 ;; *************** function ___wmul *****************
  1281 ;; Defined at:
  1282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  multiplier      2    0[COMMON] unsigned int 
  1285 ;;  multiplicand    2    2[COMMON] unsigned int 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  product         2    4[COMMON] unsigned int 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  2    0[COMMON] unsigned int 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         4       0       0       0       0
  1298 ;;      Locals:         2       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0
  1300 ;;      Totals:         6       0       0       0       0
  1301 ;;Total ram usage:        6 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_mapear
  1307 ;;		_uint_to_array
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           
  1312                           ;psect for function ___wmul
  1313  0492                     ___wmul:	
  1314                           
  1315                           ;incstack = 0
  1316                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1317  0492  01F4               	clrf	___wmul@product
  1318  0493  01F5               	clrf	___wmul@product+1
  1319  0494                     l1147:	
  1320  0494  1C70               	btfss	___wmul@multiplier,0
  1321  0495  2C9C               	goto	l273
  1322  0496  0872               	movf	___wmul@multiplicand,w
  1323  0497  07F4               	addwf	___wmul@product,f
  1324  0498  1803               	skipnc
  1325  0499  0AF5               	incf	___wmul@product+1,f
  1326  049A  0873               	movf	___wmul@multiplicand+1,w
  1327  049B  07F5               	addwf	___wmul@product+1,f
  1328  049C                     l273:	
  1329  049C  3001               	movlw	1
  1330  049D                     u275:	
  1331  049D  1003               	clrc
  1332  049E  0DF2               	rlf	___wmul@multiplicand,f
  1333  049F  0DF3               	rlf	___wmul@multiplicand+1,f
  1334  04A0  3EFF               	addlw	-1
  1335  04A1  1D03               	skipz
  1336  04A2  2C9D               	goto	u275
  1337  04A3  3001               	movlw	1
  1338  04A4                     u285:	
  1339  04A4  1003               	clrc
  1340  04A5  0CF1               	rrf	___wmul@multiplier+1,f
  1341  04A6  0CF0               	rrf	___wmul@multiplier,f
  1342  04A7  3EFF               	addlw	-1
  1343  04A8  1D03               	skipz
  1344  04A9  2CA4               	goto	u285
  1345  04AA  0870               	movf	___wmul@multiplier,w
  1346  04AB  0471               	iorwf	___wmul@multiplier+1,w
  1347  04AC  1D03               	btfss	3,2
  1348  04AD  2C94               	goto	l1147
  1349  04AE  0875               	movf	___wmul@product+1,w
  1350  04AF  00F1               	movwf	?___wmul+1
  1351  04B0  0874               	movf	___wmul@product,w
  1352  04B1  00F0               	movwf	?___wmul
  1353  04B2  0008               	return
  1354  04B3                     __end_of___wmul:	
  1355                           
  1356                           	psect	text4
  1357  0635                     __ptext4:	
  1358 ;; *************** function _LCD_init *****************
  1359 ;; Defined at:
  1360 ;;		line 44 in file "LCD_8bits.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, pclath, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1374 ;;      Params:         0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0
  1376 ;;      Temps:          2       0       0       0       0
  1377 ;;      Totals:         2       0       0       0       0
  1378 ;;Total ram usage:        2 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    1
  1381 ;; This function calls:
  1382 ;;		_LCD_Cmd
  1383 ;; This function is called by:
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _LCD_init
  1390  0635                     _LCD_init:	
  1391                           
  1392                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1396  0635  301A               	movlw	26
  1397  0636  00F4               	movwf	??_LCD_init+1
  1398  0637  30F8               	movlw	248
  1399  0638  00F3               	movwf	??_LCD_init
  1400  0639                     u587:	
  1401  0639  0BF3               	decfsz	??_LCD_init,f
  1402  063A  2E39               	goto	u587
  1403  063B  0BF4               	decfsz	??_LCD_init+1,f
  1404  063C  2E39               	goto	u587
  1405  063D  0000               	nop
  1406                           
  1407                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  1408  063E  3030               	movlw	48
  1409  063F  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1410                           
  1411                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1412  0644  3007               	movlw	7
  1413  0645  00F4               	movwf	??_LCD_init+1
  1414  0646  307D               	movlw	125
  1415  0647  00F3               	movwf	??_LCD_init
  1416  0648                     u597:	
  1417  0648  0BF3               	decfsz	??_LCD_init,f
  1418  0649  2E48               	goto	u597
  1419  064A  0BF4               	decfsz	??_LCD_init+1,f
  1420  064B  2E48               	goto	u597
  1421                           
  1422                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  1423  064C  3030               	movlw	48
  1424  064D  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1425                           
  1426                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1427  0652  3021               	movlw	33
  1428  0653  00F3               	movwf	??_LCD_init
  1429  0654                     u607:	
  1430  0654  0BF3               	decfsz	??_LCD_init,f
  1431  0655  2E54               	goto	u607
  1432                           
  1433                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  1434  0656  3030               	movlw	48
  1435  0657  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1436                           
  1437                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1438  065C  3021               	movlw	33
  1439  065D  00F3               	movwf	??_LCD_init
  1440  065E                     u617:	
  1441  065E  0BF3               	decfsz	??_LCD_init,f
  1442  065F  2E5E               	goto	u617
  1443                           
  1444                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  1445  0660  3038               	movlw	56
  1446  0661  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1447                           
  1448                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1449  0666  3011               	movlw	17
  1450  0667  00F3               	movwf	??_LCD_init
  1451  0668                     u627:	
  1452  0668  0BF3               	decfsz	??_LCD_init,f
  1453  0669  2E68               	goto	u627
  1454  066A  0000               	nop
  1455                           
  1456                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  1457  066B  3008               	movlw	8
  1458  066C  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1459                           
  1460                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1461  0671  3011               	movlw	17
  1462  0672  00F3               	movwf	??_LCD_init
  1463  0673                     u637:	
  1464  0673  0BF3               	decfsz	??_LCD_init,f
  1465  0674  2E73               	goto	u637
  1466  0675  0000               	nop
  1467                           
  1468                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  1469  0676  3001               	movlw	1
  1470  0677  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1471                           
  1472                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1473  067C  3004               	movlw	4
  1474  067D  00F4               	movwf	??_LCD_init+1
  1475  067E  30E4               	movlw	228
  1476  067F  00F3               	movwf	??_LCD_init
  1477  0680                     u647:	
  1478  0680  0BF3               	decfsz	??_LCD_init,f
  1479  0681  2E80               	goto	u647
  1480  0682  0BF4               	decfsz	??_LCD_init+1,f
  1481  0683  2E80               	goto	u647
  1482  0684  0000               	nop
  1483                           
  1484                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  1485  0685  3006               	movlw	6
  1486  0686  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1487                           
  1488                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1489  068B  3011               	movlw	17
  1490  068C  00F3               	movwf	??_LCD_init
  1491  068D                     u657:	
  1492  068D  0BF3               	decfsz	??_LCD_init,f
  1493  068E  2E8D               	goto	u657
  1494  068F  0000               	nop
  1495                           
  1496                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  1497  0690  300C               	movlw	12
  1498  0691  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1499                           
  1500                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1501  0696  3011               	movlw	17
  1502  0697  00F3               	movwf	??_LCD_init
  1503  0698                     u667:	
  1504  0698  0BF3               	decfsz	??_LCD_init,f
  1505  0699  2E98               	goto	u667
  1506  069A  0000               	nop
  1507  069B  0008               	return
  1508  069C                     __end_of_LCD_init:	
  1509                           
  1510                           	psect	text5
  1511  047C                     __ptext5:	
  1512 ;; *************** function _LCD_clear *****************
  1513 ;; Defined at:
  1514 ;;		line 32 in file "LCD_8bits.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0
  1530 ;;      Temps:          2       0       0       0       0
  1531 ;;      Totals:         2       0       0       0       0
  1532 ;;Total ram usage:        2 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    1
  1535 ;; This function calls:
  1536 ;;		_LCD_Cmd
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           
  1543                           ;psect for function _LCD_clear
  1544  047C                     _LCD_clear:	
  1545                           
  1546                           ;LCD_8bits.c: 33:     LCD_Cmd(0x00);
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  1550  047C  3000               	movlw	0
  1551  047D  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1552                           
  1553                           ;LCD_8bits.c: 34:     LCD_Cmd(0x01);
  1554  0482  3001               	movlw	1
  1555  0483  120A  118A  252D  120A  118A  	fcall	_LCD_Cmd
  1556                           
  1557                           ;LCD_8bits.c: 35:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1558  0488  3006               	movlw	6
  1559  0489  00F4               	movwf	??_LCD_clear+1
  1560  048A  3030               	movlw	48
  1561  048B  00F3               	movwf	??_LCD_clear
  1562  048C                     u677:	
  1563  048C  0BF3               	decfsz	??_LCD_clear,f
  1564  048D  2C8C               	goto	u677
  1565  048E  0BF4               	decfsz	??_LCD_clear+1,f
  1566  048F  2C8C               	goto	u677
  1567  0490  0000               	nop
  1568  0491  0008               	return
  1569  0492                     __end_of_LCD_clear:	
  1570                           
  1571                           	psect	text6
  1572  04B3                     __ptext6:	
  1573 ;; *************** function _LCD_Write_String *****************
  1574 ;; Defined at:
  1575 ;;		line 73 in file "LCD_8bits.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  a               1    wreg     PTR unsigned char 
  1578 ;;		 -> STR_1(4), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  a               1    4[COMMON] PTR unsigned char 
  1581 ;;		 -> STR_1(4), 
  1582 ;;  n               2    2[COMMON] int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         0       0       0       0       0
  1593 ;;      Locals:         3       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0
  1595 ;;      Totals:         3       0       0       0       0
  1596 ;;Total ram usage:        3 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    1
  1599 ;; This function calls:
  1600 ;;		_LCD_Write_Character
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _LCD_Write_String
  1608  04B3                     _LCD_Write_String:	
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1612                           ;LCD_Write_String@a stored from wreg
  1613  04B3  00F4               	movwf	LCD_Write_String@a
  1614                           
  1615                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  1616  04B4  01F2               	clrf	LCD_Write_String@n
  1617  04B5  01F3               	clrf	LCD_Write_String@n+1
  1618  04B6                     l1217:	
  1619  04B6  0872               	movf	LCD_Write_String@n,w
  1620  04B7  0774               	addwf	LCD_Write_String@a,w
  1621  04B8  0084               	movwf	4
  1622  04B9  120A  118A  2003  120A  118A  	fcall	stringdir
  1623  04BE  3A00               	xorlw	0
  1624  04BF  1903               	btfsc	3,2
  1625  04C0  0008               	return
  1626                           
  1627                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  1628  04C1  0872               	movf	LCD_Write_String@n,w
  1629  04C2  0774               	addwf	LCD_Write_String@a,w
  1630  04C3  0084               	movwf	4
  1631  04C4  120A  118A  2003  120A  118A  	fcall	stringdir
  1632  04C9  120A  118A  246D  120A  118A  	fcall	_LCD_Write_Character
  1633                           
  1634                           ;LCD_8bits.c: 77:     }
  1635  04CE  3001               	movlw	1
  1636  04CF  07F2               	addwf	LCD_Write_String@n,f
  1637  04D0  1803               	skipnc
  1638  04D1  0AF3               	incf	LCD_Write_String@n+1,f
  1639  04D2  3000               	movlw	0
  1640  04D3  07F3               	addwf	LCD_Write_String@n+1,f
  1641  04D4  2CB6               	goto	l1217
  1642  04D5                     __end_of_LCD_Write_String:	
  1643                           
  1644                           	psect	text7
  1645  046D                     __ptext7:	
  1646 ;; *************** function _LCD_Write_Character *****************
  1647 ;; Defined at:
  1648 ;;		line 64 in file "LCD_8bits.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  caracter        1    wreg     unsigned char 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  caracter        1    1[COMMON] unsigned char 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       0       0       0       0
  1663 ;;      Locals:         1       0       0       0       0
  1664 ;;      Temps:          1       0       0       0       0
  1665 ;;      Totals:         2       0       0       0       0
  1666 ;;Total ram usage:        2 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_LCD_Write_String
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _LCD_Write_Character
  1678  046D                     _LCD_Write_Character:	
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _LCD_Write_Character: [wreg]
  1682                           ;LCD_Write_Character@caracter stored from wreg
  1683  046D  00F1               	movwf	LCD_Write_Character@caracter
  1684                           
  1685                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  1686  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1687  046F  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0470  1407               	bsf	7,0	;volatile
  1689                           
  1690                           ;LCD_8bits.c: 67:     PORTD = caracter;
  1691  0471  0871               	movf	LCD_Write_Character@caracter,w
  1692  0472  0088               	movwf	8	;volatile
  1693                           
  1694                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  1695  0473  1487               	bsf	7,1	;volatile
  1696                           
  1697                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1698  0474  300D               	movlw	13
  1699  0475  00F0               	movwf	??_LCD_Write_Character
  1700  0476                     u687:	
  1701  0476  0BF0               	decfsz	??_LCD_Write_Character,f
  1702  0477  2C76               	goto	u687
  1703                           
  1704                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  1705  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1706  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1707  047A  1087               	bcf	7,1	;volatile
  1708  047B  0008               	return
  1709  047C                     __end_of_LCD_Write_Character:	
  1710                           
  1711                           	psect	text8
  1712  0501                     __ptext8:	
  1713 ;; *************** function _LCD_Set_Cursor *****************
  1714 ;; Defined at:
  1715 ;;		line 80 in file "LCD_8bits.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  linea           1    wreg     unsigned char 
  1718 ;;  columna         1    3[COMMON] unsigned char 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;  linea           1    6[COMMON] unsigned char 
  1721 ;;  corrimiento     1    7[COMMON] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1731 ;;      Params:         1       0       0       0       0
  1732 ;;      Locals:         2       0       0       0       0
  1733 ;;      Temps:          2       0       0       0       0
  1734 ;;      Totals:         5       0       0       0       0
  1735 ;;Total ram usage:        5 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		_LCD_Cmd
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _LCD_Set_Cursor
  1747  0501                     _LCD_Set_Cursor:	
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1751                           ;LCD_Set_Cursor@linea stored from wreg
  1752  0501  00F6               	movwf	LCD_Set_Cursor@linea
  1753                           
  1754                           ;LCD_8bits.c: 82:     switch (linea){
  1755  0502  2D1C               	goto	l1231
  1756  0503                     l1221:	
  1757                           
  1758                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  1759  0503  0873               	movf	LCD_Set_Cursor@columna,w
  1760  0504  3E80               	addlw	128
  1761  0505  00F4               	movwf	??_LCD_Set_Cursor
  1762  0506  0874               	movf	??_LCD_Set_Cursor,w
  1763  0507  00F7               	movwf	LCD_Set_Cursor@corrimiento
  1764                           
  1765                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  1766  0508  0877               	movf	LCD_Set_Cursor@corrimiento,w
  1767  0509  120A  118A  252D   	fcall	_LCD_Cmd
  1768                           
  1769                           ;LCD_8bits.c: 86:             break;
  1770  050C  0008               	return
  1771  050D                     l1225:	
  1772                           
  1773                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  1774  050D  0873               	movf	LCD_Set_Cursor@columna,w
  1775  050E  3EC0               	addlw	192
  1776  050F  00F4               	movwf	??_LCD_Set_Cursor
  1777  0510  0874               	movf	??_LCD_Set_Cursor,w
  1778  0511  00F7               	movwf	LCD_Set_Cursor@corrimiento
  1779                           
  1780                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  1781  0512  0877               	movf	LCD_Set_Cursor@corrimiento,w
  1782  0513  120A  118A  252D   	fcall	_LCD_Cmd
  1783                           
  1784                           ;LCD_8bits.c: 90:             break;
  1785  0516  0008               	return
  1786  0517                     l1229:	
  1787                           
  1788                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  1789  0517  3080               	movlw	128
  1790  0518  120A  118A  252D   	fcall	_LCD_Cmd
  1791                           
  1792                           ;LCD_8bits.c: 93:     }
  1793  051B  0008               	return
  1794  051C                     l1231:	
  1795  051C  0876               	movf	LCD_Set_Cursor@linea,w
  1796  051D  00F4               	movwf	??_LCD_Set_Cursor
  1797  051E  01F5               	clrf	??_LCD_Set_Cursor+1
  1798                           
  1799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1800                           ; Switch size 1, requested type "simple"
  1801                           ; Number of cases is 1, Range of values is 0 to 0
  1802                           ; switch strategies available:
  1803                           ; Name         Instructions Cycles
  1804                           ; simple_byte            4     3 (average)
  1805                           ; direct_byte           11     8 (fixed)
  1806                           ; jumptable            260     6 (fixed)
  1807                           ;	Chosen strategy is simple_byte
  1808  051F  0875               	movf	??_LCD_Set_Cursor+1,w
  1809  0520  3A00               	xorlw	0	; case 0
  1810  0521  1903               	skipnz
  1811  0522  2D24               	goto	l1503
  1812  0523  2D17               	goto	l1229
  1813  0524                     l1503:	
  1814                           
  1815                           ; Switch size 1, requested type "simple"
  1816                           ; Number of cases is 2, Range of values is 1 to 2
  1817                           ; switch strategies available:
  1818                           ; Name         Instructions Cycles
  1819                           ; simple_byte            7     4 (average)
  1820                           ; direct_byte           17    11 (fixed)
  1821                           ; jumptable            263     9 (fixed)
  1822                           ;	Chosen strategy is simple_byte
  1823  0524  0874               	movf	??_LCD_Set_Cursor,w
  1824  0525  3A01               	xorlw	1	; case 1
  1825  0526  1903               	skipnz
  1826  0527  2D03               	goto	l1221
  1827  0528  3A03               	xorlw	3	; case 2
  1828  0529  1903               	skipnz
  1829  052A  2D0D               	goto	l1225
  1830  052B  2D17               	goto	l1229
  1831  052C  0008               	return
  1832  052D                     __end_of_LCD_Set_Cursor:	
  1833                           
  1834                           	psect	text9
  1835  052D                     __ptext9:	
  1836 ;; *************** function _LCD_Cmd *****************
  1837 ;; Defined at:
  1838 ;;		line 21 in file "LCD_8bits.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  comando         1    wreg     unsigned char 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  comando         1    2[COMMON] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1852 ;;      Params:         0       0       0       0       0
  1853 ;;      Locals:         1       0       0       0       0
  1854 ;;      Temps:          2       0       0       0       0
  1855 ;;      Totals:         3       0       0       0       0
  1856 ;;Total ram usage:        3 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_LCD_clear
  1862 ;;		_LCD_init
  1863 ;;		_LCD_Set_Cursor
  1864 ;;		_LCD_home
  1865 ;;		_LCD_Shift_links
  1866 ;;		_LCD_Shift_rechts
  1867 ;;		_LCD_Cursor_rechts
  1868 ;;		_LCD_Cursor_links
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           
  1873                           ;psect for function _LCD_Cmd
  1874  052D                     _LCD_Cmd:	
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _LCD_Cmd: [wreg]
  1878                           ;LCD_Cmd@comando stored from wreg
  1879  052D  00F2               	movwf	LCD_Cmd@comando
  1880                           
  1881                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  1882  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1883  052F  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0530  1007               	bcf	7,0	;volatile
  1885                           
  1886                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1887  0531  3007               	movlw	7
  1888  0532  00F1               	movwf	??_LCD_Cmd+1
  1889  0533  307D               	movlw	125
  1890  0534  00F0               	movwf	??_LCD_Cmd
  1891  0535                     u697:	
  1892  0535  0BF0               	decfsz	??_LCD_Cmd,f
  1893  0536  2D35               	goto	u697
  1894  0537  0BF1               	decfsz	??_LCD_Cmd+1,f
  1895  0538  2D35               	goto	u697
  1896                           
  1897                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  1898  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1899  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1900  053B  1487               	bsf	7,1	;volatile
  1901                           
  1902                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1903  053C  3007               	movlw	7
  1904  053D  00F1               	movwf	??_LCD_Cmd+1
  1905  053E  307D               	movlw	125
  1906  053F  00F0               	movwf	??_LCD_Cmd
  1907  0540                     u707:	
  1908  0540  0BF0               	decfsz	??_LCD_Cmd,f
  1909  0541  2D40               	goto	u707
  1910  0542  0BF1               	decfsz	??_LCD_Cmd+1,f
  1911  0543  2D40               	goto	u707
  1912                           
  1913                           ;LCD_8bits.c: 26:     PORTD = comando;
  1914  0544  0872               	movf	LCD_Cmd@comando,w
  1915  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0547  0088               	movwf	8	;volatile
  1918                           
  1919                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1920  0548  3007               	movlw	7
  1921  0549  00F1               	movwf	??_LCD_Cmd+1
  1922  054A  307D               	movlw	125
  1923  054B  00F0               	movwf	??_LCD_Cmd
  1924  054C                     u717:	
  1925  054C  0BF0               	decfsz	??_LCD_Cmd,f
  1926  054D  2D4C               	goto	u717
  1927  054E  0BF1               	decfsz	??_LCD_Cmd+1,f
  1928  054F  2D4C               	goto	u717
  1929                           
  1930                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  1931  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1932  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1933  0552  1087               	bcf	7,1	;volatile
  1934                           
  1935                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1936  0553  3007               	movlw	7
  1937  0554  00F1               	movwf	??_LCD_Cmd+1
  1938  0555  307D               	movlw	125
  1939  0556  00F0               	movwf	??_LCD_Cmd
  1940  0557                     u727:	
  1941  0557  0BF0               	decfsz	??_LCD_Cmd,f
  1942  0558  2D57               	goto	u727
  1943  0559  0BF1               	decfsz	??_LCD_Cmd+1,f
  1944  055A  2D57               	goto	u727
  1945  055B  0008               	return
  1946  055C                     __end_of_LCD_Cmd:	
  1947                           
  1948                           	psect	text10
  1949  045C                     __ptext10:	
  1950 ;; *************** function _I2C_Master_Write *****************
  1951 ;; Defined at:
  1952 ;;		line 65 in file "I2C.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  d               2    0[COMMON] unsigned int 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0, pclath, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         2       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0
  1969 ;;      Totals:         2       0       0       0       0
  1970 ;;Total ram usage:        2 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    1
  1973 ;; This function calls:
  1974 ;;		_I2C_Master_Wait
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _I2C_Master_Write
  1982  045C                     _I2C_Master_Write:	
  1983                           
  1984                           ;I2C.c: 65: void I2C_Master_Write(unsigned d);I2C.c: 66: {;I2C.c: 67:     I2C_Master_Wai
      +                          t();
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  1988  045C  120A  118A  2464   	fcall	_I2C_Master_Wait
  1989                           
  1990                           ;I2C.c: 68:     SSPBUF = d;
  1991  045F  0870               	movf	I2C_Master_Write@d,w
  1992  0460  1283               	bcf	3,5	;RP0=0, select bank0
  1993  0461  1303               	bcf	3,6	;RP1=0, select bank0
  1994  0462  0093               	movwf	19	;volatile
  1995  0463  0008               	return
  1996  0464                     __end_of_I2C_Master_Write:	
  1997                           
  1998                           	psect	text11
  1999  0455                     __ptext11:	
  2000 ;; *************** function _I2C_Master_Stop *****************
  2001 ;; Defined at:
  2002 ;;		line 55 in file "I2C.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;		None
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0, pclath, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2016 ;;      Params:         0       0       0       0       0
  2017 ;;      Locals:         0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0
  2019 ;;      Totals:         0       0       0       0       0
  2020 ;;Total ram usage:        0 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    1
  2023 ;; This function calls:
  2024 ;;		_I2C_Master_Wait
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           
  2031                           ;psect for function _I2C_Master_Stop
  2032  0455                     _I2C_Master_Stop:	
  2033                           
  2034                           ;I2C.c: 57:     I2C_Master_Wait();
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  2038  0455  120A  118A  2464   	fcall	_I2C_Master_Wait
  2039                           
  2040                           ;I2C.c: 58:     SSPCON2bits.PEN = 1;
  2041  0458  1683               	bsf	3,5	;RP0=1, select bank1
  2042  0459  1303               	bcf	3,6	;RP1=0, select bank1
  2043  045A  1511               	bsf	17,2	;volatile
  2044  045B  0008               	return
  2045  045C                     __end_of_I2C_Master_Stop:	
  2046                           
  2047                           	psect	text12
  2048  044E                     __ptext12:	
  2049 ;; *************** function _I2C_Master_Start *****************
  2050 ;; Defined at:
  2051 ;;		line 39 in file "I2C.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, pclath, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2065 ;;      Params:         0       0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0
  2068 ;;      Totals:         0       0       0       0       0
  2069 ;;Total ram usage:        0 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    1
  2072 ;; This function calls:
  2073 ;;		_I2C_Master_Wait
  2074 ;; This function is called by:
  2075 ;;		_main
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function _I2C_Master_Start
  2081  044E                     _I2C_Master_Start:	
  2082                           
  2083                           ;I2C.c: 41:     I2C_Master_Wait();
  2084                           
  2085                           ;incstack = 0
  2086                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  2087  044E  120A  118A  2464   	fcall	_I2C_Master_Wait
  2088                           
  2089                           ;I2C.c: 42:     SSPCON2bits.SEN = 1;
  2090  0451  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0452  1303               	bcf	3,6	;RP1=0, select bank1
  2092  0453  1411               	bsf	17,0	;volatile
  2093  0454  0008               	return
  2094  0455                     __end_of_I2C_Master_Start:	
  2095                           
  2096                           	psect	text13
  2097  04D5                     __ptext13:	
  2098 ;; *************** function _I2C_Master_Read *****************
  2099 ;; Defined at:
  2100 ;;		line 74 in file "I2C.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  a               2    0[COMMON] unsigned short 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  temp            2    4[COMMON] unsigned short 
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  2    0[COMMON] unsigned short 
  2107 ;; Registers used:
  2108 ;;		wreg, status,2, status,0, pclath, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2114 ;;      Params:         2       0       0       0       0
  2115 ;;      Locals:         2       0       0       0       0
  2116 ;;      Temps:          2       0       0       0       0
  2117 ;;      Totals:         6       0       0       0       0
  2118 ;;Total ram usage:        6 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    1
  2121 ;; This function calls:
  2122 ;;		_I2C_Master_Wait
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           
  2129                           ;psect for function _I2C_Master_Read
  2130  04D5                     _I2C_Master_Read:	
  2131                           
  2132                           ;I2C.c: 74: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 75: {;I2C.c: 76:    
      +                           unsigned short temp;;I2C.c: 77:     I2C_Master_Wait();
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  2136  04D5  120A  118A  2464  120A  118A  	fcall	_I2C_Master_Wait
  2137                           
  2138                           ;I2C.c: 78:     SSPCON2bits.RCEN = 1;
  2139  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2140  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2141  04DC  1591               	bsf	17,3	;volatile
  2142                           
  2143                           ;I2C.c: 79:     I2C_Master_Wait();
  2144  04DD  120A  118A  2464  120A  118A  	fcall	_I2C_Master_Wait
  2145                           
  2146                           ;I2C.c: 80:     temp = SSPBUF;
  2147  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2148  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2149  04E4  0813               	movf	19,w	;volatile
  2150  04E5  00F2               	movwf	??_I2C_Master_Read
  2151  04E6  01F3               	clrf	??_I2C_Master_Read+1
  2152  04E7  0872               	movf	??_I2C_Master_Read,w
  2153  04E8  00F4               	movwf	I2C_Master_Read@temp
  2154  04E9  0873               	movf	??_I2C_Master_Read+1,w
  2155  04EA  00F5               	movwf	I2C_Master_Read@temp+1
  2156                           
  2157                           ;I2C.c: 81:     I2C_Master_Wait();
  2158  04EB  120A  118A  2464  120A  118A  	fcall	_I2C_Master_Wait
  2159                           
  2160                           ;I2C.c: 82:     if(a == 1){
  2161  04F0  0370               	decf	I2C_Master_Read@a,w
  2162  04F1  0471               	iorwf	I2C_Master_Read@a+1,w
  2163  04F2  1D03               	btfss	3,2
  2164  04F3  2CF8               	goto	l182
  2165                           
  2166                           ;I2C.c: 83:         SSPCON2bits.ACKDT = 0;
  2167  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2168  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  2169  04F6  1291               	bcf	17,5	;volatile
  2170                           
  2171                           ;I2C.c: 84:     }else{
  2172  04F7  2CFB               	goto	l183
  2173  04F8                     l182:	
  2174                           
  2175                           ;I2C.c: 85:         SSPCON2bits.ACKDT = 1;
  2176  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2177  04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2178  04FA  1691               	bsf	17,5	;volatile
  2179  04FB                     l183:	
  2180                           ;I2C.c: 86:     }
  2181                           
  2182                           
  2183                           ;I2C.c: 87:     SSPCON2bits.ACKEN = 1;
  2184  04FB  1611               	bsf	17,4	;volatile
  2185                           
  2186                           ;I2C.c: 88:     return temp;
  2187  04FC  0875               	movf	I2C_Master_Read@temp+1,w
  2188  04FD  00F1               	movwf	?_I2C_Master_Read+1
  2189  04FE  0874               	movf	I2C_Master_Read@temp,w
  2190  04FF  00F0               	movwf	?_I2C_Master_Read
  2191  0500  0008               	return
  2192  0501                     __end_of_I2C_Master_Read:	
  2193                           
  2194                           	psect	text14
  2195  0464                     __ptext14:	
  2196 ;; *************** function _I2C_Master_Wait *****************
  2197 ;; Defined at:
  2198 ;;		line 32 in file "I2C.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2212 ;;      Params:         0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0
  2214 ;;      Temps:          0       0       0       0       0
  2215 ;;      Totals:         0       0       0       0       0
  2216 ;;Total ram usage:        0 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_I2C_Master_Start
  2222 ;;		_I2C_Master_Stop
  2223 ;;		_I2C_Master_Write
  2224 ;;		_I2C_Master_Read
  2225 ;;		_I2C_Master_RepeatedStart
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _I2C_Master_Wait
  2231  0464                     _I2C_Master_Wait:	
  2232  0464                     l164:	
  2233                           ;I2C.c: 34:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  2237                           
  2238  0464  1683               	bsf	3,5	;RP0=1, select bank1
  2239  0465  1303               	bcf	3,6	;RP1=0, select bank1
  2240  0466  1914               	btfsc	20,2	;volatile
  2241  0467  2C64               	goto	l164
  2242  0468  0811               	movf	17,w	;volatile
  2243  0469  391F               	andlw	31
  2244  046A  1903               	btfsc	3,2
  2245  046B  0008               	return
  2246  046C  2C64               	goto	l164
  2247  046D                     __end_of_I2C_Master_Wait:	
  2248                           
  2249                           	psect	text15
  2250  055C                     __ptext15:	
  2251 ;; *************** function _I2C_Master_Init *****************
  2252 ;; Defined at:
  2253 ;;		line 16 in file "I2C.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  c               4    0[BANK0 ] const unsigned long 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, pclath, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2267 ;;      Params:         0       4       0       0       0
  2268 ;;      Locals:         0       0       0       0       0
  2269 ;;      Temps:          0       4       0       0       0
  2270 ;;      Totals:         0       8       0       0       0
  2271 ;;Total ram usage:        8 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    1
  2274 ;; This function calls:
  2275 ;;		___lldiv
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function _I2C_Master_Init
  2283  055C                     _I2C_Master_Init:	
  2284                           
  2285                           ;I2C.c: 16: void I2C_Master_Init(const unsigned long c);I2C.c: 17: {;I2C.c: 18:     SSPC
      +                          ON = 0b00101000;
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  2289  055C  3028               	movlw	40
  2290  055D  1283               	bcf	3,5	;RP0=0, select bank0
  2291  055E  1303               	bcf	3,6	;RP1=0, select bank0
  2292  055F  0094               	movwf	20	;volatile
  2293                           
  2294                           ;I2C.c: 19:     SSPCON2 = 0;
  2295  0560  1683               	bsf	3,5	;RP0=1, select bank1
  2296  0561  1303               	bcf	3,6	;RP1=0, select bank1
  2297  0562  0191               	clrf	17	;volatile
  2298                           
  2299                           ;I2C.c: 20:     SSPADD = (4000000/(4*c))-1;
  2300  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0565  082E               	movf	I2C_Master_Init@c,w
  2303  0566  00B2               	movwf	??_I2C_Master_Init
  2304  0567  082F               	movf	I2C_Master_Init@c+1,w
  2305  0568  00B3               	movwf	??_I2C_Master_Init+1
  2306  0569  0830               	movf	I2C_Master_Init@c+2,w
  2307  056A  00B4               	movwf	??_I2C_Master_Init+2
  2308  056B  0831               	movf	I2C_Master_Init@c+3,w
  2309  056C  00B5               	movwf	??_I2C_Master_Init+3
  2310  056D  3002               	movlw	2
  2311  056E                     u385:	
  2312  056E  1003               	clrc
  2313  056F  0DB2               	rlf	??_I2C_Master_Init,f
  2314  0570  0DB3               	rlf	??_I2C_Master_Init+1,f
  2315  0571  0DB4               	rlf	??_I2C_Master_Init+2,f
  2316  0572  0DB5               	rlf	??_I2C_Master_Init+3,f
  2317  0573  3EFF               	addlw	-1
  2318  0574  1D03               	skipz
  2319  0575  2D6E               	goto	u385
  2320  0576  0835               	movf	??_I2C_Master_Init+3,w
  2321  0577  00F3               	movwf	___lldiv@divisor+3
  2322  0578  0834               	movf	??_I2C_Master_Init+2,w
  2323  0579  00F2               	movwf	___lldiv@divisor+2
  2324  057A  0833               	movf	??_I2C_Master_Init+1,w
  2325  057B  00F1               	movwf	___lldiv@divisor+1
  2326  057C  0832               	movf	??_I2C_Master_Init,w
  2327  057D  00F0               	movwf	___lldiv@divisor
  2328  057E  3000               	movlw	0
  2329  057F  00F7               	movwf	___lldiv@dividend+3
  2330  0580  303D               	movlw	61
  2331  0581  00F6               	movwf	___lldiv@dividend+2
  2332  0582  3009               	movlw	9
  2333  0583  00F5               	movwf	___lldiv@dividend+1
  2334  0584  3000               	movlw	0
  2335  0585  00F4               	movwf	___lldiv@dividend
  2336  0586  120A  118A  25D7   	fcall	___lldiv
  2337  0589  0870               	movf	?___lldiv,w
  2338  058A  3EFF               	addlw	255
  2339  058B  1683               	bsf	3,5	;RP0=1, select bank1
  2340  058C  1303               	bcf	3,6	;RP1=0, select bank1
  2341  058D  0093               	movwf	19	;volatile
  2342                           
  2343                           ;I2C.c: 21:     SSPSTAT = 0;
  2344  058E  0194               	clrf	20	;volatile
  2345                           
  2346                           ;I2C.c: 22:     TRISCbits.TRISC3 = 1;
  2347  058F  1587               	bsf	7,3	;volatile
  2348                           
  2349                           ;I2C.c: 23:     TRISCbits.TRISC4 = 1;
  2350  0590  1607               	bsf	7,4	;volatile
  2351  0591  0008               	return
  2352  0592                     __end_of_I2C_Master_Init:	
  2353                           
  2354                           	psect	text16
  2355  05D7                     __ptext16:	
  2356 ;; *************** function ___lldiv *****************
  2357 ;; Defined at:
  2358 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  divisor         4    0[COMMON] unsigned long 
  2361 ;;  dividend        4    4[COMMON] unsigned long 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  quotient        4    9[COMMON] unsigned long 
  2364 ;;  counter         1   13[COMMON] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  4    0[COMMON] unsigned long 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2374 ;;      Params:         8       0       0       0       0
  2375 ;;      Locals:         5       0       0       0       0
  2376 ;;      Temps:          1       0       0       0       0
  2377 ;;      Totals:        14       0       0       0       0
  2378 ;;Total ram usage:       14 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_I2C_Master_Init
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           
  2388                           ;psect for function ___lldiv
  2389  05D7                     ___lldiv:	
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2393  05D7  3000               	movlw	0
  2394  05D8  00FC               	movwf	___lldiv@quotient+3
  2395  05D9  3000               	movlw	0
  2396  05DA  00FB               	movwf	___lldiv@quotient+2
  2397  05DB  3000               	movlw	0
  2398  05DC  00FA               	movwf	___lldiv@quotient+1
  2399  05DD  3000               	movlw	0
  2400  05DE  00F9               	movwf	___lldiv@quotient
  2401  05DF  0873               	movf	___lldiv@divisor+3,w
  2402  05E0  0472               	iorwf	___lldiv@divisor+2,w
  2403  05E1  0471               	iorwf	___lldiv@divisor+1,w
  2404  05E2  0470               	iorwf	___lldiv@divisor,w
  2405  05E3  1903               	skipnz
  2406  05E4  2E2C               	goto	l1179
  2407  05E5  01FD               	clrf	___lldiv@counter
  2408  05E6  0AFD               	incf	___lldiv@counter,f
  2409  05E7                     l1165:	
  2410  05E7  1BF3               	btfsc	___lldiv@divisor+3,7
  2411  05E8  2DF7               	goto	l1167
  2412  05E9  3001               	movlw	1
  2413  05EA  00F8               	movwf	??___lldiv
  2414  05EB                     u315:	
  2415  05EB  1003               	clrc
  2416  05EC  0DF0               	rlf	___lldiv@divisor,f
  2417  05ED  0DF1               	rlf	___lldiv@divisor+1,f
  2418  05EE  0DF2               	rlf	___lldiv@divisor+2,f
  2419  05EF  0DF3               	rlf	___lldiv@divisor+3,f
  2420  05F0  0BF8               	decfsz	??___lldiv,f
  2421  05F1  2DEB               	goto	u315
  2422  05F2  3001               	movlw	1
  2423  05F3  00F8               	movwf	??___lldiv
  2424  05F4  0878               	movf	??___lldiv,w
  2425  05F5  07FD               	addwf	___lldiv@counter,f
  2426  05F6  2DE7               	goto	l1165
  2427  05F7                     l1167:	
  2428  05F7  3001               	movlw	1
  2429  05F8  00F8               	movwf	??___lldiv
  2430  05F9                     u335:	
  2431  05F9  1003               	clrc
  2432  05FA  0DF9               	rlf	___lldiv@quotient,f
  2433  05FB  0DFA               	rlf	___lldiv@quotient+1,f
  2434  05FC  0DFB               	rlf	___lldiv@quotient+2,f
  2435  05FD  0DFC               	rlf	___lldiv@quotient+3,f
  2436  05FE  0BF8               	decfsz	??___lldiv,f
  2437  05FF  2DF9               	goto	u335
  2438  0600  0873               	movf	___lldiv@divisor+3,w
  2439  0601  0277               	subwf	___lldiv@dividend+3,w
  2440  0602  1D03               	skipz
  2441  0603  2E0E               	goto	u345
  2442  0604  0872               	movf	___lldiv@divisor+2,w
  2443  0605  0276               	subwf	___lldiv@dividend+2,w
  2444  0606  1D03               	skipz
  2445  0607  2E0E               	goto	u345
  2446  0608  0871               	movf	___lldiv@divisor+1,w
  2447  0609  0275               	subwf	___lldiv@dividend+1,w
  2448  060A  1D03               	skipz
  2449  060B  2E0E               	goto	u345
  2450  060C  0870               	movf	___lldiv@divisor,w
  2451  060D  0274               	subwf	___lldiv@dividend,w
  2452  060E                     u345:	
  2453  060E  1C03               	skipc
  2454  060F  2E1F               	goto	l1175
  2455  0610  0870               	movf	___lldiv@divisor,w
  2456  0611  02F4               	subwf	___lldiv@dividend,f
  2457  0612  0871               	movf	___lldiv@divisor+1,w
  2458  0613  1C03               	skipc
  2459  0614  0F71               	incfsz	___lldiv@divisor+1,w
  2460  0615  02F5               	subwf	___lldiv@dividend+1,f
  2461  0616  0872               	movf	___lldiv@divisor+2,w
  2462  0617  1C03               	skipc
  2463  0618  0F72               	incfsz	___lldiv@divisor+2,w
  2464  0619  02F6               	subwf	___lldiv@dividend+2,f
  2465  061A  0873               	movf	___lldiv@divisor+3,w
  2466  061B  1C03               	skipc
  2467  061C  0F73               	incfsz	___lldiv@divisor+3,w
  2468  061D  02F7               	subwf	___lldiv@dividend+3,f
  2469  061E  1479               	bsf	___lldiv@quotient,0
  2470  061F                     l1175:	
  2471  061F  3001               	movlw	1
  2472  0620                     u355:	
  2473  0620  1003               	clrc
  2474  0621  0CF3               	rrf	___lldiv@divisor+3,f
  2475  0622  0CF2               	rrf	___lldiv@divisor+2,f
  2476  0623  0CF1               	rrf	___lldiv@divisor+1,f
  2477  0624  0CF0               	rrf	___lldiv@divisor,f
  2478  0625  3EFF               	addlw	-1
  2479  0626  1D03               	skipz
  2480  0627  2E20               	goto	u355
  2481  0628  3001               	movlw	1
  2482  0629  02FD               	subwf	___lldiv@counter,f
  2483  062A  1D03               	btfss	3,2
  2484  062B  2DF7               	goto	l1167
  2485  062C                     l1179:	
  2486  062C  087C               	movf	___lldiv@quotient+3,w
  2487  062D  00F3               	movwf	?___lldiv+3
  2488  062E  087B               	movf	___lldiv@quotient+2,w
  2489  062F  00F2               	movwf	?___lldiv+2
  2490  0630  087A               	movf	___lldiv@quotient+1,w
  2491  0631  00F1               	movwf	?___lldiv+1
  2492  0632  0879               	movf	___lldiv@quotient,w
  2493  0633  00F0               	movwf	?___lldiv
  2494  0634  0008               	return
  2495  0635                     __end_of___lldiv:	
  2496  007E                     btemp	set	126	;btemp
  2497  007E                     wtemp0	set	126


Data Sizes:
    Strings     4
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    voltaje_map	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(COMMON[6]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_clear->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_mapear

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2842
                                              9 BANK0      3     3      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                          _LCD_clear
                           _LCD_init
                             _mapear
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      56
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1657
                                              6 COMMON     6     4      2
                                              0 BANK0      9     9      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            2     2      0      22
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     145
                                              2 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     287
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2      98
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      6     4      2     121
                                              0 COMMON     6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_clear
     _LCD_Cmd
   _LCD_init
     _LCD_Cmd
   _mapear
     ___wmul
   _uint_to_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb 22 16:13:37 2020

                           pc 0002                   __CFG_CP$OFF 0000               mapear@resultado 002F  
                          fsr 0004           ___wmul@multiplicand 0072                           l164 0464  
                         l182 04F8                           l183 04FB                           l273 049C  
                         _GIE 005F                           u400 06A3                           u315 05EB  
                         u335 05F9                           u415 06CA                           u345 060E  
                         u425 06F8                  __CFG_CPD$OFF 0000                           u355 0620  
                         u275 049D                           u435 0726                           u285 04A4  
                         u607 0654                           u385 056E                           u617 065E  
                         u707 0540                           u627 0668                           u717 054C  
                         u637 0673                           u727 0557                           u647 0680  
                         u657 068D                           u577 078D                           u667 0698  
                         u587 0639                           u677 048C                           u597 0648  
                         u687 0476                           u697 0535                  _uint_to_char 0592  
                         fsr0 0004                           indf 0000  __size_of_LCD_Write_Character 000F  
             __end_of_LCD_Cmd 055C                  __CFG_LVP$OFF 0000                _LCD_Set_Cursor 0501  
                        l1221 0503                          l1231 051C                          l1225 050D  
                        l1217 04B6                          l1241 0596                          l1147 0494  
                        l1331 0738                          l1323 06EF                          l1251 05A0  
                        l1243 0598                          l1165 05E7                          l1229 0517  
                        l1325 070A                          l1317 06C1                          l1501 05B5  
                        l1253 05A2                          l1245 059A                          l1261 05AD  
                        l1175 061F                          l1167 05F7                          l1503 0524  
                        l1319 06DC                          l1255 05A4                          l1247 059C  
                        l1263 05D5                          l1239 0594                          l1329 071D  
                        l1257 05A6                          l1249 059E                          l1179 062C  
                        l1259 05A8                          l1389 0766                          STR_1 0009  
                        _PEIE 005E                  __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070  
                        _main 073A                          btemp 007E                          start 0000  
          ??_LCD_Write_String 0072                 __CFG_IESO$OFF 0000            __size_of_LCD_clear 0016  
                 _voltaje_map 002C              ?_I2C_Master_Init 002E              ?_I2C_Master_Read 0070  
            ?_I2C_Master_Wait 0070              ?_I2C_Master_Stop 0070              __end_of_LCD_init 069C  
                       ?_main 0070                 __CFG_WDTE$OFF 0000            uint_to_char@numChr 0073  
             __end_of___lldiv 0635            uint_to_char@numero 0072                         _PORTD 0008  
                       _TRISD 0088                         _SSPIE 0463                         _SSPIF 0063  
              __CFG_FCMEN$OFF 0000        __end_of_LCD_Set_Cursor 052D                   mapear@F1337 0020  
              __CFG_BOREN$OFF 0000                         pclath 000A                         status 0003  
                       wtemp0 007E                   mapear@valor 002E                __CFG_MCLRE$OFF 0000  
             __initialization 07EC                  __end_of_main 07EC                        ??_main 0037  
                   ??_LCD_Cmd 0070             ?_I2C_Master_Start 0070             ?_I2C_Master_Write 0070  
           __end_of_LCD_clear 0492               ?_LCD_Set_Cursor 0073            ??_I2C_Master_Start 0070  
          ??_I2C_Master_Write 0072                        _SSPADD 0093                        _TRISC0 0438  
                      _TRISC1 0439                        _TRISC3 043B                        _TRISC4 043C  
          uint_to_array@F1341 0026                        _SSPCON 0014                        _SSPBUF 0013  
 LCD_Write_Character@caracter 0071                __CFG_PWRTE$OFF 0000                        ___wmul 0492  
                   ??___lldiv 0078                        _mapear 069C                  mapear@limSup 0077  
     __end_of__initialization 07FC                     ?_LCD_init 0070                __pcstackCOMMON 0070  
         _LCD_Write_Character 046D          ?_LCD_Write_Character 0070                LCD_Cmd@comando 0072  
                  __pbssBANK0 0020     LCD_Set_Cursor@corrimiento 0077                    ??_LCD_init 0073  
                  __pmaintext 073A                       ?___wmul 0070                       ?_mapear 0076  
   __size_of_LCD_Write_String 0022                       _LCD_Cmd 052D         ??_LCD_Write_Character 0070  
                     _SSPCON2 0091                       _SSPSTAT 0094                    __stringtab 0003  
                     ___lldiv 05D7               __size_of___wmul 0021               __size_of_mapear 009E  
            ??_LCD_Set_Cursor 0074                       __ptext1 0592                       __ptext2 069C  
                     __ptext3 0492                       __ptext4 0635                       __ptext5 047C  
                     __ptext6 04B3                       __ptext7 046D                       __ptext8 0501  
                     __ptext9 052D      __size_of_I2C_Master_Init 0036      __size_of_I2C_Master_Read 002C  
    __size_of_I2C_Master_Wait 0009      __size_of_I2C_Master_Stop 0007                     _LCD_clear 047C  
        end_of_initialization 07FC     __size_of_I2C_Master_Start 0007     __size_of_I2C_Master_Write 0008  
             ___lldiv@divisor 0070               ___lldiv@counter 007D              I2C_Master_Init@c 002E  
            I2C_Master_Read@a 0070                     _PORTCbits 0007                 mapear@limReal 0076  
                   _TRISCbits 0087                    ?_LCD_clear 0070             LCD_Write_String@a 0074  
           LCD_Write_String@n 0072             __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0073  
              __end_of___wmul 04B3              _LCD_Write_String 04B3                __end_of_mapear 073A  
               ?_uint_to_char 0070           start_initialization 07EC             ??_I2C_Master_Init 0032  
           ??_I2C_Master_Read 0072             ??_I2C_Master_Wait 0070             ??_I2C_Master_Stop 0070  
    __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??___wmul 0074                      ??_mapear 0078  
              ??_uint_to_char 0070                      ?_LCD_Cmd 0070                     ___latbits 0002  
               __pcstackBANK0 002E                   ??_LCD_clear 0073              _I2C_Master_Start 044E  
            _I2C_Master_Write 045C                      ?___lldiv 0070                     __pstrings 0003  
 __end_of_LCD_Write_Character 047C                ___wmul@product 0074                      _LCD_init 0635  
                 __stringbase 0008             ___wmul@multiplier 0070              __size_of_LCD_Cmd 002F  
         I2C_Master_Read@temp 0074      __end_of_LCD_Write_String 04D5          __end_of_uint_to_char 05D7  
            __size_of___lldiv 005E            __end_of__stringtab 0009               _I2C_Master_Init 055C  
             _I2C_Master_Read 04D5               _I2C_Master_Wait 0464               _I2C_Master_Stop 0455  
                    __ptext10 045C                      __ptext11 0455                      __ptext12 044E  
                    __ptext13 04D5                      __ptext14 0464                      __ptext15 055C  
                    __ptext16 05D7             __CFG_BOR4V$BOR40V 0000       __size_of_LCD_Set_Cursor 002C  
               __size_of_main 00B2                      _valorADC 002D           LCD_Set_Cursor@linea 0076  
    __end_of_I2C_Master_Start 0455      __end_of_I2C_Master_Write 0464              ___lldiv@dividend 0074  
                   stringcode 0003       __end_of_I2C_Master_Init 0592       __end_of_I2C_Master_Read 0501  
     __end_of_I2C_Master_Wait 046D       __end_of_I2C_Master_Stop 045C               mapear@dividendo 0035  
            ___lldiv@quotient 0079             I2C_Master_Write@d 0070                      stringdir 0003  
                    stringtab 0003                   _SSPCON2bits 0091         __size_of_uint_to_char 0045  
