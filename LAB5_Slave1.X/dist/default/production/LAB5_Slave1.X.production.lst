

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Feb 19 14:42:15 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.05
    15                           ; Generated 20/12/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  008F                     	;# 
   249  0090                     	;# 
   250  0091                     	;# 
   251  0092                     	;# 
   252  0093                     	;# 
   253  0093                     	;# 
   254  0093                     	;# 
   255  0094                     	;# 
   256  0095                     	;# 
   257  0096                     	;# 
   258  0097                     	;# 
   259  0098                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  009F                     	;# 
   267  0105                     	;# 
   268  0107                     	;# 
   269  0108                     	;# 
   270  0109                     	;# 
   271  010C                     	;# 
   272  010C                     	;# 
   273  010D                     	;# 
   274  010E                     	;# 
   275  010F                     	;# 
   276  0185                     	;# 
   277  0187                     	;# 
   278  0188                     	;# 
   279  0189                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  000B                     _INTCONbits	set	11
   283  000C                     _PIR1bits	set	12
   284  001F                     _ADCON0bits	set	31
   285  001E                     _ADRESH	set	30
   286  0066                     _ADIF	set	102
   287  009E                     _ADRESL	set	158
   288  008C                     _PIE1bits	set	140
   289  0089                     _TRISEbits	set	137
   290  0085                     _TRISAbits	set	133
   291  009F                     _ADCON1bits	set	159
   292  0466                     _ADIE	set	1126
   293  0188                     _ANSELbits	set	392
   294                           
   295                           ; #config settings
   296  0000                     
   297                           	psect	cinit
   298  000F                     start_initialization:	
   299  000F                     __initialization:	
   300                           
   301                           ; Clear objects allocated to COMMON
   302  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   303  0010                     end_of_initialization:	
   304                           ;End of C runtime variable initialization code
   305                           
   306  0010                     __end_of__initialization:	
   307  0010  0183               	clrf	3
   308  0011  120A  118A  28F3   	ljmp	_main	;jump to C main() function
   309                           
   310                           	psect	bssCOMMON
   311  007A                     __pbssCOMMON:	
   312  007A                     _valorADC:	
   313  007A                     	ds	1
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:	
   317  0070                     ?_ADCinit:	
   318  0070                     ?_ISR:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ??_ISR:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_main:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329  0070                     	ds	3
   330  0073                     ?_ADConfig:	
   331  0073                     ??_ADCinit:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ADConfig@canal:	
   335                           ; 1 bytes @ 0x3
   336                           
   337                           
   338                           ; 1 bytes @ 0x3
   339  0073                     	ds	1
   340  0074                     ADConfig@justificado:	
   341                           
   342                           ; 1 bytes @ 0x4
   343  0074                     	ds	1
   344  0075                     ??_ADConfig:	
   345                           
   346                           ; 1 bytes @ 0x5
   347  0075                     	ds	2
   348  0077                     ADConfig@oscFreq:	
   349                           
   350                           ; 1 bytes @ 0x7
   351  0077                     	ds	1
   352  0078                     ??_main:	
   353                           
   354                           ; 1 bytes @ 0x8
   355  0078                     	ds	2
   356                           
   357                           	psect	maintext
   358  00F3                     __pmaintext:	
   359 ;;
   360 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   361 ;;
   362 ;; *************** function _main *****************
   363 ;; Defined at:
   364 ;;		line 38 in file "Slave1_main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : B00/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   378 ;;      Params:         0       0       0       0       0
   379 ;;      Locals:         0       0       0       0       0
   380 ;;      Temps:          2       0       0       0       0
   381 ;;      Totals:         2       0       0       0       0
   382 ;;Total ram usage:        2 bytes
   383 ;; Hardware stack levels required when called:    2
   384 ;; This function calls:
   385 ;;		_ADCinit
   386 ;;		_ADConfig
   387 ;; This function is called by:
   388 ;;		Startup code after reset
   389 ;; This function uses a non-reentrant model
   390 ;;
   391                           
   392                           
   393                           ;psect for function _main
   394  00F3                     _main:	
   395                           
   396                           ;Slave1_main.c: 39:     ADConfig(4, 7, 'H');
   397                           
   398                           ;incstack = 0
   399                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   400  00F3  3007               	movlw	7
   401  00F4  00F8               	movwf	??_main
   402  00F5  0878               	movf	??_main,w
   403  00F6  00F3               	movwf	ADConfig@canal
   404  00F7  3048               	movlw	72
   405  00F8  00F9               	movwf	??_main+1
   406  00F9  0879               	movf	??_main+1,w
   407  00FA  00F4               	movwf	ADConfig@justificado
   408  00FB  3004               	movlw	4
   409  00FC  120A  118A  2014  120A  118A  	fcall	_ADConfig
   410                           
   411                           ;Slave1_main.c: 40:     ADCinit();
   412  0101  120A  118A  2107  120A  118A  	fcall	_ADCinit
   413  0106                     l25:	
   414                           ;Slave1_main.c: 41:     while(1){}
   415                           
   416  0106  2906               	goto	l25
   417  0107                     __end_of_main:	
   418                           
   419                           	psect	text1
   420  0014                     __ptext1:	
   421 ;; *************** function _ADConfig *****************
   422 ;; Defined at:
   423 ;;		line 16 in file "ADC.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  oscFreq         1    wreg     unsigned char 
   426 ;;  canal           1    3[COMMON] unsigned char 
   427 ;;  justificado     1    4[COMMON] unsigned char 
   428 ;; Auto vars:     Size  Location     Type
   429 ;;  oscFreq         1    7[COMMON] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   434 ;; Tracked objects:
   435 ;;		On entry : 0/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   439 ;;      Params:         2       0       0       0       0
   440 ;;      Locals:         1       0       0       0       0
   441 ;;      Temps:          2       0       0       0       0
   442 ;;      Totals:         5       0       0       0       0
   443 ;;Total ram usage:        5 bytes
   444 ;; Hardware stack levels used:    1
   445 ;; Hardware stack levels required when called:    1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           
   454                           ;psect for function _ADConfig
   455  0014                     _ADConfig:	
   456                           
   457                           ;incstack = 0
   458                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
   459                           ;ADConfig@oscFreq stored from wreg
   460  0014  00F7               	movwf	ADConfig@oscFreq
   461                           
   462                           ;ADC.c: 17:     switch(oscFreq){
   463  0015  282E               	goto	l877
   464  0016                     l867:	
   465                           
   466                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
   467  0016  303F               	movlw	-193
   468  0017  1283               	bcf	3,5	;RP0=0, select bank0
   469  0018  1303               	bcf	3,6	;RP1=0, select bank0
   470  0019  059F               	andwf	31,f	;volatile
   471                           
   472                           ;ADC.c: 20:             break;
   473  001A  284D               	goto	l879
   474  001B                     l869:	
   475  001B  2827               	goto	l875
   476  001C                     l871:	
   477                           ;ADC.c: 23:             break;
   478                           
   479                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
   480                           
   481                           
   482                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
   483  001C  1283               	bcf	3,5	;RP0=0, select bank0
   484  001D  1303               	bcf	3,6	;RP1=0, select bank0
   485  001E  081F               	movf	31,w	;volatile
   486  001F  393F               	andlw	-193
   487  0020  3880               	iorlw	128
   488  0021  282C               	goto	L2
   489  0022                     l873:	
   490                           ;ADC.c: 26:             break;
   491                           
   492                           
   493                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
   494  0022  30C0               	movlw	192
   495  0023  1283               	bcf	3,5	;RP0=0, select bank0
   496  0024  1303               	bcf	3,6	;RP1=0, select bank0
   497  0025  049F               	iorwf	31,f	;volatile
   498                           
   499                           ;ADC.c: 29:             break;
   500  0026  284D               	goto	l879
   501  0027                     l875:	
   502                           
   503                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
   504  0027  1283               	bcf	3,5	;RP0=0, select bank0
   505  0028  1303               	bcf	3,6	;RP1=0, select bank0
   506  0029  081F               	movf	31,w	;volatile
   507  002A  393F               	andlw	-193
   508  002B  3840               	iorlw	64
   509  002C                     L2:	
   510  002C  009F               	movwf	31	;volatile
   511                           
   512                           ;ADC.c: 32:     }
   513  002D  284D               	goto	l879
   514  002E                     l877:	
   515  002E  0877               	movf	ADConfig@oscFreq,w
   516  002F  00F5               	movwf	??_ADConfig
   517  0030  01F6               	clrf	??_ADConfig+1
   518                           
   519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   520                           ; Switch size 1, requested type "simple"
   521                           ; Number of cases is 1, Range of values is 0 to 0
   522                           ; switch strategies available:
   523                           ; Name         Instructions Cycles
   524                           ; simple_byte            4     3 (average)
   525                           ; direct_byte           11     8 (fixed)
   526                           ; jumptable            260     6 (fixed)
   527                           ;	Chosen strategy is simple_byte
   528  0031  0876               	movf	??_ADConfig+1,w
   529  0032  3A00               	xorlw	0	; case 0
   530  0033  1903               	skipnz
   531  0034  2836               	goto	l981
   532  0035  2827               	goto	l875
   533  0036                     l981:	
   534                           
   535                           ; Switch size 1, requested type "simple"
   536                           ; Number of cases is 4, Range of values is 1 to 20
   537                           ; switch strategies available:
   538                           ; Name         Instructions Cycles
   539                           ; simple_byte           13     7 (average)
   540                           ; direct_byte           71    11 (fixed)
   541                           ; jumptable            263     9 (fixed)
   542                           ;	Chosen strategy is simple_byte
   543  0036  0875               	movf	??_ADConfig,w
   544  0037  3A01               	xorlw	1	; case 1
   545  0038  1903               	skipnz
   546  0039  2816               	goto	l867
   547  003A  3A05               	xorlw	5	; case 4
   548  003B  1903               	skipnz
   549  003C  281B               	goto	l869
   550  003D  3A0C               	xorlw	12	; case 8
   551  003E  1903               	skipnz
   552  003F  281C               	goto	l871
   553  0040  3A1C               	xorlw	28	; case 20
   554  0041  1903               	skipnz
   555  0042  2822               	goto	l873
   556  0043  2827               	goto	l875
   557  0044                     l61:	
   558                           ;ADC.c: 34:         case 'H':
   559                           
   560  0044  2849               	goto	l64
   561  0045                     l63:	
   562                           ;ADC.c: 37:         case 'L':
   563                           
   564                           ;ADC.c: 36:             break;
   565                           
   566                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
   567                           
   568                           
   569                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
   570  0045  1683               	bsf	3,5	;RP0=1, select bank1
   571  0046  1303               	bcf	3,6	;RP1=0, select bank1
   572  0047  179F               	bsf	31,7	;volatile
   573                           
   574                           ;ADC.c: 39:             break;
   575  0048  28A8               	goto	l899
   576  0049                     l64:	
   577                           ;ADC.c: 40:         default:
   578                           
   579                           
   580                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
   581  0049  1683               	bsf	3,5	;RP0=1, select bank1
   582  004A  1303               	bcf	3,6	;RP1=0, select bank1
   583  004B  139F               	bcf	31,7	;volatile
   584                           
   585                           ;ADC.c: 42:     }
   586  004C  28A8               	goto	l899
   587  004D                     l879:	
   588  004D  0874               	movf	ADConfig@justificado,w
   589  004E  00F5               	movwf	??_ADConfig
   590  004F  01F6               	clrf	??_ADConfig+1
   591                           
   592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   593                           ; Switch size 1, requested type "simple"
   594                           ; Number of cases is 1, Range of values is 0 to 0
   595                           ; switch strategies available:
   596                           ; Name         Instructions Cycles
   597                           ; simple_byte            4     3 (average)
   598                           ; direct_byte           11     8 (fixed)
   599                           ; jumptable            260     6 (fixed)
   600                           ;	Chosen strategy is simple_byte
   601  0050  0876               	movf	??_ADConfig+1,w
   602  0051  3A00               	xorlw	0	; case 0
   603  0052  1903               	skipnz
   604  0053  2855               	goto	l983
   605  0054  2849               	goto	l64
   606  0055                     l983:	
   607                           
   608                           ; Switch size 1, requested type "simple"
   609                           ; Number of cases is 2, Range of values is 72 to 76
   610                           ; switch strategies available:
   611                           ; Name         Instructions Cycles
   612                           ; simple_byte            7     4 (average)
   613                           ; direct_byte           26    11 (fixed)
   614                           ; jumptable            263     9 (fixed)
   615                           ;	Chosen strategy is simple_byte
   616  0055  0875               	movf	??_ADConfig,w
   617  0056  3A48               	xorlw	72	; case 72
   618  0057  1903               	skipnz
   619  0058  2844               	goto	l61
   620  0059  3A04               	xorlw	4	; case 76
   621  005A  1903               	skipnz
   622  005B  2845               	goto	l63
   623  005C  2849               	goto	l64
   624  005D                     l66:	
   625                           ;ADC.c: 44:         case 0:
   626                           
   627                           
   628                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
   629  005D  1405               	bsf	5,0	;volatile
   630                           
   631                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
   632  005E  1683               	bsf	3,5	;RP0=1, select bank3
   633  005F  1703               	bsf	3,6	;RP1=1, select bank3
   634  0060  1408               	bsf	8,0	;volatile
   635                           
   636                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
   637  0061  30C3               	movlw	-61
   638  0062  1283               	bcf	3,5	;RP0=0, select bank0
   639  0063  1303               	bcf	3,6	;RP1=0, select bank0
   640  0064  059F               	andwf	31,f	;volatile
   641                           
   642                           ;ADC.c: 48:             break;
   643  0065  28CA               	goto	l67
   644  0066                     l68:	
   645                           ;ADC.c: 49:         case 1:
   646                           
   647                           
   648                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
   649  0066  1485               	bsf	5,1	;volatile
   650                           
   651                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
   652  0067  1683               	bsf	3,5	;RP0=1, select bank3
   653  0068  1703               	bsf	3,6	;RP1=1, select bank3
   654  0069  1488               	bsf	8,1	;volatile
   655                           
   656                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
   657  006A  1283               	bcf	3,5	;RP0=0, select bank0
   658  006B  1303               	bcf	3,6	;RP1=0, select bank0
   659  006C  081F               	movf	31,w	;volatile
   660  006D  39C3               	andlw	-61
   661  006E  3804               	iorlw	4
   662  006F  28A6               	goto	L8
   663  0070                     l69:	
   664                           ;ADC.c: 54:         case 2:
   665                           
   666                           ;ADC.c: 53:             break;
   667                           
   668                           
   669                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
   670  0070  1505               	bsf	5,2	;volatile
   671                           
   672                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
   673  0071  1683               	bsf	3,5	;RP0=1, select bank3
   674  0072  1703               	bsf	3,6	;RP1=1, select bank3
   675  0073  1508               	bsf	8,2	;volatile
   676                           
   677                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
   678  0074  1283               	bcf	3,5	;RP0=0, select bank0
   679  0075  1303               	bcf	3,6	;RP1=0, select bank0
   680  0076  081F               	movf	31,w	;volatile
   681  0077  39C3               	andlw	-61
   682  0078  3808               	iorlw	8
   683  0079  28A6               	goto	L8
   684  007A                     l70:	
   685                           ;ADC.c: 59:         case 3:
   686                           
   687                           ;ADC.c: 58:             break;
   688                           
   689                           
   690                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
   691  007A  1585               	bsf	5,3	;volatile
   692                           
   693                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
   694  007B  1683               	bsf	3,5	;RP0=1, select bank3
   695  007C  1703               	bsf	3,6	;RP1=1, select bank3
   696  007D  1588               	bsf	8,3	;volatile
   697  007E  2883               	goto	L9
   698  007F                     l71:	
   699                           ;ADC.c: 64:         case 4:
   700                           
   701                           ;ADC.c: 63:             break;
   702                           
   703                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
   704                           
   705                           
   706                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
   707  007F  1685               	bsf	5,5	;volatile
   708                           
   709                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
   710  0080  1683               	bsf	3,5	;RP0=1, select bank3
   711  0081  1703               	bsf	3,6	;RP1=1, select bank3
   712  0082  1608               	bsf	8,4	;volatile
   713  0083                     L9:	
   714                           
   715                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
   716  0083  1283               	bcf	3,5	;RP0=0, select bank0
   717  0084  1303               	bcf	3,6	;RP1=0, select bank0
   718  0085  081F               	movf	31,w	;volatile
   719  0086  39C3               	andlw	-61
   720  0087  380C               	iorlw	12
   721  0088  28A6               	goto	L8
   722  0089                     l72:	
   723                           ;ADC.c: 69:         case 5:
   724                           
   725                           ;ADC.c: 68:             break;
   726                           
   727                           
   728                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
   729  0089  1409               	bsf	9,0	;volatile
   730                           
   731                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
   732  008A  1683               	bsf	3,5	;RP0=1, select bank3
   733  008B  1703               	bsf	3,6	;RP1=1, select bank3
   734  008C  1688               	bsf	8,5	;volatile
   735                           
   736                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
   737  008D  1283               	bcf	3,5	;RP0=0, select bank0
   738  008E  1303               	bcf	3,6	;RP1=0, select bank0
   739  008F  081F               	movf	31,w	;volatile
   740  0090  39C3               	andlw	-61
   741  0091  3814               	iorlw	20
   742  0092  28A6               	goto	L8
   743  0093                     l73:	
   744                           ;ADC.c: 74:         case 6:
   745                           
   746                           ;ADC.c: 73:             break;
   747                           
   748                           
   749                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
   750  0093  1489               	bsf	9,1	;volatile
   751                           
   752                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
   753  0094  1683               	bsf	3,5	;RP0=1, select bank3
   754  0095  1703               	bsf	3,6	;RP1=1, select bank3
   755  0096  1708               	bsf	8,6	;volatile
   756                           
   757                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
   758  0097  1283               	bcf	3,5	;RP0=0, select bank0
   759  0098  1303               	bcf	3,6	;RP1=0, select bank0
   760  0099  081F               	movf	31,w	;volatile
   761  009A  39C3               	andlw	-61
   762  009B  3818               	iorlw	24
   763  009C  28A6               	goto	L8
   764  009D                     l74:	
   765                           ;ADC.c: 79:         case 7:
   766                           
   767                           ;ADC.c: 78:             break;
   768                           
   769                           
   770                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
   771  009D  1509               	bsf	9,2	;volatile
   772                           
   773                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
   774  009E  1683               	bsf	3,5	;RP0=1, select bank3
   775  009F  1703               	bsf	3,6	;RP1=1, select bank3
   776  00A0  1788               	bsf	8,7	;volatile
   777                           
   778                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
   779  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   780  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   781  00A3  081F               	movf	31,w	;volatile
   782  00A4  39C3               	andlw	-61
   783  00A5  381C               	iorlw	28
   784  00A6                     L8:	
   785  00A6  009F               	movwf	31	;volatile
   786                           
   787                           ;ADC.c: 83:             break;
   788  00A7  28CA               	goto	l67
   789  00A8                     l899:	
   790  00A8  0873               	movf	ADConfig@canal,w
   791  00A9  00F5               	movwf	??_ADConfig
   792  00AA  01F6               	clrf	??_ADConfig+1
   793                           
   794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   795                           ; Switch size 1, requested type "simple"
   796                           ; Number of cases is 1, Range of values is 0 to 0
   797                           ; switch strategies available:
   798                           ; Name         Instructions Cycles
   799                           ; simple_byte            4     3 (average)
   800                           ; direct_byte           11     8 (fixed)
   801                           ; jumptable            260     6 (fixed)
   802                           ;	Chosen strategy is simple_byte
   803  00AB  0876               	movf	??_ADConfig+1,w
   804  00AC  3A00               	xorlw	0	; case 0
   805  00AD  1903               	skipnz
   806  00AE  28B0               	goto	l985
   807  00AF  28CA               	goto	l67
   808  00B0                     l985:	
   809                           
   810                           ; Switch size 1, requested type "simple"
   811                           ; Number of cases is 8, Range of values is 0 to 7
   812                           ; switch strategies available:
   813                           ; Name         Instructions Cycles
   814                           ; simple_byte           25    13 (average)
   815                           ; direct_byte           32     8 (fixed)
   816                           ; jumptable            260     6 (fixed)
   817                           ;	Chosen strategy is simple_byte
   818  00B0  0875               	movf	??_ADConfig,w
   819  00B1  3A00               	xorlw	0	; case 0
   820  00B2  1903               	skipnz
   821  00B3  285D               	goto	l66
   822  00B4  3A01               	xorlw	1	; case 1
   823  00B5  1903               	skipnz
   824  00B6  2866               	goto	l68
   825  00B7  3A03               	xorlw	3	; case 2
   826  00B8  1903               	skipnz
   827  00B9  2870               	goto	l69
   828  00BA  3A01               	xorlw	1	; case 3
   829  00BB  1903               	skipnz
   830  00BC  287A               	goto	l70
   831  00BD  3A07               	xorlw	7	; case 4
   832  00BE  1903               	skipnz
   833  00BF  287F               	goto	l71
   834  00C0  3A01               	xorlw	1	; case 5
   835  00C1  1903               	skipnz
   836  00C2  2889               	goto	l72
   837  00C3  3A03               	xorlw	3	; case 6
   838  00C4  1903               	skipnz
   839  00C5  2893               	goto	l73
   840  00C6  3A01               	xorlw	1	; case 7
   841  00C7  1903               	skipnz
   842  00C8  289D               	goto	l74
   843  00C9  28CA               	goto	l67
   844  00CA                     l67:	
   845                           
   846                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
   847  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   848  00CB  141F               	bsf	31,0	;volatile
   849                           
   850                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
   851  00CC  130C               	bcf	12,6	;volatile
   852                           
   853                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
   854  00CD  1683               	bsf	3,5	;RP0=1, select bank1
   855  00CE  1303               	bcf	3,6	;RP1=0, select bank1
   856  00CF  170C               	bsf	12,6	;volatile
   857                           
   858                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
   859  00D0  170B               	bsf	11,6	;volatile
   860                           
   861                           ;ADC.c: 92:     INTCONbits.GIE = 1;
   862  00D1  178B               	bsf	11,7	;volatile
   863                           
   864                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
   865  00D2  3027               	movlw	39
   866  00D3  00F6               	movwf	??_ADConfig+1
   867  00D4  30F5               	movlw	245
   868  00D5  00F5               	movwf	??_ADConfig
   869  00D6                     u37:	
   870  00D6  0BF5               	decfsz	??_ADConfig,f
   871  00D7  28D6               	goto	u37
   872  00D8  0BF6               	decfsz	??_ADConfig+1,f
   873  00D9  28D6               	goto	u37
   874                           
   875                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
   876  00DA  1283               	bcf	3,5	;RP0=0, select bank0
   877  00DB  1303               	bcf	3,6	;RP1=0, select bank0
   878  00DC  149F               	bsf	31,1	;volatile
   879  00DD  0008               	return
   880  00DE                     __end_of_ADConfig:	
   881                           
   882                           	psect	text2
   883  0107                     __ptext2:	
   884 ;; *************** function _ADCinit *****************
   885 ;; Defined at:
   886 ;;		line 112 in file "ADC.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   900 ;;      Params:         0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0
   902 ;;      Temps:          2       0       0       0       0
   903 ;;      Totals:         2       0       0       0       0
   904 ;;Total ram usage:        2 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    1
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           
   915                           ;psect for function _ADCinit
   916  0107                     _ADCinit:	
   917                           
   918                           ;ADC.c: 113:     PIR1bits.ADIF = 0;
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _ADCinit: [wreg]
   922  0107  1283               	bcf	3,5	;RP0=0, select bank0
   923  0108  1303               	bcf	3,6	;RP1=0, select bank0
   924  0109  130C               	bcf	12,6	;volatile
   925                           
   926                           ;ADC.c: 114:     PIE1bits.ADIE = 1;
   927  010A  1683               	bsf	3,5	;RP0=1, select bank1
   928  010B  1303               	bcf	3,6	;RP1=0, select bank1
   929  010C  170C               	bsf	12,6	;volatile
   930                           
   931                           ;ADC.c: 115:     INTCONbits.GIE = 1;
   932  010D  178B               	bsf	11,7	;volatile
   933                           
   934                           ;ADC.c: 116:     _delay((unsigned long)((20)*(4000000/4000.0)));
   935  010E  301A               	movlw	26
   936  010F  00F4               	movwf	??_ADCinit+1
   937  0110  30F8               	movlw	248
   938  0111  00F3               	movwf	??_ADCinit
   939  0112                     u47:	
   940  0112  0BF3               	decfsz	??_ADCinit,f
   941  0113  2912               	goto	u47
   942  0114  0BF4               	decfsz	??_ADCinit+1,f
   943  0115  2912               	goto	u47
   944  0116  0000               	nop
   945                           
   946                           ;ADC.c: 117:     ADCON0bits.GO_nDONE = 1;
   947  0117  1283               	bcf	3,5	;RP0=0, select bank0
   948  0118  1303               	bcf	3,6	;RP1=0, select bank0
   949  0119  149F               	bsf	31,1	;volatile
   950  011A  0008               	return
   951  011B                     __end_of_ADCinit:	
   952                           
   953                           	psect	text3
   954  00DE                     __ptext3:	
   955 ;; *************** function _ISR *****************
   956 ;; Defined at:
   957 ;;		line 30 in file "Slave1_main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   971 ;;      Params:         0       0       0       0       0
   972 ;;      Locals:         0       0       0       0       0
   973 ;;      Temps:          3       0       0       0       0
   974 ;;      Totals:         3       0       0       0       0
   975 ;;Total ram usage:        3 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		Interrupt level 1
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           
   985                           ;psect for function _ISR
   986  00DE                     _ISR:	
   987                           
   988                           ;Slave1_main.c: 31:     if(ADIE && ADIF){
   989  00DE  1683               	bsf	3,5	;RP0=1, select bank1
   990  00DF  1303               	bcf	3,6	;RP1=0, select bank1
   991  00E0  1F0C               	btfss	12,6	;volatile
   992  00E1  28EC               	goto	i1l20
   993  00E2  1283               	bcf	3,5	;RP0=0, select bank0
   994  00E3  1303               	bcf	3,6	;RP1=0, select bank0
   995  00E4  1F0C               	btfss	12,6	;volatile
   996  00E5  28EC               	goto	i1l20
   997                           
   998                           ;Slave1_main.c: 32:         valorADC = ADRESH;
   999  00E6  081E               	movf	30,w	;volatile
  1000  00E7  00F0               	movwf	??_ISR
  1001  00E8  0870               	movf	??_ISR,w
  1002  00E9  00FA               	movwf	_valorADC
  1003                           
  1004                           ;Slave1_main.c: 33:         ADIF = 0;
  1005  00EA  130C               	bcf	12,6	;volatile
  1006                           
  1007                           ;Slave1_main.c: 34:         ADCON0bits.GO_nDONE = 1;
  1008  00EB  149F               	bsf	31,1	;volatile
  1009  00EC                     i1l20:	
  1010  00EC  0872               	movf	??_ISR+2,w
  1011  00ED  008A               	movwf	10
  1012  00EE  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  1013  00EF  0083               	movwf	3
  1014  00F0  0EFE               	swapf	126,f
  1015  00F1  0E7E               	swapf	126,w
  1016  00F2  0009               	retfie
  1017  00F3                     __end_of_ISR:	
  1018  007E                     btemp	set	126	;btemp
  1019  007E                     wtemp0	set	126
  1020                           
  1021                           	psect	intentry
  1022  0004                     __pintentry:	
  1023                           ;incstack = 0
  1024                           ; Regs used in _ISR: [wreg]
  1025                           
  1026  0004                     interrupt_function:	
  1027  007E                     saved_w	set	btemp
  1028  0004  00FE               	movwf	btemp
  1029  0005  0E03               	swapf	3,w
  1030  0006  00F1               	movwf	??_ISR+1
  1031  0007  080A               	movf	10,w
  1032  0008  00F2               	movwf	??_ISR+2
  1033  0009  120A  118A  28DE   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADConfig

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     218
                                              8 COMMON     2     2      0
                            _ADCinit
                           _ADConfig
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADCinit                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCinit
   _ADConfig

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Feb 19 14:42:15 2020

             __CFG_CP$OFF 0000                        l25 0106                        l61 0044  
                      l70 007A                        l71 007F                        l63 0045  
                      l72 0089                        l64 0049                        l73 0093  
                      l74 009D                        l66 005D                        l67 00CA  
                      l68 0066                        l69 0070                        u37 00D6  
                      u47 0112                       l871 001C                       l873 0022  
                     l875 0027                       l867 0016                       l981 0036  
                     l869 001B                       l877 002E                       l983 0055  
                     l879 004D                       l985 00B0                       l899 00A8  
            __CFG_CPD$OFF 0000                       _ISR 00DE           __end_of_ADCinit 011B  
            __CFG_LVP$OFF 0000                      ?_ISR 0070                      _ADIE 0466  
                    _ADIF 0066                      i1l20 00EC              __CFG_WRT$OFF 0000  
                    _main 00F3                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000          __end_of_ADConfig 00DE                     ??_ISR 0070  
                   ?_main 0070             __CFG_WDTE$OFF 0000            __CFG_FCMEN$OFF 0000  
          __CFG_BOREN$OFF 0000                     pclath 000A                     status 0003  
                   wtemp0 007E            __CFG_MCLRE$OFF 0000           __initialization 000F  
            __end_of_main 0107                 ??_ADCinit 0073                    ??_main 0078  
                  _ADRESH 001E                    _ADRESL 009E            __CFG_PWRTE$OFF 0000  
                  saved_w 007E                 ?_ADConfig 0073   __end_of__initialization 0010  
          __pcstackCOMMON 0070                ??_ADConfig 0075                __pmaintext 00F3  
           ADConfig@canal 0073                __pintentry 0004                   _ADCinit 0107  
         ADConfig@oscFreq 0077                 _ANSELbits 0188                   __ptext1 0014  
                 __ptext2 0107                   __ptext3 00DE              __size_of_ISR 0015  
    end_of_initialization 0010                 _TRISAbits 0085                 _TRISEbits 0089  
       __size_of_ADConfig 00CA       start_initialization 000F               __end_of_ISR 00F3  
__CFG_FOSC$INTRC_NOCLKOUT 0000                  ?_ADCinit 0070               __pbssCOMMON 007A  
               ___latbits 0002                  _ADConfig 0014         interrupt_function 0004  
                _PIE1bits 008C                  _PIR1bits 000C                _ADCON0bits 001F  
              _ADCON1bits 009F       ADConfig@justificado 0074          __size_of_ADCinit 0014  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 0014                  _valorADC 007A  
              _INTCONbits 000B                  intlevel1 0000  
